<?xml version="1.0" encoding="utf-8"?><doc>
    <assembly>
        <name>Aerotech.Ensemble</name>
    </assembly>
    <members>
        <member name="T:Aerotech.Ensemble.ServoRateParameter">
            <summary culture="en">Represents the servo update rates</summary>
        </member>
        <member name="F:Aerotech.Ensemble.ServoRateParameter.OnekHz">
            <summary culture="en">1 kHz rate (1 msec update time)</summary>
        </member>
        <member name="F:Aerotech.Ensemble.ServoRateParameter.TwokHz">
            <summary culture="en">2 kHz rate (0.5 msec update time)</summary>
        </member>
        <member name="F:Aerotech.Ensemble.ServoRateParameter.FourkHz">
            <summary culture="en">4 kHz rate (0.25 msec update time)</summary>
        </member>
        <member name="F:Aerotech.Ensemble.ServoRateParameter.FivekHz">
            <summary culture="en">5 kHz rate (0.2 msec update time)</summary>
        </member>
        <member name="F:Aerotech.Ensemble.ServoRateParameter.TenkHz">
            <summary culture="en">10 kHz rate (0.1 msec update time)</summary>
        </member>
        <member name="F:Aerotech.Ensemble.ServoRateParameter.TwentykHz">
            <summary>Twenty kHz</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.TaskState">
            <summary culture="en">
						This value represents information about the state of this task.
					</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.Inactive">
            <summary>Inactive</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.Idle">
            <summary>Idle</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.ProgramReady">
            <summary>Program Ready</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.ProgramRunning">
            <summary>Program Running</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.ProgramPaused">
            <summary>Program Paused</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.ProgramComplete">
            <summary>Program Complete</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.Error">
            <summary>Error</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.RunningEthernet">
            <summary>Running Ethernet</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.RunningAsciiCommand">
            <summary>Running Ascii Command</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.RunningDisplay">
            <summary>Running Display</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.TaskState.RunningPlugin">
            <summary>Running Plugin</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.PlaneStatus">
            <summary culture="en">Represents plane status</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PlaneStatus.op_Explicit(System.Int32)~Aerotech.Ensemble.Status.PlaneStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.Ensemble.Status.PlaneStatus"></see> for the given class</returns>
             <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PlaneStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PlaneStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PlaneStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PlaneStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PlaneStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PlaneStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.Ensemble.Status.PlaneStatus.MaskValue"></see>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.MotionActive">
            <summary culture="en">Motion Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.VelocityProfilingActive">
            <summary culture="en">Velocity Profiling Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.AccelerationPhaseActive">
            <summary culture="en">Acceleration Phase Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.DecelerationPhaseActive">
            <summary culture="en">Deceleration Phase Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.MotionAborting">
            <summary culture="en">Motion Aborting</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.HoldModeActive">
            <summary culture="en">Hold Mode Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PlaneStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.Ensemble.Status.DebugFlags">
            <summary culture="en">Represents the debug flags on the controller</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DebugFlags.op_Explicit(System.Int32)~Aerotech.Ensemble.Status.DebugFlags">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.Ensemble.Status.DebugFlags"></see> for the given class</returns>
             <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DebugFlags.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DebugFlags.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DebugFlags.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DebugFlags.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DebugFlags.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DebugFlags.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.Ensemble.Status.DebugFlags.MaskValue"></see>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.PrintStringCallbackPending">
            <summary>Print String Callback Pending</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.CollectionTriggered">
            <summary>Collection Triggered</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.CollectionDone">
            <summary>Collection Done</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.InputBoxCallbackPending">
            <summary>Input Box Callback Pending</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DebugFlags.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.Ensemble.Status.AxisStatus">
            <summary culture="en">Represents an axis status</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisStatus.op_Explicit(System.Int32)~Aerotech.Ensemble.Status.AxisStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.Ensemble.Status.AxisStatus"></see> for the given class</returns>
             <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.Ensemble.Status.AxisStatus.MaskValue"></see>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.Enabled">
            <summary culture="en">Enabled</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.Homed">
            <summary culture="en">Homed</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.InPosition">
            <summary culture="en">In Position</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.MoveActive">
            <summary culture="en">Move Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.AccelerationPhase">
            <summary culture="en">Acceleration Phase</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.DecelerationPhase">
            <summary culture="en">Deceleration Phase</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.PositionCaptureActive">
            <summary culture="en">Position Capture Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.CurrentClamp">
            <summary culture="en">Current Clamp</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.BrakeOutput">
            <summary culture="en">Brake Output Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.MotionIsCw">
            <summary culture="en">Motion Direction (1 = CW)</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.MasterSlaveControl">
            <summary culture="en">Gearing or camming active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.CalibrationActive">
            <summary culture="en">Calibration Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.CalibrationEnabled">
            <summary culture="en">Calibration Enabled</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.JoystickControl">
            <summary culture="en">Joystick Control</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.Homing">
            <summary culture="en">Homing</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.MasterMotionSuppressed">
            <summary culture="en">Master Motion Suppressed</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.GantryModeActive">
            <summary culture="en">Gantry Mode Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.GantryMasterActive">
            <summary culture="en">Gantry Master Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.AutofocusActive">
            <summary culture="en">Autofocus Active</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.CommandShapingFilterDone">
            <summary culture="en">Command Shaping Filter Done</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.InPosition2">
            <summary culture="en">In Position 2</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.CwEndOfTravelLimitInput">
            <summary culture="en">CW End Of Travel Limit Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.CcwEndOfTravelLimitInput">
            <summary culture="en">CCW End Of Travel Limit Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.HomeLimitInput">
            <summary culture="en">Home Limit Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.MarkerInput">
            <summary culture="en">Marker Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.HallAInput">
            <summary culture="en">Hall A Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.HallBInput">
            <summary culture="en">Hall B Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.HallCInput">
            <summary culture="en">Hall C Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.SineEncoderError">
            <summary culture="en">Sine Encoder Input Error</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.CosineEncoderError">
            <summary culture="en">Cosine Encoder Input Error</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.EmergencyStopInput">
            <summary culture="en">Emergency Stop Input Level</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.Ensemble.Status.AxisFault">
            <summary culture="en">Represents the faults of an axis</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisFault.op_Explicit(System.Int32)~Aerotech.Ensemble.Status.AxisFault">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.Ensemble.Status.AxisFault"></see> for the given class</returns>
             <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisFault.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisFault.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisFault.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisFault.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisFault.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.AxisFault.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.Ensemble.Status.AxisFault.MaskValue"></see>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.PositionErrorFault">
            <summary culture="en">Position Error Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.OverCurrentFault">
            <summary culture="en">Over Current Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.CwEndOfTravelLimitFault">
            <summary culture="en">CW/Positive End-of-Travel Limit Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.CcwEndOfTravelLimitFault">
            <summary culture="en">CCW/Negative End-of-Travel Limit Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.CwSoftwareLimitFault">
            <summary culture="en">CW/High Software Limit Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.CcwSoftwareLimitFault">
            <summary culture="en">CCW/Low Software Limit Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.AmplifierFault">
            <summary culture="en">Amplifier Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.PositionFeedbackFault">
            <summary culture="en">Position Feedback Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.VelocityFeedbackFault">
            <summary culture="en">Velocity Feedback Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.HallSensorFault">
            <summary culture="en">Hall Sensor Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.MaxVelocityCommandFault">
            <summary culture="en">Maximum Velocity Command Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.EmergencyStopFault">
            <summary culture="en">Emergency Stop Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.VelocityErrorFault">
            <summary culture="en">Velocity Error Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.ExternalFault">
            <summary culture="en">External Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.MotorTemperatureFault">
            <summary culture="en">Motor Temperature Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.AmplifierTemperatureFault">
            <summary culture="en">Amplifier Temperature Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.EncoderFault">
            <summary culture="en">Encoder Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.CommunicationLostFault">
            <summary culture="en">Communication Lost Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.FeedbackScalingFault">
            <summary culture="en">Feedback Scaling Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.MarkerSearchFault">
            <summary culture="en">Marker Search Fault</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisFault.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.DataCollectionFlags">
            <summary culture="en">Specifies the status flags of data collection</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.DataCollectionFlags.MemoryAllocated">
            <summary culture="en"></summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.DataCollectionFlags.Active">
            <summary culture="en"></summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.DataCollectionFlags.Triggered">
            <summary culture="en">Data collection was triggered</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.DataCollectionFlags.Done">
            <summary culture="en">Data collection is done</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.DataCollectionFlags.Aborted">
            <summary culture="en"></summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.DataCollectionFlags.Overflow">
            <summary culture="en">Data collection buffer overflowed</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.DataCollectionFlags.IsScopeTrigInitiated">
            <summary culture="en">Data collection was started by a SCOPETRIG</summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.ScopeTrigId">
            <summary culture="en">Specifies the known scope trig application Ids</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.ScopeTrigId.Default">
            <summary culture="en">No application Id was specified</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.ScopeTrigId.DigitalScope">
            <summary culture="en">Digital Scope was specified</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.ScopeTrigId.MotionDesigner">
            <summary culture="en">Motion Designer was specified</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.ScopeTrigId.MotionSimulator">
            <summary culture="en">Motion Simulator was specified</summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.StatusItem">
            <summary culture="en">Specifies which status item to collect</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PositionCommand">
            <summary culture="en">Position command</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PositionFeedback">
            <summary culture="en">Position feedback</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PositionFeedbackAuxiliary">
            <summary culture="en">Position feedback auxiliary</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AxisStatus">
            <summary culture="en">Axis status</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AxisFault">
            <summary culture="en">Axis fault</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogInput0">
            <summary culture="en">Analog input #0</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogInput1">
            <summary culture="en">Analog input #1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogOutput0">
            <summary culture="en">Analog output #0</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogOutput1">
            <summary culture="en">Analog output #1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.DigitalInput0">
            <summary culture="en">Digital input #0</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.DigitalInput1">
            <summary culture="en">Digital input #1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.DigitalInput2">
            <summary culture="en">Digital input #2</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.DigitalOutput0">
            <summary culture="en">Digital output #0</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.DigitalOutput1">
            <summary culture="en">Digital output #1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.DigitalOutput2">
            <summary culture="en">Digital output #2</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.CurrentCommand">
            <summary culture="en">Current command</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.CurrentFeedback">
            <summary culture="en">Current feedback</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AmplifierTemperature">
            <summary culture="en">Amplifier temperature</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.DebugFlags">
            <summary culture="en">Auxiliary flags</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.ProgramPositionCommand">
            <summary culture="en">Program position command</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.ProgramCountTaskLibrary">
            <summary culture="en">Program count of library task</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.ProgramCountTask1">
            <summary culture="en">Program count of task #1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.ProgramCountTask2">
            <summary culture="en">Program count of task #2</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.ProgramCountTask3">
            <summary culture="en">Program count of task #3</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.ProgramCountTask4">
            <summary culture="en">Program count of task #4</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PacketTime">
            <summary culture="en">Time of the packet retrieval in milliseconds</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.ProgramPositionFeedback">
            <summary culture="en">Program position feedback</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AbsoluteFeedback">
            <summary culture="en">Absolute feedback</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PlaneStatus0">
            <summary culture="en">Status of plane #0</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PlaneStatus1">
            <summary culture="en">Status of plane #1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PlaneStatus2">
            <summary culture="en">Status of plane #2, Epaq only</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PlaneStatus3">
            <summary culture="en">Status of plane #3, Epaq only</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.TaskState1">
            <summary culture="en">State of task #1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.TaskState2">
            <summary culture="en">State of task #2</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.TaskState3">
            <summary culture="en">State of task #3</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.TaskState4">
            <summary culture="en">State of task #4</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogInput2">
            <summary culture="en">Analog input #2</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogInput3">
            <summary culture="en">Analog input #3</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogOutput2">
            <summary culture="en">Analog output #2</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AnalogOutput3">
            <summary culture="en">Analog output #3</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.VelocityCommand">
            <summary culture="en">Velocity Command</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.VelocityFeedback">
            <summary culture="en">Velocity Feedback</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AccelerationCommand">
            <summary culture="en">Acceleration Command</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.VelocityError">
            <summary culture="en">Velocity Error</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.PositionError">
            <summary culture="en">Position Error</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.CurrentError">
            <summary culture="en">Current Error</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AccelerationFeedback">
            <summary culture="en">Acceleration Feedback</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.StatusItem.AccelerationError">
            <summary culture="en">Acceleration Error</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.LoopTransmissionMode">
            <summary culture="en">The type of loop transmission disturbance to use</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionMode.Off">
            <summary culture="en">Turn off loop transmission</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionMode.Sinusoid">
            <summary culture="en">Uses a sinusoid disturbance</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionMode.SinusoidGantry">
            <summary culture="en">Uses a sinusoid disturbance and excites both axes of a gantry</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.LoopTransmissionType">
            <summary culture="en">The loop transmission type to use</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionType.OpenLoop">
            <summary culture="en">Open Loop</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionType.ClosedLoop">
            <summary culture="en">Closed Loop</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionType.CurrentLoop">
            <summary culture="en">Current Loop</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionType.AFOpenLoop">
            <summary culture="en">AF Open Loop</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.LoopTransmissionType.AFClosedLoop">
            <summary culture="en">AF Closed Loop</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.OnOff">
            <summary culture="en">Represents the OnOff mode in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.OnOff.Off">
            <summary culture="en">Off or 0 is issued</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.OnOff.On">
            <summary culture="en">On or 1 is issued</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.PsoEncoder">
            <summary culture="en">Represents the PSO Encoder in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoEncoder.Primary">
            <summary culture="en">Primary PSO encoder</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoEncoder.Auxiliary">
            <summary culture="en">Auxiliary PSO encoder</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoEncoder.MXH">
            <summary culture="en">MXH PSO encoder</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoEncoder.SSINetPort1">
            <summary culture="en">SSI Net Port 1 PSO encoder</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoEncoder.SSINetPort2">
            <summary culture="en">SSI Net Port 2 PSO encoder</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.PsoMode">
            <summary culture="en">Represents the PSO mode in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoMode.Reset">
            <summary culture="en">Reset PSO</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoMode.Off">
            <summary culture="en">Turn off PSO</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoMode.Arm">
            <summary culture="en">Arm PSO</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoMode.Fire">
            <summary culture="en">Fire PSO</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoMode.On">
            <summary culture="en">Turn on PSO</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.PsoMode.FireContinuous">
            <summary culture="en">Fire Continuous</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.EthernetStatus">
            <summary culture="en">The ethernet status information</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.EthernetStatus.DataInTransmitter">
            <summary culture="en">Whether there is data to be transmitted</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.EthernetStatus.DataInReceiver">
            <summary culture="en">Whether there is data to be processed</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.Semaphores">
            <summary culture="en">Represents the semaphores in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.Semaphores.ModbusRegisters">
            <summary culture="en">Modbus registers semaphore</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.Semaphores.GlobalIntegers">
            <summary culture="en">Global integers semaphore</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.Semaphores.GlobalDoubles">
            <summary culture="en">Global doubles semaphore</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.WaitOption">
            <summary culture="en">The wait option for waiting for a move to be completed</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.WaitOption.InPosition">
            <summary culture="en">Wait in position</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.WaitOption.MoveDone">
            <summary culture="en">Wait for move done</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.WaitType">
            <summary culture="en">Represents the wait mode in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.WaitType.NoWait">
            <summary culture="en">Do not wait for motion to be done</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.WaitType.MoveDone">
            <summary culture="en">Wait for motion to be done</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.WaitType.InPos">
            <summary culture="en">Wait for axis to be in position</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.ModeType">
            <summary culture="en">
						The Mode types that can be retrieved by using the GETMODE immediate command.
					</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.MotionMode">
            <summary culture="en">Returns the Motion Mode type (absolute/incremental).</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.WaitMode">
            <summary culture="en">Returns the Wait Mode type (in position / move done / no wait).</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.RampMode">
            <summary culture="en">Returns the Ramp Mode type (linear / SCurve).</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.VelocityMode">
            <summary culture="en">Returns the Velocity Mode type (profiled / not profiled).</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.ScurveValue">
            <summary culture="en">Returns the SCurve value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.TimeScaleValue">
            <summary culture="en">Returns the Timescale value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.DefaultVelocityValue">
            <summary culture="en">Returns the default velocity value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.AccelRateValue">
            <summary culture="en">Returns the acceleration rate value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.AccelTimeValue">
            <summary culture="en">Returns the acceleration time value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.AccelDistValue">
            <summary culture="en">Returns the acceleration distance value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.DecelRateValue">
            <summary culture="en">Returns the deceleration rate value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.DecelTimeValue">
            <summary culture="en">Returns the deceleration time value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.DecelDistValue">
            <summary culture="en">Returns the deceleration distance value.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.ModeType.Plane">
            <summary culture="en">Returns the current plane number for the task.</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.CompilerFlagType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerFlagType.NoStdOut">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerFlagType.YaccDebug">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerFlagType.SymDump">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerFlagType.AsmDebug">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerFlagType.NoLine">
            <summary></summary>
        </member>
        <member name="T:Aerotech.AeroBasic.AssemblerFlagType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.AssemblerFlagType.NoStdOut">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.AssemblerFlagType.ObjDebug">
            <summary></summary>
        </member>
        <member name="F:Aerotech.AeroBasic.AssemblerFlagType.SymDump">
            <summary></summary>
        </member>
        <member name="T:Aerotech.AeroBasic.CompilerErrorType">
            <summary culture="en">
						The type of error that occured during compilation
					</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.Syntax">
            <summary culture="en">
								The syntax does not follow AeroBasic
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.Process">
            <summary culture="en">
								Specific testing detected an error (ex: unknown register set)
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.System">
            <summary culture="en">
								The operating system blocked an operation (ex: file access restriction)
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.Unrecoverable">
            <summary culture="en">
								An unrecoverable error occured (ex: out of memory)
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.Warning">
            <summary culture="en">
								The message given is a warning
							</summary>
        </member>
        <member name="T:Aerotech.Ensemble.ControllerType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerType.CP">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerType.MP">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerType.CL">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerType.HPE">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerType.HLE">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerType.Control">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerType.Lab">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.PluginMode">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.PluginMode.Load">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.PluginMode.EnableScan">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.PluginMode.DisableScan">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.ResultFormat">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ResultFormat.DataOnly">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ResultFormat.DataWithLabels">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.ControllerTask">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerTask.Task0">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerTask.Task1">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerTask.Task2">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerTask.Task3">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ControllerTask.Task4">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.CallbackType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.CallbackType.Print">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.CallbackType.Input">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.PluginAccessType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.PluginAccessType.Debug">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.PluginAccessType.Custom">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.PluginAccessType.None">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.FlashMode">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashMode.Erase">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashMode.Save">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashMode.Read">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashMode.Write">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.ProgressType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.None">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.SendFile">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.GetFile">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.GetDir">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.LoadProg">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.Scope">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.FirmLoad">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.FirmBurn">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.RegisterRetrieve">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.ProgressType.RegisterSend">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.FlashType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashType.Integer">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashType.Float">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashType.Long">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.FlashType.Double">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.Core.UpdateStatus">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.NoStatus">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.NoEnsemblesDetected">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.FailedAllociation">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.DetectedUnknownEnsembleDriveType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.ErrorOpeningMLodFile">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.ErrorReadingMLodFile">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.MLodFileCorrupted">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.TooManyLodImages">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.ImageNameTooBig">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.LodFailedCRC">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.FamilyDriveRevOutOfRange">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.DriveWithNoAvailableImage">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.InadiquateMemoryForDownload">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.FailedAckOfDownload">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.TooManyMasterEnetDrives">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.FirmwareImagesNotLoaded">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.UpdateStatus.FailedFirmwareBurn">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.Core.AxisCalFileType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.AxisCalFileType.Invalid">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.AxisCalFileType.OneDimensional">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Core.AxisCalFileType.TwoDimensional">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.OptionalDataNumber">
            <summary culture="en">
						Specifies the number of the optional data source
					</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataNumber.Optional1">
            <summary culture="en">
								The first optional output
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataNumber.Optional2">
            <summary culture="en">
								The second optional output
							</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Communication.ControllerFlags">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.ControllerFlags.None">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.ControllerFlags.ParametersDefaulted">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.ControllerFlags.IsPlus">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.ControllerFlags.EnsembleType">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.Communication.AxisMismatch">
            <summary culture="en">
						Specifies if there are mismatches between the axes of a controller
					</summary><remarks culture="en">
						<para>
							If this is different from <see cref="F:Aerotech.Ensemble.Communication.AxisMismatch.None"></see>, corrective
							measures should be taken.
						</para>
					</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.AxisMismatch.None">
            <summary culture="en">
								There are no mismatches between the axes
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.AxisMismatch.FirmwareVersion">
            <summary culture="en">
								The version of firmware is different between the axes, update the firmware
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.AxisMismatch.AxisMask">
            <summary culture="en">
								The axes numbers are different from expected, please setup the axes that are expected
							</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.RegisterType">
            <summary culture="en">
						Enumeration of Register types.
					</summary><remarks culture="en">
						This is an enumeration of the Register types used when calling the Register
						immediate command functions found in <see cref="P:Aerotech.Ensemble.Controller.Commands"></see>.
					</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.GlobalIntegers">
            <summary culture="en">Global Integers</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.GlobalDoubles">
            <summary culture="en">Global Doubles</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ConversionRegisters">
            <summary culture="en">Conversion Registers</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterInputWords">
            <summary culture="en">
								Modbus Master Input Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterOutputWords">
            <summary culture="en">
								Modbus Master Output Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterInputBits">
            <summary culture="en">
								Modbus Master Input Bit Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterOutputBits">
            <summary culture="en">
								Modbus Master Output Bit Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterStatusWords">
            <summary culture="en">
								Modbus Master Status Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterStatusBits">
            <summary culture="en">
								Modbus Master Status Bit Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterVirtualInputs">
            <summary culture="en">
								Modbus Master Virtual Input Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusMasterVirtualOutputs">
            <summary culture="en">
								Modbus Master Virtual Output Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusSlaveInputWords">
            <summary culture="en">
								Modbus Slave Input Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusSlaveOutputWords">
            <summary culture="en">
								Modbus Slave Output Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusSlaveInputBits">
            <summary culture="en">
								Modbus Slave Input Bit Registers
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RegisterType.ModbusSlaveOutputBits">
            <summary culture="en">
								Modbus Slave Output Bit Registers
							</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Information.ComponentType">
            <summary culture="en">The type of the component</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.CP">
            <summary culture="en">Compact pulse width modulation</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.MP">
            <summary culture="en">Micro pulse width modulation</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.Control">
            <summary culture="en">Ensemble control board</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.CL">
            <summary culture="en">Compact Linear</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.HPE">
            <summary culture="en">
								High performance pulse width modulation enhanced
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.HLE">
            <summary culture="en">
								High performance linear enhanced
							</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.ML">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.PMT">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.ComponentType.Lab">
            <summary culture="en">Ensemble Lab controller</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParameterFormat">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterFormat.Hex">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterFormat.Dec">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParameterValueType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterValueType.DoubleParm">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterValueType.FloatParm">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterValueType.IntParm">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterValueType.LongParm">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterValueType.StringParm">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.VarValueType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarValueType.CharVar">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarValueType.DoubleVar">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarValueType.FloatVar">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarValueType.IntVar">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarValueType.LongVar">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarValueType.StringVar">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.VarMemType">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarMemType.Local">
            <summary></summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VarMemType.Global">
            <summary></summary>
        </member>
        <member name="T:Aerotech.Ensemble.Communication.CommunicationType">
            <summary culture="en">The communication type used to communicate with a controller</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.CommunicationType.Ethernet">
            <summary culture="en">Communications are over ethernet</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.CommunicationType.Usb">
            <summary culture="en">Communications are over USB</summary>
        </member>
        <member name="T:Aerotech.Unused.CompilerErrorType">
            <summary culture="en">
								The type of error that occured during compilation
							</summary>
        </member>
        <member name="F:Aerotech.Unused.CompilerErrorType.Warning">
            <summary culture="en">
								The build result describes a warning that occurred during the compilation
							</summary>
        </member>
        <member name="F:Aerotech.Unused.CompilerErrorType.Error">
            <summary culture="en">
								The build result describes an error that occurred during the compilation
							</summary>
        </member>
        <member name="F:Aerotech.Unused.CompilerErrorType.None">
            <summary>None</summary>
        </member>
        <member name="T:Aerotech.Ensemble.SystemDLLWrapper.RegistryID">
            <summary>RegistryID</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.InstallDir">
            <summary>InstallDir</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.A3200IniFile">
            <summary>A3200IniFile</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.A3200MMIPosFile">
            <summary>A3200MMIPosFile</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.DefaultTeachFile">
            <summary>DefaultTeachFile</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.ProgramDir">
            <summary>ProgramDir</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.RTX_InstallDir">
            <summary>RTX_InstallDir</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.RTX_VersionString">
            <summary>RTX_VersionString</summary>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.RegistryID.RT_TCP_IP_VersionString">
            <summary>RT_TCP_IP_VersionString</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Configuration.ActiveFeatures">
            <summary culture="en">Represents a mask of the features active on the controller</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Configuration.ActiveFeatures.op_Explicit(System.Int32)~Aerotech.Ensemble.Configuration.ActiveFeatures">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.Ensemble.Configuration.ActiveFeatures"></see> for the given class</returns>
             <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Configuration.ActiveFeatures.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Configuration.ActiveFeatures.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.Ensemble.Configuration.ActiveFeatures.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Configuration.ActiveFeatures.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Configuration.ActiveFeatures.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Configuration.ActiveFeatures.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.Ensemble.Configuration.ActiveFeatures.MaskValue"></see>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.DynamicControlsToolbox">
            <summary culture="en">Dynamic Controls Toolbox</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.EnhancedThroughputModule">
            <summary culture="en">Enhanced Throughput Module</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.EnhancedTrackingControl">
            <summary culture="en">Enhanced Tracking Control</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Configuration.ActiveFeatures.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.Ensemble.Information.FlashConfigStatus">
            <summary>Contains information about configuration of FlashConfig in a stage.</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Information.FlashConfigStatus.op_Explicit(System.Int32)~Aerotech.Ensemble.Information.FlashConfigStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.Ensemble.Information.FlashConfigStatus"></see> for the given class</returns>
             <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Information.FlashConfigStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Information.FlashConfigStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.Ensemble.Information.FlashConfigStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Information.FlashConfigStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Information.FlashConfigStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Information.FlashConfigStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.Ensemble.Information.FlashConfigStatus.MaskValue"></see>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.Supported">
            <summary>FlashConfig memory is present; feature is supported.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.ParametersActive">
            <summary>FlashConfig parameters are active.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.CalibrationActive">
            <summary>FlashConfig calibration is active.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.FlashConfigStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.RampMode">
            <summary culture="en">Represents the ramp mode in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RampMode.Dist">
            <summary culture="en">Distance-based acceleration and deceleration</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RampMode.Rate">
            <summary culture="en">Rate-based acceleration and deceleration</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Commands.RampMode.Time">
            <summary culture="en">Time-based acceleration and deceleration</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.VariableType">
            <summary culture="en">The type of a variable.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableType.Integer">
            <summary culture="en">The variable is a 32-bit signed Integer</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableType.Long">
            <summary culture="en">The variable is a 64-bit signed Long (integer)</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableType.Double">
            <summary culture="en">The variable is a 64-bit floating point, ANSI/IEEE Standard 754-1985 Double</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableType.Float">
            <summary culture="en">The variable is a 32-bit floating point, ANSI/IEEE Standard 754-1985 Float</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableType.String">
            <summary culture="en">The variable is an ASCII String</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableType.Struct">
            <summary culture="en">The variable is a Structure</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableType.Array">
            <summary culture="en">The variable is an Array (of primitives or structures)</summary>
        </member>
        <member name="T:Aerotech.Ensemble.TaskId">
            <summary culture="en">The available tasks on a controller.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.TaskId.TLibrary">
            <summary culture="en">The library task</summary>
        </member>
        <member name="F:Aerotech.Ensemble.TaskId.T01">
            <summary culture="en">Task 1</summary>
        </member>
        <member name="F:Aerotech.Ensemble.TaskId.T02">
            <summary culture="en">Task 2</summary>
        </member>
        <member name="F:Aerotech.Ensemble.TaskId.T03">
            <summary culture="en">Task 3</summary>
        </member>
        <member name="F:Aerotech.Ensemble.TaskId.T04">
            <summary culture="en">Task 4</summary>
        </member>
        <member name="F:Aerotech.Ensemble.TaskId.TAuxiliary">
            <summary culture="en">The auxiliary task</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.VariableScope">
            <summary culture="en">The scope of an AeroBasic variable.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableScope.Global">
            <summary culture="en">The variable is a global</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableScope.Argument">
            <summary culture="en">The variable is an argument to a function</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.VariableScope.Local">
            <summary culture="en">The variable is a local to a function</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterConstants.DataVersionSectionName">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;dataversion_sectionname&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterConstants.OldestCompatibleParameterFileVersionSectionName">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;oldestcompatibleparameterfileversion_sectionname&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterConstants.OldestCompatibleParameterFileVersionMajor">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;oldestcompatibleparameterfileversion_major&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterConstants.OldestCompatibleParameterFileVersionMinor">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;oldestcompatibleparameterfileversion_minor&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_ModbusRead">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_ModbusRead&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_ModbusWrite">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_ModbusWrite&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_Hilscher">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_Hilscher&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_DriveModbusRead">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_DriveModbusRead&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_DriveModbusWrite">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_DriveModbusWrite&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusMappingData_MaxModbusRegBytes">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusMappingData_MaxModbusRegBytes&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusMappingData_MaxModbusBitBytes">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusMappingData_MaxModbusBitBytes&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.Fieldbus.FieldbusConstants.FieldbusMappingData_MaxHilscherBytes">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;FieldbusMappingData_MaxHilscherBytes&quot;]/*"></include>
        </member>
        <member name="F:Aerotech.Ensemble.SystemDLLWrapper.WrapperConstants.ErrorMessages_MessageLength">
            <include file="c:\Aerotech\controller\stable\ensemble\pc\libs\DotNet\doc\CommonStructsDoc.xml" path="/*/constants[@name=&quot;ErrorMessages_MessageLength&quot;]/*"></include>
        </member>
        <member name="T:Aerotech.Ensemble.Core.TaskError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.NoError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.ArgumentOutOfBounds">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidRegisterType">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.PortAlreadyOpen">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidSyncTask">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidProgramPassword">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidEmbeddedCommandIssued">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CorruptFlashMemoryFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.UnimplementedCommand">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.ModbusRegistersRegx">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FeatureNotSupportedByHardware">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.AxisCurrentlyInFault">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidEmbeddedFunctionRev">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.PortNotOpen">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.TaskNotEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CodeSectionIsTooSmall">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.DataSectionIsTooSmall">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CompilerVersionMismatch">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidAxisGiven">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidAxisConfiguration">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CNCFiveError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.NoJoystickPairsEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FeatureNotEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileNameIsTooLarge">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InsufficientFileSystemMemory">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileCurrentlyExists">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileDoesNotExist">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CorruptFileFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileOptimizeInterrupt">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileAccessPastEndOfFile">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileNotOpen">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileOpenedAsReadOnly">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileOpenedAsWriteOnly">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.NoFileHandlesAvailable">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileAlreadyOpen">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidFileName">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.ReadFileBufferTooSmall">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FileWriteWithCRCOn">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.HeapAllocationFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.SlabHeapExhausted">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.AxisNotInTasksPlane">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.ErrorOnFirmwareUpload">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FlashConfigCommitFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.MotionActive">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.ProfileEntryError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidHomeConfiguration">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.AmplifierNotEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.RadiusSpecifiedWithFullCircle">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.RadiusTooShortForArc">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.PlaneProfiling">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.PVLengthError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.SpliningNotEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CamAbsIndexInCurrentPlane">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CamNotEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CamNotMonotonic">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CamPreviouslyEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CamSearchCountExceeded">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CamTimeOverRun">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.FailedCamCommToSlave">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidCamConfiguration">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidCamContextCmd">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidCamListSize">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.MasterNotACammingAxis">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.NoCamContext">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.NotFindCamSegment">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidFirstLastCamPos">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.NoGantrySlaveMotion">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.CircularRadiusError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.MasterMotionSuppressed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidTimeSpecified">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.InvalidMotorType">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.MXReprogramming">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.JoystickInterlockOpen">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.PVCannotExecute">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.StackOverflow">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.ArrayOutOfBounds">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.DivisionByZero">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.StringAssignmentOverflow">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.SyncTimeOverrun">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.TaskMonitorError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.OnTaskError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.TaskError.SemaphoreStarvation">
            <exclude></exclude>
        </member>
        <member name="T:Aerotech.Ensemble.GenericPropertyExposerConverter`1">
            <summary>This allows the type to be expanded in the property grid</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.ErrorInformation">
            <summary>Provides error information.</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.ErrorInformation.ToString">
            <summary>Returns a string representation of this class.</summary>
            <returns>The string representation of this class</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ErrorInformation.Description">
            <summary>The description of the error.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ErrorInformation.HelpKey">
            <summary>Specifies the key to look for in the help file for a more detailed description.</summary>
            <remarks>
            	<para>
            		This property provides a key to look for in the index page of the help file
            		for a more detailed description of the error and possible solutions.
            	</para>
            	<note>
            		The value of this key for a given error can change from version to version, and should
            		<strong>not</strong> be used to uniquely identify an error.
            	</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ErrorInformation.HelpLink">
            <summary>Gets the link to the help associated with this error.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ErrorInformation.ErrorCode">
            <summary>The error code identifier.</summary>
        </member>
        <member name="T:Aerotech.Common.Calibration">
            <summary>
            Processes axis calibration files
            </summary>
        </member>
        <member name="M:Aerotech.Common.Calibration.Process(System.String)">
            <summary>
            Processes an axis calibration file
            </summary>
            <param name="fileName">The file to process</param>
            <returns>
			Results of processing or <c>null</c> if no errors
		</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Process the calibration file and place results into string. An exception will be thrown
        // if the processing fails.
        String^ processedFile = Calibration::Process("myCalFile.cal");
        // Print out the results, which is the name of the processed file.
        Console::WriteLine(processedFile);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Process the calibration file and place results into string. An exception will be thrown
        // if the processing fails.
        string processedFile = Calibration.Process("myCalFile.cal");
        // Print out the results, which is the name of the processed file.
        Console.WriteLine(processedFile);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Process the calibration file and place results into string. An exception will be thrown
        ' if the processing fails.
        Dim processedFile As String = Calibration.Process("myCalFile.cal")
        ' Print out the results, which is the name of the processed file.
        Console.WriteLine(processedFile)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Common.Calibration.GetFormat(System.String)">
            <summary>Specifies the format of a calibration file</summary>
            <param name="path">The path to the calibration file</param>
            <returns>The format of the calibration file</returns>
        </member>
        <member name="T:Aerotech.Common.Camming">
            <summary>
            Processes axis camming files
            </summary>
        </member>
        <member name="M:Aerotech.Common.Camming.Process(System.String)">
            <summary>
            Processes an axis camming file
            </summary>
            <returns>The path to the generated file</returns>
            <param name="fileName">The file to process</param>
        </member>
        <member name="T:Aerotech.AeroBasic.Builder">
            <summary>
            Builder of AeroBasic files
            </summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Compile(System.String)">
            <summary>
					Compiles an *.ab file
				</summary>
            <param name="fileName">The file to process</param>
            <include file="common.xml" path="/*/AeroBasic/Build/common[@name=&quot;CompileFile.ret&quot;]/*"></include>
            <remarks>
            	<note>
					If you want to run a program that you know compiles, you can call
					<see cref="M:Aerotech.Ensemble.Tasks.Program.Run(System.String)"></see> directly.
				</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.AeroBasic</li>
<li>Aerotech.Common.Collections</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code lang="C++">


    // String of the filename you want to compile.
    String^ fileName = "program.ab";
    // Declare our compiler and assembler settings objects.
    CompilerSettings^ compilerSettings = gcnew CompilerSettings() ;
    AssemblerSettings^ assemblerSettings = gcnew AssemblerSettings() ;
    // Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings-&gt;RemoveIntermediateFiles = true;
    assemblerSettings-&gt;RemoveIntermediateFiles = true;
    try
    {
        Console::WriteLine("Compiling: {0}", fileName);
        // Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult^,String^&gt;^ compilerResults = Builder::Compile(fileName, compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if ((compilerResults-&gt;Count != 0))
        {
            // Loop through each error and print the error and line number.
            for each (CompilerResult^ compilerResult in compilerResults)
            {
                Console::WriteLine("Compiler Error - Line: {0} - {1}", compilerResult-&gt;Location-&gt;LineNumber, compilerResult-&gt;Error);
            }
        }
        else
        {
            // Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path::ChangeExtension(fileName, ".bcm");
            Console::WriteLine("Assembling: {0}", fileName);
            // Call the assemble method to create our *.bco file.
            AssemblerResult^ assemblerResult = Builder::Assemble(fileName, assemblerSettings);
            if (!assemblerResult-&gt;Succeeded)
            {
                Console::WriteLine("Error occurred while assembling file : {0}", assemblerResult-&gt;ErrorMessage);
            }
            else
            {
                // Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                // Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path::ChangeExtension(fileName, ".bco");
                Console::WriteLine("Linking: {0}", fileName);
                // Call the Link method to link the files and create our *.bcx file. This is the last step in
                // the build procedure.
                Builder::Link(fileName);
                // If linking is successful, then our build procedure is complete. Note that we could have
                // called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console::WriteLine("Build succeeded!");
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    // String of the filename you want to compile.
    string fileName = "program.ab";
    // Declare our compiler and assembler settings objects.
    CompilerSettings compilerSettings = new CompilerSettings();
    AssemblerSettings assemblerSettings = new AssemblerSettings();
    // Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings.RemoveIntermediateFiles = true;
    assemblerSettings.RemoveIntermediateFiles = true;
    try
    {
        Console.WriteLine("Compiling: {0}", fileName);
        // Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult, string&gt; compilerResults = Builder.Compile(fileName, compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if (compilerResults.Count != 0)
        {
            // Loop through each error and print the error and line number.
            foreach (CompilerResult compilerResult in compilerResults)
            {
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error);
            }
        }
        else
        {
            // Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path.ChangeExtension(fileName, ".bcm");
            Console.WriteLine("Assembling: {0}", fileName);
            // Call the assemble method to create our *.bco file.
            AssemblerResult assemblerResult = Builder.Assemble(fileName, assemblerSettings);
            if (!assemblerResult.Succeeded)
            {
                Console.WriteLine("Error occurred while assembling file : {0}", assemblerResult.ErrorMessage);
            }
            else
            {
                // Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                // Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path.ChangeExtension(fileName, ".bco");
                Console.WriteLine("Linking: {0}", fileName);
                // Call the Link method to link the files and create our *.bcx file. This is the last step in
                // the build procedure.
                Builder.Link(fileName);
                // If linking is successful, then our build procedure is complete. Note that we could have
                // called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console.WriteLine("Build succeeded!");
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    ' String of the filename you want to compile.
    Dim fileName As String = "program.ab"
    ' Declare our compiler and assembler settings objects.
    Dim compilerSettings As New CompilerSettings
    Dim assemblerSettings As New AssemblerSettings
    ' Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings.RemoveIntermediateFiles = True
    assemblerSettings.RemoveIntermediateFiles = True
    Try 
        Console.WriteLine("Compiling: {0}", fileName)
        ' Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        Dim compilerResults As NamedConstantCollection(Of CompilerResult, String) = Builder.Compile(fileName, compilerSettings)
        ' If compilerResults has items, then we have compiler errors.
        If (compilerResults.Count &lt;&gt; 0) Then
            ' Loop through each error and print the error and line number.
            Dim compilerResult As CompilerResult
            For Each compilerResult In compilerResults
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error)
            Next
        Else
            ' Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path.ChangeExtension(fileName, ".bcm")
            Console.WriteLine("Assembling: {0}", fileName)
            ' Call the assemble method to create our *.bco file.
            Dim assemblerResult As AssemblerResult = Builder.Assemble(fileName, assemblerSettings)
            If Not assemblerResult.Succeeded Then
                Console.WriteLine("Error occurred while assembling file : {0}", assemblerResult.ErrorMessage)
            Else
                ' Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                ' Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path.ChangeExtension(fileName, ".bco")
                Console.WriteLine("Linking: {0}", fileName)
                ' Call the Link method to link the files and create our *.bcx file. This is the last step in
                ' the build procedure.
                Builder.Link(fileName)
                ' If linking is successful, then our build procedure is complete. Note that we could have
                ' called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console.WriteLine("Build succeeded!")
            End If
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Compile(System.String,Aerotech.AeroBasic.CompilerSettings)">
            <summary>
					Compiles an *.ab file
				</summary>
            <param name="fileName">The file to process</param>
            <param name="settings">The settings to use for processing the file</param>
            <include file="common.xml" path="/*/AeroBasic/Build/common[@name=&quot;CompileFile.ret&quot;]/*"></include>
            <remarks>
            	<note>
			This call throws exceptions.  The results that are returned are only errors in
			the file that will be processed.  Errors before the processing begins result in
			exceptions (for example, an invalid extension will result in an exception).
		</note>
            	<note>
					If you want to run a program that you know compiles, you can call
					<see cref="M:Aerotech.Ensemble.Tasks.Program.Run(System.String)"></see> directly.
				</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.AeroBasic</li>
<li>Aerotech.Common.Collections</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code lang="C++">


    // String of the filename you want to compile.
    String^ fileName = "program.ab";
    // Declare our compiler and assembler settings objects.
    CompilerSettings^ compilerSettings = gcnew CompilerSettings() ;
    AssemblerSettings^ assemblerSettings = gcnew AssemblerSettings() ;
    // Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings-&gt;RemoveIntermediateFiles = true;
    assemblerSettings-&gt;RemoveIntermediateFiles = true;
    try
    {
        Console::WriteLine("Compiling: {0}", fileName);
        // Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult^,String^&gt;^ compilerResults = Builder::Compile(fileName, compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if ((compilerResults-&gt;Count != 0))
        {
            // Loop through each error and print the error and line number.
            for each (CompilerResult^ compilerResult in compilerResults)
            {
                Console::WriteLine("Compiler Error - Line: {0} - {1}", compilerResult-&gt;Location-&gt;LineNumber, compilerResult-&gt;Error);
            }
        }
        else
        {
            // Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path::ChangeExtension(fileName, ".bcm");
            Console::WriteLine("Assembling: {0}", fileName);
            // Call the assemble method to create our *.bco file.
            AssemblerResult^ assemblerResult = Builder::Assemble(fileName, assemblerSettings);
            if (!assemblerResult-&gt;Succeeded)
            {
                Console::WriteLine("Error occurred while assembling file : {0}", assemblerResult-&gt;ErrorMessage);
            }
            else
            {
                // Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                // Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path::ChangeExtension(fileName, ".bco");
                Console::WriteLine("Linking: {0}", fileName);
                // Call the Link method to link the files and create our *.bcx file. This is the last step in
                // the build procedure.
                Builder::Link(fileName);
                // If linking is successful, then our build procedure is complete. Note that we could have
                // called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console::WriteLine("Build succeeded!");
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    // String of the filename you want to compile.
    string fileName = "program.ab";
    // Declare our compiler and assembler settings objects.
    CompilerSettings compilerSettings = new CompilerSettings();
    AssemblerSettings assemblerSettings = new AssemblerSettings();
    // Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings.RemoveIntermediateFiles = true;
    assemblerSettings.RemoveIntermediateFiles = true;
    try
    {
        Console.WriteLine("Compiling: {0}", fileName);
        // Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult, string&gt; compilerResults = Builder.Compile(fileName, compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if (compilerResults.Count != 0)
        {
            // Loop through each error and print the error and line number.
            foreach (CompilerResult compilerResult in compilerResults)
            {
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error);
            }
        }
        else
        {
            // Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path.ChangeExtension(fileName, ".bcm");
            Console.WriteLine("Assembling: {0}", fileName);
            // Call the assemble method to create our *.bco file.
            AssemblerResult assemblerResult = Builder.Assemble(fileName, assemblerSettings);
            if (!assemblerResult.Succeeded)
            {
                Console.WriteLine("Error occurred while assembling file : {0}", assemblerResult.ErrorMessage);
            }
            else
            {
                // Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                // Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path.ChangeExtension(fileName, ".bco");
                Console.WriteLine("Linking: {0}", fileName);
                // Call the Link method to link the files and create our *.bcx file. This is the last step in
                // the build procedure.
                Builder.Link(fileName);
                // If linking is successful, then our build procedure is complete. Note that we could have
                // called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console.WriteLine("Build succeeded!");
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    ' String of the filename you want to compile.
    Dim fileName As String = "program.ab"
    ' Declare our compiler and assembler settings objects.
    Dim compilerSettings As New CompilerSettings
    Dim assemblerSettings As New AssemblerSettings
    ' Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings.RemoveIntermediateFiles = True
    assemblerSettings.RemoveIntermediateFiles = True
    Try 
        Console.WriteLine("Compiling: {0}", fileName)
        ' Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        Dim compilerResults As NamedConstantCollection(Of CompilerResult, String) = Builder.Compile(fileName, compilerSettings)
        ' If compilerResults has items, then we have compiler errors.
        If (compilerResults.Count &lt;&gt; 0) Then
            ' Loop through each error and print the error and line number.
            Dim compilerResult As CompilerResult
            For Each compilerResult In compilerResults
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error)
            Next
        Else
            ' Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path.ChangeExtension(fileName, ".bcm")
            Console.WriteLine("Assembling: {0}", fileName)
            ' Call the assemble method to create our *.bco file.
            Dim assemblerResult As AssemblerResult = Builder.Assemble(fileName, assemblerSettings)
            If Not assemblerResult.Succeeded Then
                Console.WriteLine("Error occurred while assembling file : {0}", assemblerResult.ErrorMessage)
            Else
                ' Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                ' Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path.ChangeExtension(fileName, ".bco")
                Console.WriteLine("Linking: {0}", fileName)
                ' Call the Link method to link the files and create our *.bcx file. This is the last step in
                ' the build procedure.
                Builder.Link(fileName)
                ' If linking is successful, then our build procedure is complete. Note that we could have
                ' called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console.WriteLine("Build succeeded!")
            End If
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.CompileSource(System.String)">
            <summary>
					Compiles AeroBasic source code as a string. This function is typically used to check if a single
					line/MDI command has any compiler errors, before calling the <see cref="M:Aerotech.Ensemble.Commands.RootCommands.Execute(System.String)"></see> method.
				</summary>
            <param name="sourceCode">
					The source code to compile
					<note> INCLUDE files are not allowed</note>
				</param>
            <include file="common.xml" path="/*/AeroBasic/Build/common[@name=&quot;CompileFile.ret&quot;]/*"></include>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.AeroBasic</li>
<li>Aerotech.Common.Collections</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Call the CompileSource method to compile string into memory and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult^,String^&gt;^ compilerResults = Builder::CompileSource("LINEAR X50 Y100 F10000");
        // If compilerResults has items, then we have compiler errors.
        if ((compilerResults-&gt;Count != 0))
        {
            // Loop through each error and print the error and line number.
            for each (CompilerResult^ compilerResult in compilerResults)
            {
                Console::WriteLine("Compiler Error - Line: {0} - {1}", compilerResult-&gt;Location-&gt;LineNumber, compilerResult-&gt;Error);
            }
        }
        else
        {
            Console::WriteLine("No compiler errors!");
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Call the CompileSource method to compile string into memory and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult, string&gt; compilerResults = Builder.CompileSource("LINEAR X50 Y100 F10000");
        // If compilerResults has items, then we have compiler errors.
        if (compilerResults.Count != 0)
        {
            // Loop through each error and print the error and line number.
            foreach (CompilerResult compilerResult in compilerResults)
            {
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error);
            }
        }
        else
        {
            Console.WriteLine("No compiler errors!");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Call the CompileSource method to compile string into memory and return results into compilerResults.
        Dim compilerResults As NamedConstantCollection(Of CompilerResult, String) = Builder.CompileSource("LINEAR X50 Y100 F10000")
        ' If compilerResults has items, then we have compiler errors.
        If (compilerResults.Count &lt;&gt; 0) Then
            ' Loop through each error and print the error and line number.
            Dim compilerResult As CompilerResult
            For Each compilerResult In compilerResults
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error)
            Next
        Else
            Console.WriteLine("No compiler errors!")
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.CompileSource(System.String,Aerotech.AeroBasic.CompilerSettings)">
            <summary>
					Compiles AeroBasic source code as a string. This function is typically used to check if a single
					line/MDI command has any compiler errors, before calling the <see cref="M:Aerotech.Ensemble.Commands.RootCommands.Execute(System.String)"></see> method.
				</summary>
            <param name="sourceCode">
					The source code to compile
					<note> INCLUDE files are not allowed</note>
				</param>
            <param name="settings">The settings to use for processing the file</param>
            <include file="common.xml" path="/*/AeroBasic/Build/common[@name=&quot;CompileFile.ret&quot;]/*"></include>
            <remarks>
            	<note> The only setting available is <see cref="P:Aerotech.AeroBasic.CompilerSettings.AxisNames"></see></note>
            	<note>
			This call throws exceptions.  The results that are returned are only errors in
			the file that will be processed.  Errors before the processing begins result in
			exceptions (for example, an invalid extension will result in an exception).
		</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.AeroBasic</li>
<li>Aerotech.Common.Collections</li>
<li>System</li>
</ul>
<code lang="C++">


    // Declare our compiler settings object.
    CompilerSettings^ compilerSettings = gcnew CompilerSettings() ;
    // Tell the compiler to use X and Y for its axis names.
    compilerSettings-&gt;AxisNames[0] = "X";
    compilerSettings-&gt;AxisNames[1] = "Y";
    try
    {
        // Call the CompileSource method to compile string into memory and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult^,String^&gt;^ compilerResults = Builder::CompileSource("LINEAR X50 Y100 F10000", compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if ((compilerResults-&gt;Count != 0))
        {
            // Loop through each error and print the error and line number.
            for each (CompilerResult^ compilerResult in compilerResults)
            {
                Console::WriteLine("Compiler Error - Line: {0} - {1}", compilerResult-&gt;Location-&gt;LineNumber, compilerResult-&gt;Error);
            }
        }
        else
        {
            Console::WriteLine("No compiler errors!");
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    // Declare our compiler settings object.
    CompilerSettings compilerSettings = new CompilerSettings();
    // Tell the compiler to use X and Y for its axis names.
    compilerSettings.AxisNames[0] = "X";
    compilerSettings.AxisNames[1] = "Y";
    try
    {
        // Call the CompileSource method to compile string into memory and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult, string&gt; compilerResults = Builder.CompileSource("LINEAR X50 Y100 F10000", compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if (compilerResults.Count != 0)
        {
            // Loop through each error and print the error and line number.
            foreach (CompilerResult compilerResult in compilerResults)
            {
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error);
            }
        }
        else
        {
            Console.WriteLine("No compiler errors!");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    ' Declare our compiler settings object.
    Dim compilerSettings As New CompilerSettings
    ' Tell the compiler to use X and Y for its axis names.
    compilerSettings.AxisNames.Item(0) = "X"
    compilerSettings.AxisNames.Item(1) = "Y"
    Try 
        ' Call the CompileSource method to compile string into memory and return results into compilerResults.
        Dim compilerResults As NamedConstantCollection(Of CompilerResult, String) = Builder.CompileSource("LINEAR X50 Y100 F10000", compilerSettings)
        ' If compilerResults has items, then we have compiler errors.
        If (compilerResults.Count &lt;&gt; 0) Then
            ' Loop through each error and print the error and line number.
            Dim compilerResult As CompilerResult
            For Each compilerResult In compilerResults
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error)
            Next
        Else
            Console.WriteLine("No compiler errors!")
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Assemble(System.String)">
            <summary>
					Assembles a *.bcm file
				</summary>
            <param name="fileName">The file to process</param>
            <returns>Assembler result</returns>
            <include file="examples.xml" path="/*/Example[@name=&quot;CompileAndLink&quot;]/*"></include>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Assemble(System.String,Aerotech.AeroBasic.AssemblerSettings)">
            <summary>
					Assembles a *.bcm file
				</summary>
            <param name="fileName">The file to process</param>
            <param name="settings">The settings to use for processing the file</param>
            <returns>Assembler result</returns>
            <remarks>
            	<note>
			This call throws exceptions.  The results that are returned are only errors in
			the file that will be processed.  Errors before the processing begins result in
			exceptions (for example, an invalid extension will result in an exception).
		</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.AeroBasic</li>
<li>Aerotech.Common.Collections</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code lang="C++">


    // String of the filename you want to compile.
    String^ fileName = "program.ab";
    // Declare our compiler and assembler settings objects.
    CompilerSettings^ compilerSettings = gcnew CompilerSettings() ;
    AssemblerSettings^ assemblerSettings = gcnew AssemblerSettings() ;
    // Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings-&gt;RemoveIntermediateFiles = true;
    assemblerSettings-&gt;RemoveIntermediateFiles = true;
    try
    {
        Console::WriteLine("Compiling: {0}", fileName);
        // Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult^,String^&gt;^ compilerResults = Builder::Compile(fileName, compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if ((compilerResults-&gt;Count != 0))
        {
            // Loop through each error and print the error and line number.
            for each (CompilerResult^ compilerResult in compilerResults)
            {
                Console::WriteLine("Compiler Error - Line: {0} - {1}", compilerResult-&gt;Location-&gt;LineNumber, compilerResult-&gt;Error);
            }
        }
        else
        {
            // Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path::ChangeExtension(fileName, ".bcm");
            Console::WriteLine("Assembling: {0}", fileName);
            // Call the assemble method to create our *.bco file.
            AssemblerResult^ assemblerResult = Builder::Assemble(fileName, assemblerSettings);
            if (!assemblerResult-&gt;Succeeded)
            {
                Console::WriteLine("Error occurred while assembling file : {0}", assemblerResult-&gt;ErrorMessage);
            }
            else
            {
                // Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                // Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path::ChangeExtension(fileName, ".bco");
                Console::WriteLine("Linking: {0}", fileName);
                // Call the Link method to link the files and create our *.bcx file. This is the last step in
                // the build procedure.
                Builder::Link(fileName);
                // If linking is successful, then our build procedure is complete. Note that we could have
                // called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console::WriteLine("Build succeeded!");
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    // String of the filename you want to compile.
    string fileName = "program.ab";
    // Declare our compiler and assembler settings objects.
    CompilerSettings compilerSettings = new CompilerSettings();
    AssemblerSettings assemblerSettings = new AssemblerSettings();
    // Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings.RemoveIntermediateFiles = true;
    assemblerSettings.RemoveIntermediateFiles = true;
    try
    {
        Console.WriteLine("Compiling: {0}", fileName);
        // Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        NamedConstantCollection&lt;CompilerResult, string&gt; compilerResults = Builder.Compile(fileName, compilerSettings);
        // If compilerResults has items, then we have compiler errors.
        if (compilerResults.Count != 0)
        {
            // Loop through each error and print the error and line number.
            foreach (CompilerResult compilerResult in compilerResults)
            {
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error);
            }
        }
        else
        {
            // Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path.ChangeExtension(fileName, ".bcm");
            Console.WriteLine("Assembling: {0}", fileName);
            // Call the assemble method to create our *.bco file.
            AssemblerResult assemblerResult = Builder.Assemble(fileName, assemblerSettings);
            if (!assemblerResult.Succeeded)
            {
                Console.WriteLine("Error occurred while assembling file : {0}", assemblerResult.ErrorMessage);
            }
            else
            {
                // Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                // Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path.ChangeExtension(fileName, ".bco");
                Console.WriteLine("Linking: {0}", fileName);
                // Call the Link method to link the files and create our *.bcx file. This is the last step in
                // the build procedure.
                Builder.Link(fileName);
                // If linking is successful, then our build procedure is complete. Note that we could have
                // called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console.WriteLine("Build succeeded!");
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    ' String of the filename you want to compile.
    Dim fileName As String = "program.ab"
    ' Declare our compiler and assembler settings objects.
    Dim compilerSettings As New CompilerSettings
    Dim assemblerSettings As New AssemblerSettings
    ' Tell the compiler and assembler that we want to remove intermediate files (*.bas, *.basl, and *.err).
    compilerSettings.RemoveIntermediateFiles = True
    assemblerSettings.RemoveIntermediateFiles = True
    Try 
        Console.WriteLine("Compiling: {0}", fileName)
        ' Call the Compile method to compile file into *.bcm file and return results into compilerResults.
        Dim compilerResults As NamedConstantCollection(Of CompilerResult, String) = Builder.Compile(fileName, compilerSettings)
        ' If compilerResults has items, then we have compiler errors.
        If (compilerResults.Count &lt;&gt; 0) Then
            ' Loop through each error and print the error and line number.
            Dim compilerResult As CompilerResult
            For Each compilerResult In compilerResults
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error)
            Next
        Else
            ' Otherwise, the compile succeeded, so we now must assemble the *.bcm file into a *.bco file.
            fileName = Path.ChangeExtension(fileName, ".bcm")
            Console.WriteLine("Assembling: {0}", fileName)
            ' Call the assemble method to create our *.bco file.
            Dim assemblerResult As AssemblerResult = Builder.Assemble(fileName, assemblerSettings)
            If Not assemblerResult.Succeeded Then
                Console.WriteLine("Error occurred while assembling file : {0}", assemblerResult.ErrorMessage)
            Else
                ' Otherwise, it succeeded, and we now need to link the *.bco file to the *.bcx file.
                ' Edit the filename string again, because we need it to refer to the *.bco file now.
                fileName = Path.ChangeExtension(fileName, ".bco")
                Console.WriteLine("Linking: {0}", fileName)
                ' Call the Link method to link the files and create our *.bcx file. This is the last step in
                ' the build procedure.
                Builder.Link(fileName)
                ' If linking is successful, then our build procedure is complete. Note that we could have
                ' called the Build() method to Compile, Assemble, and Link the files all in one step.
                Console.WriteLine("Build succeeded!")
            End If
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Link(System.String)">
            <summary>
            Links a *.bco file
            </summary>
            <param name="fileName">The file to process</param>
            <include file="examples.xml" path="/*/Example[@name=&quot;CompileAndLink&quot;]/*"></include>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Build(System.String)">
            <summary>
					Compiles, assembles, and builds a file
				</summary>
            <param name="fileName">The file to process</param>
            <include file="common.xml" path="/*/AeroBasic/Build/common[@name=&quot;Build.ret&quot;]/*"></include>
            <remarks>
            	<note>
					If you want to run a program that you know compiles, you can call
					<see cref="M:Aerotech.Ensemble.Tasks.Program.Run(System.String)"></see> directly.
				</note>
            	<para>
					This functions accepts a file with any valid extension (for AeroBasic files) and processes it
					to get a *.lco or *.bcx file, which can then be sent to the controller.
				</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.AeroBasic</li>
<li>System</li>
</ul>
<code lang="C++">


    // String of the filename you want to build.
    String^ fileName = "program.ab";
    try
    {
        Console::WriteLine(String::Concat("Building: ", fileName));
        // Build the file.
        BuildResults^ buildResults = Builder::Build(fileName);
        // If buildResults did not succeed, then we have compiler errors.
        if (!buildResults-&gt;Succeeded)
        {
            Console::WriteLine("Errors occurred while building: {0}", fileName);
            // Loop through each error and print the error and line number.
            for each (CompilerResult^ compilerResult in buildResults-&gt;CompilerErrors)
            {
                Console::WriteLine("Compiler Error - Line: {0} - {1}", compilerResult-&gt;Location-&gt;LineNumber, compilerResult-&gt;Error);
            }
        }
        else
        {
            Console::WriteLine("No build errors!");
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    // String of the filename you want to build.
    string fileName = "program.ab";
    try
    {
        Console.WriteLine("Building: " + fileName);
        // Build the file.
        BuildResults buildResults = Builder.Build(fileName);
        // If buildResults did not succeed, then we have compiler errors.
        if (!buildResults.Succeeded)
        {
            Console.WriteLine("Errors occurred while building: {0}", fileName);
            // Loop through each error and print the error and line number.
            foreach (CompilerResult compilerResult in buildResults.CompilerErrors)
            {
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error);
            }
        }
        else
        {
            Console.WriteLine("No build errors!");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    ' String of the filename you want to build.
    Dim fileName As String = "program.ab"
    Try 
        Console.WriteLine(("Building: " &amp; fileName))
        ' Build the file.
        Dim buildResults As BuildResults = Builder.Build(fileName)
        ' If buildResults did not succeed, then we have compiler errors.
        If Not buildResults.Succeeded Then
            Console.WriteLine("Errors occurred while building: {0}", fileName)
            ' Loop through each error and print the error and line number.
            Dim compilerResult As CompilerResult
            For Each compilerResult In buildResults.CompilerErrors
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error)
            Next
        Else
            Console.WriteLine("No build errors!")
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Build(System.String,Aerotech.AeroBasic.BuildSettings)">
            <summary>
					Compiles, assembles, and builds a file
				</summary>
            <param name="fileName">The file to process</param>
            <param name="settings">The settings to use for processing the file</param>
            <include file="common.xml" path="/*/AeroBasic/Build/common[@name=&quot;Build.ret&quot;]/*"></include>
            <remarks>
            	<note>
					If you want to run a program that you know compiles, you can call
					<see cref="M:Aerotech.Ensemble.Tasks.Program.Run(System.String)"></see> directly.
				</note>
            	<para>
					This functions accepts a file with any valid extension (for AeroBasic files) and processes it
					to get a *.lco or *.bcx file, which can then be sent to the controller.
				</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.AeroBasic</li>
<li>System</li>
</ul>
<code lang="C++">


    // String of the Filename you want to build.
    String^ fileName = "program.ab";
    try
    {
        Console::WriteLine(String::Concat("Building: ", fileName));
        // Tell the builder that we want to remove intermediate files (*.bas, *.basl, and *.err).
        BuildSettings^ buildSettings = gcnew BuildSettings() ;
        buildSettings-&gt;RemoveIntermediateFiles = true;
        // Build the file with the proper buildSettings.
        BuildResults^ buildResults = Builder::Build(fileName, buildSettings);
        // If buildResults did not succeed, then we have compiler errors.
        if (!buildResults-&gt;Succeeded)
        {
            Console::WriteLine("Errors occurred while building: {0}", fileName);
            // Loop through each error and print the error and line number.
            for each (CompilerResult^ compilerResult in buildResults-&gt;CompilerErrors)
            {
                Console::WriteLine("Compiler Error - Line: {0} - {1}", compilerResult-&gt;Location-&gt;LineNumber, compilerResult-&gt;Error);
            }
        }
        else
        {
            Console::WriteLine("No build errors!");
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    // String of the Filename you want to build.
    string fileName = "program.ab";
    try
    {
        Console.WriteLine("Building: " + fileName);
        // Tell the builder that we want to remove intermediate files (*.bas, *.basl, and *.err).
        BuildSettings buildSettings = new BuildSettings();
        buildSettings.RemoveIntermediateFiles = true;
        // Build the file with the proper buildSettings.
        BuildResults buildResults = Builder.Build(fileName, buildSettings);
        // If buildResults did not succeed, then we have compiler errors.
        if (!buildResults.Succeeded)
        {
            Console.WriteLine("Errors occurred while building: {0}", fileName);
            // Loop through each error and print the error and line number.
            foreach (CompilerResult compilerResult in buildResults.CompilerErrors)
            {
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error);
            }
        }
        else
        {
            Console.WriteLine("No build errors!");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    ' String of the Filename you want to build.
    Dim fileName As String = "program.ab"
    Try 
        Console.WriteLine(("Building: " &amp; fileName))
        ' Tell the builder that we want to remove intermediate files (*.bas, *.basl, and *.err).
        Dim buildSettings As New BuildSettings
        buildSettings.RemoveIntermediateFiles = True
        ' Build the file with the proper buildSettings.
        Dim buildResults As BuildResults = Builder.Build(fileName, buildSettings)
        ' If buildResults did not succeed, then we have compiler errors.
        If Not buildResults.Succeeded Then
            Console.WriteLine("Errors occurred while building: {0}", fileName)
            ' Loop through each error and print the error and line number.
            Dim compilerResult As CompilerResult
            For Each compilerResult In buildResults.CompilerErrors
                Console.WriteLine("Compiler Error - Line: {0} - {1}", compilerResult.Location.LineNumber, compilerResult.Error)
            Next
        Else
            Console.WriteLine("No build errors!")
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.AeroBasic.CompilerResult">
            <summary>
            Contains an error of compiling a AeroBasic file
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerResult.Location">
            <summary>
            The location of the error
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerResult.ErrorType">
            <summary>
            The error type
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerResult.Error">
            <summary>
            The error description
            </summary>
        </member>
        <member name="T:Aerotech.AeroBasic.AssemblerResult">
            <summary>Contains the results and error of assembling a file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.AssemblerResult.ErrorMessage">
            <summary>The error message during assembly</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.AssemblerResult.Succeeded">
            <summary>Whether the build succeeded</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.CompilerSettings">
            <summary>
            Contains settings for <see cref="M:Aerotech.AeroBasic.Builder.Compile(System.String,Aerotech.AeroBasic.CompilerSettings)"></see>
            </summary>
        </member>
        <member name="M:Aerotech.AeroBasic.CompilerSettings.#ctor">
            <summary>
            Creates default compiler settings
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerSettings.RemoveIntermediateFiles">
            <summary>
            Remove &lt;filename&gt;Comp.err and either &lt;filename&gt;.bas or &lt;filename&gt;.basl
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerSettings.SuppressStandardOutput">
            <summary>
            Whether to supress compiler output to standard output
            </summary>
            <remarks>
            On by default
            </remarks>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerSettings.DumpSymbols">
            <summary>
            Whether to dump compiler symbols
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerSettings.SuppressDebuggingSupport">
            <summary>
            Whether to supress output of debugging information
            </summary>
            <remarks>
            <note>This will disable debugging of the processed file</note>
            </remarks>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerSettings.AssemblyDebug">
            <summary>
            Whether to output assembly debug information
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerSettings.YaccDebug">
            <summary>
            Whether to output the <a href="http://en.wikipedia.org/wiki/Yacc">Yacc</a> debug information
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerSettings.AxisNames">
            <summary>
            The names of axes to use
            </summary>
        </member>
        <member name="T:Aerotech.AeroBasic.AssemblerSettings">
            <summary>
            Contains settings for <see cref="M:Aerotech.AeroBasic.Builder.Assemble(System.String,Aerotech.AeroBasic.AssemblerSettings)"></see>
            </summary>
        </member>
        <member name="M:Aerotech.AeroBasic.AssemblerSettings.#ctor">
            <summary>
            Creates default assembler settings
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.AssemblerSettings.RemoveIntermediateFiles">
            <summary>
            Remove &lt;filename&gt;Asm.err
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.AssemblerSettings.SuppressStandardOutput">
            <summary>
            Whether to supress assembler output to standard output
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.AssemblerSettings.ObjectDebug">
            <summary>
            Whether to generate object debug information
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.AssemblerSettings.DumpSymbols">
            <summary>
            Whether to dump the assembler symbols
            </summary>
        </member>
        <member name="T:Aerotech.AeroBasic.BuildResults">
            <summary>
            Results of building an AeroBasic file
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildResults.AssemblerResult">
            <summary>Results from the assembler</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildResults.CompilerErrors">
            <summary>
            Any errors during the compile phase of the build
            </summary>
            <remarks>
            <para>The amount of errors is <c>0</c> if there are no errors</para>
            </remarks>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildResults.Succeeded">
            <summary>
            Whether the build succeeded
            </summary>
        </member>
        <member name="T:Aerotech.AeroBasic.BuildSettings">
            <summary>
            Settings for <see cref="M:Aerotech.AeroBasic.Builder.Build(System.String,Aerotech.AeroBasic.BuildSettings)"></see>
            </summary>
        </member>
        <member name="M:Aerotech.AeroBasic.BuildSettings.#ctor">
            <summary>
            Creates default build settings
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildSettings.Compiler">
            <summary>
            Settings for the compile phase
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildSettings.Assembler">
            <summary>
            Settings for the assemble phase
            </summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildSettings.RemoveIntermediateFiles">
            <summary>
            Removes &lt;filename&gt;.bcm or &lt;filename&gt;.lcm. Sets compiler and assembler settings
            to the same value
            </summary>
        </member>
        <member name="T:Aerotech.Common.CalibrationFileFormat">
            <summary>Specifies the calibration file format</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.Calibration1D">
            <summary>1 dimensional calibration file format</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.Calibration2D">
            <summary>2 dimensional calibration file format</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.Unknown">
            <summary>Unknown/Invalid calibration file format</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.ControllerDiagPacket">
            <summary>
            The diagnostic packet of the controller
            </summary>
            <remarks>
            	<para>
            		To retrieve this, see <see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics"></see>.
            	</para>
            </remarks>
            <summary>
            The diagnostic packet of the controller
            </summary>
            <remarks>
            	<para>
            		To retrieve this, see <see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics"></see>.  Note that
            		some values might not be available, to have all the values calculated, call
            		<see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics(Aerotech.Ensemble.Status.ControllerDiagPacket)"></see>
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControllerDiagPacket.ProgramPosition">
            <summary>
            The program positions of the user tasks
            </summary>
            <remarks>
            	<para>
            		The symbols must be loaded for the tasks to be able to use this property.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControllerDiagPacket.ProgramCounter">
            <summary>
            The program counts of the user tasks
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControllerDiagPacket.DebugFlags">
            <summary>
            The debugging flags on the controller
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControllerDiagPacket.PacketTime">
            <summary>
            The time of the packet since controller boot up
            </summary>
            <remarks>
            	<para>
            		In milliseconds.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControllerDiagPacket.Joystick">
            <summary>
            The status of the joystick input
            </summary>
            <remarks>
            	<para>This applies to an <see cref="F:Aerotech.Ensemble.Information.ComponentType.Control"></see> and <see cref="F:Aerotech.Ensemble.Information.ComponentType.Lab"></see> as the master type.</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControllerDiagPacket.PlaneStatus">
            <summary>
            The status of the planes on the controller
            </summary>
            <remarks>
            	<para>
            		The size of the array depends on the controller type, if
            		<see cref="F:Aerotech.Ensemble.Information.ComponentType.Control"></see> then there will be 4 planes, otherwise
            		there will be 2.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Status.AxisDiagPacket">
            <summary>Contains diagnotic information about an axis</summary>
            <remarks>
            	<para>This is used as part of <see cref="T:Aerotech.Ensemble.Status.ControllerDiagPacket"></see></para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.PositionCommand">
            <summary>
            The position command, in user units
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.PositionFeedback">
            <summary>
            The position feedback, in user units
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.PositionError">
            <summary>
            The position error, in user units
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.PositionFeedbackAuxiliary">
            <summary>
            The position feedback auxiliary
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.CurrentCommand">
            <summary>
            Current command
            </summary>
            <include file="examples.xml" path="/*/axisData/Example[@name=&quot;ControllerDiagPacketOverloaded&quot;]/*"></include>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.CurrentFeedback">
            <summary>
            Current feedback
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.CurrentError">
            <summary>
            Current error
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.ProgramPositionCommand">
            <summary>
            The program position command, in user units
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.ProgramPositionFeedback">
            <summary>
            The program position feedback, in user units
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.ProgramPositionError">
            <summary>
            The program position error, in user units
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.VelocityCommand">
            <summary>
            The velocity command, in user units
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.VelocityFeedback">
            <summary>
            The velocity feedback, in user units
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.VelocityError">
            <summary>
            The velocity error, in user units
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AccelerationCommand">
            <summary>
            The acceleration command
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AccelerationFeedback">
            <summary>
            The acceleration Feedback
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AccelerationError">
            <summary>
            The acceleration error, in user units
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogInput0">
            <summary>
            Analog Input #0
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogInput1">
            <summary>
            Analog Input #1
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogInput2">
            <summary>
            Analog Input #2, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogInput3">
            <summary>
            Analog Input #3, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogOutput0">
            <summary>
            Analog Output #0
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogOutput1">
            <summary>
            Analog Output #1
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogOutput2">
            <summary>
            Analog Output #2, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AnalogOutput3">
            <summary>
            Analog Output #3, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AxisStatus">
            <summary>
            Axis status
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AxisFault">
            <summary>
            Axis fault
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AmplifierTemperature">
            <summary>
            The amplifier temperature
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.DigitalInput0">
            <summary>
            Digital Input #0
            </summary>
            <include file="examples.xml" path="/*/axisData/Example[@name=&quot;ControllerDiagPacketOverloaded&quot;]/*"></include>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.DigitalInput1">
            <summary>
            Digital Input #1
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.DigitalInput2">
            <summary>
            Digital Input #2
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.DigitalOutput0">
            <summary>
            Digital Output #0
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.DigitalOutput1">
            <summary>
            Digital Output #1
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.DigitalOutput2">
            <summary>
            Digital Output #2
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AbsoluteFeedback">
            <summary>
            The absolute feedback source position
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.PositionCommandCounts">
            <summary>
            The position command, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.PositionFeedbackCounts">
            <summary>
            The position feedback, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.PositionErrorCounts">
            <summary>
            The position error, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.ProgramPositionCommandCounts">
            <summary>
            The program position command, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.ProgramPositionFeedbackCounts">
            <summary>
            The program position feedback, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.ProgramPositionErrorCounts">
            <summary>
            The program position error, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.VelocityCommandCounts">
            <summary>
            The velocity command, in counts
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.VelocityFeedbackCounts">
            <summary>
            The velocity feedback, in counts
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.VelocityErrorCounts">
            <summary>
            The velocity error, in counts
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AccelerationCommandCounts">
            <summary>
            The acceleration command, in counts
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AccelerationFeedbackCounts">
            <summary>
            The acceleration Feedback, in counts
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AccelerationErrorCounts">
            <summary>
            The acceleration error, in counts
            </summary>
            <remarks>
            	<include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"></include>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.AxisName">
            <summary>
            The name of the axis for which this packet is for
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.AxisDiagPacket.Aerotech#Common#INamed{System#String}#Name">
            <summary>
            The name of the axis for which this packet is for
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.JoystickDiagPacket">
            <summary>
            Represents the diagnostic information about the joystick
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.JoystickDiagPacket.Horizontal">
            <summary>
            The horizontal axis value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.JoystickDiagPacket.Vertical">
            <summary>
            The vertical axis value
            </summary>
            <include file="examples.xml" path="/*/Data/Example[@name=&quot;ControllerDiagPacketOverloaded&quot;]/*"></include>
            <remarks>
            	<para>For an <see cref="F:Aerotech.Ensemble.Information.ComponentType.Control"></see> this is the analog input of the joystick.</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.JoystickDiagPacket.IsConnected">
            <summary>
            Whether the joystick is connected
            </summary>
            <remarks>
            	<para>
            		This is the value of the hardware, it is possible to make the firmware ignore this value.  This
            		is useful for joysticks that do not have the interlock value set.  Please make sure this value makes sense
            		for the joystick being used before using this property.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.JoystickDiagPacket.IsActive">
            <summary>
            Whether joystick is in active on any axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.JoystickDiagPacket.Button">
            <summary>
            Specifies which button on the joystick is pressed
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.JoystickButton">
            <summary>
            Specifies the button on a joystick
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.JoystickButton.None">
            <summary>
            No button
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.JoystickButton.ButtonA">
            <summary>
            Button A
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.JoystickButton.ButtonB">
            <summary>
            Button B
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.JoystickButton.ButtonC">
            <summary>
            Button C (both A and B)
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.PrimitiveType">
            <summary>
            Represents a primitive type in AeroBasic
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.PrimitiveType.Integer">
            <summary>
            32-bit integer
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.PrimitiveType.Double">
            <summary>
            64-bit floating point, ANSI/IEEE Standard 754-1985
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.PrimitiveType.Single">
            <summary>
            32-bit floating point, ANSI/IEEE Standard 754-1985
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.PrimitiveType.Long">
            <summary>
            64-bit integer
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.PrimitiveType.String">
            <summary>
            ASCII null-terminated string
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParameterContext">
            <summary>
            Represents the context of a parameter (system, axis, or task)
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterContext.System">
            <summary>
            A system parameter
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterContext.Axis">
            <summary>
            An axis parameter
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterContext.Task">
            <summary>
            A task parameter
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.FileSystem.SystemAttributes">
            <summary>
            Represents standard file attributes
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.SystemAttributes.None">
            <summary>
            No special attributes
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.SystemAttributes.Compressed">
            <summary>
            Compressed
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.SystemAttributes.Hidden">
            <summary>
            File is hidden
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.SystemAttributes.NoCrcData">
            <summary>
            No CRC data is present
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.SystemAttributes.PcCreated">
            <summary>
            File was not created by the controller
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.FileSystem.FileRetreiveMode">
            <summary>
            Specifies the mode for retreival of the file from the controller
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileRetreiveMode.NoOverwrite">
            <summary>
            Do not overwrite files
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileRetreiveMode.Overwrite">
            <summary>
            Overwrite files
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileRetreiveMode.Append">
            <summary>
            Append to existing files
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.AxisMask">
            <summary>
            Represents an axis mask
            </summary>
            <remarks>
            This can be ORed together to create a mask of axes
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.None">
            <summary>
            No axes
            </summary>
            <remarks>
            <note>This also used to signify an axis mask for things that do not have an axis
            associated with them (like the control board)</note>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A0">
            <summary>
            The first axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A1">
            <summary>
            The second axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A2">
            <summary>
            The third axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A3">
            <summary>
            The fourth axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A4">
            <summary>
            The fifth axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A5">
            <summary>
            The sixth axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A6">
            <summary>
            The seventh axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A7">
            <summary>
            The eight axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A8">
            <summary>
            The nineth axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.A9">
            <summary>
            The tenth axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.AxisMask.All">
            <summary>
            Mask representing all the axes together
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Information.EnumInformation">
            <summary>Provides information about enumerations.</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.EnumInformation.enumType2id">
            <summary>Contains mapping from enum type to type id</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Information.EnumInformation.GetEnumName(System.Type)">
            <summary>Get the string representation of an enumeration.</summary>
            <param name="enumType">The enumeration type for which to get the name.</param>
            <returns>The string name of <paramref name="enumType"></paramref>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumType"></paramref> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="enumType"></paramref> is not supported.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Information.EnumInformation.GetValueName(System.Enum)">
            <summary>Get the string representation of a value.</summary>
            <param name="enumValue">The value to convert to a string.</param>
            <returns>The string representation of <paramref name="enumValue."></paramref></returns>
            <exception cref="T:System.ArgumentException">If enumeration of <paramref name="enumValue"></paramref> is not supported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="enumValue"></paramref> is outside of valid set of values.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Information.EnumInformation.GetValueNames(System.Type)">
            <summary>Get the string representations of values of an enumeration.</summary>
            <param name="enumType">The enumeration type for which to get the names of the values.</param>
            <returns>A mapping from enumeration values to their string representations.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumType"></paramref> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="enumType"></paramref> is not supported.</exception>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource">
            <summary>
      <p>Optional items for a specific axis</p>
    </summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource.None">
            <summary>Nothing</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource.Integer">
            <summary>Drive Memory Integer</summary><remarks>
				<p>This item returns the value of an integer memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource.Float">
            <summary>Drive Memory Float</summary><remarks>
				<p>This item returns the value of a single precision memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource.Double">
            <summary>Drive Memory Double</summary><remarks>
				<p>This item returns the value of a double precision memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource.Byte">
            <summary>Drive Memory Integer</summary><remarks>
				<p>This item returns the value of an 8-bit integer memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource.Short">
            <summary>Drive Memory Integer</summary><remarks>
				<p>This item returns the value of a 16-bit integer memory location on the drive.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.OptionalDataSource">
            <summary>
      <p>Optional items for a specific axis</p>
    </summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.None">
            <summary>Nothing</summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.EncoderSine">
            <summary>Encoder Sine</summary><remarks>
				<p>This item returns the encoder sine in A/D counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.EncoderCosine">
            <summary>Encoder Cosine</summary><remarks>
				<p>This item returns the encoder cosine in A/D counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.LoopTransmissionBefore">
            <summary>Loop Transmission Before</summary><remarks>
				<p>This item returns the loop transmission value measured before the disturbance is injected.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.LoopTransmissionAfter">
            <summary>Loop Transmission After</summary><remarks>
				<p>This item returns the loop transmission value measured after the disturbance is injected.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.AmplifierTemperature">
            <summary>Amplifier Temperature</summary><remarks>
				<p>This item returns the amplifier temperature of the unit.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.AnalogInput2">
            <summary>Analog Input 2</summary><remarks>
				<p>This item returns the value of analog input 2.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.AnalogInput3">
            <summary>Analog Input 3</summary><remarks>
				<p>This item returns the value of analog input 3.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.AnalogOutput2">
            <summary>Analog Output 2</summary><remarks>
				<p>This item returns the value of analog output 2.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.AnalogOutput3">
            <summary>Analog Output 3</summary><remarks>
				<p>This item returns the value of analog output 3.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOStatus">
            <summary>PSO Status</summary><remarks>
				<p>This item returns the PSO status.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOCounter1">
            <summary>PSO Counter 1</summary><remarks>
				<p>This item returns the value of PSO counter 1 in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOCounter2">
            <summary>PSO Counter 2</summary><remarks>
				<p>This item returns the value of PSO counter 2 in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOCounter3">
            <summary>PSO Counter 3</summary><remarks>
				<p>This item returns the value of PSO counter 3 in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOWindow1">
            <summary>PSO Window 1</summary><remarks>
				<p>This item returns the value of the PSO window 1 counter in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOWindow2">
            <summary>PSO Window 2</summary><remarks>
				<p>This item returns the value of the PSO window 2 counter in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.DataAcquisitionSamples">
            <summary>Data Acquisition Samples</summary><remarks>
				<p>This item returns the number of data acquisition samples that have been acquired.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PhaseACurrentFeedback">
            <summary>Phase A Current Feedback</summary><remarks>
				<p>This item returns the phase A current feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PhaseBCurrentFeedback">
            <summary>Phase B Current Feedback</summary><remarks>
				<p>This item returns the phase B current feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PositionCalibrationAll">
            <summary>Position Calibration All</summary><remarks>
				<p>This item returns the 1D + 2D position calibration contributions in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.ResolverChannel1">
            <summary>Resolver Channel 1</summary><remarks>
				<p>This item returns the value of the first resolver channel in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.ResolverChannel2">
            <summary>Resolver Channel 2</summary><remarks>
				<p>This item returns the value of the second resolver channel in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.EnDatAbsolutePosition">
            <summary>EnDat Absolute Position</summary><remarks>
				<p>This item returns the value of the EnDat absolute position in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.DriveTimer">
            <summary>Drive Timer</summary><remarks>
				<p>This item returns the value of the timer returned by the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PhaseAVoltageCommand">
            <summary>Phase A Voltage Command</summary><remarks>
				<p>This item returns the phase A voltage command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PhaseBVoltageCommand">
            <summary>Phase B Voltage Command</summary><remarks>
				<p>This item returns the phase B voltage command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PhaseCVoltageCommand">
            <summary>Phase C Voltage Command</summary><remarks>
				<p>This item returns the phase C voltage command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.AmplifierPeakCurrent">
            <summary>Amplifier Peak Current</summary><remarks>
				<p>This item returns the peak current rating of the amplifier.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.FPGAVersion">
            <summary>FPGA Version</summary><remarks>
				<p>This item returns the FPGA version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.DriveTypeID">
            <summary>Drive Type ID</summary><remarks>
				<p>This item returns an ID number identifying the type of drive (e.g., CP, HPe, Epaq etc).</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOWindow1ArrayIndex">
            <summary>PSO Window 1 Array Index</summary><remarks>
				<p>This item returns the current array index for window 1 when using the PSOWINDOW RANGE ARRAY command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOWindow2ArrayIndex">
            <summary>PSO Window 2 Array Index</summary><remarks>
				<p>This item returns the current array index for window 2 when using the PSOWINDOW RANGE ARRAY command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSODistanceArrayIndex">
            <summary>PSO Distance Array Index</summary><remarks>
				<p>This item returns the current array index for the PSODISTANCE ARRAY command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.PSOBitArrayIndex">
            <summary>PSO Bit Array Index</summary><remarks>
				<p>This item returns the current array index for the PSOOUTPUT BIT MAP or PSOOUTPUT PULSE BIT MASK commands.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.MXAbsolutePosition">
            <summary>MX Absolute Position</summary><remarks>
				<p>This item returns the absolute encoder angle for the optional Encoder Multiplier.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.ServoUpdateRate">
            <summary>Servo Update Rate</summary><remarks>
				<p>This item returns the servo update rate in kilohertz.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.FirmwareVersionMajor">
            <summary>Firmware Version Major</summary><remarks>
				<p>This item returns the first portion (major version) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.FirmwareVersionMinor">
            <summary>Firmware Version Minor</summary><remarks>
				<p>This item returns the second portion (minor version) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.FirmwareVersionPatch">
            <summary>Firmware Version Patch</summary><remarks>
				<p>This item returns the third portion (patch version) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.FirmwareVersionBuild">
            <summary>Firmware Version Build</summary><remarks>
				<p>This item returns the fourth portion (build number) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.DriveTimerMax">
            <summary>Drive Timer Max</summary><remarks>
				<p>This item returns the maximum value of the timer returned by the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.MarkerSearchDistance">
            <summary>Marker Search Distance</summary><remarks>
				<p>This item returns the distance in counts that was traveled while searching for the marker.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.LatchedMarkerPosition">
            <summary>Latched Marker Position</summary><remarks>
				<p>This item returns the position at which the marker was detected during the home cycle.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.EthernetDebuggingInformation">
            <summary>Ethernet Debugging Information</summary><remarks>
				<p>This item returns the Ethernet debugging value specified by the additional argument.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.OptionalDataSource.ResoluteAbsolutePosition">
            <summary>Resolute Absolute Position</summary><remarks>
				<p>This item returns the value of the Resolute absolute position in counts.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Firmware.Loader">
            <summary>
            Provides ability to update the firmware on the Controllers
            </summary>
            <remarks>
            	<note>
            		Ensure that the controller is not doing any communications on the network before
            		using this class; <see cref="P:Aerotech.Ensemble.SoftwareEnvironment.NumberOfProcesses"></see> might be useful.
            	</note>
            	<note>
            		Stop any background polling started through the <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>; 
            		<see cref="M:Aerotech.Ensemble.Status.ControlCenter.UnsubscribeAll"></see> might be useful.
            	</note>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Firmware.Loader.loadFirmwareSemaphore">
            <summary>
            Object to lock on when loading the firmware
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Firmware.Loader.burnFirmwareSemaphore">
            <summary>
            Object to lock on when burning the firmware
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Loader.Load(System.String)">
            <summary>
            Loads the firmware on all connected Controllers
            </summary>
            <param name="mlodFileName">The file name of the file with the lod files</param>
            <remarks>
            	<para>
            		This loads the firmware on all the controllers that the library is currently connected to.
            	</para>
            	<note>
            		Ensure that the controllera are not doing any communications on the network before
            		calling this method; <see cref="P:Aerotech.Ensemble.SoftwareEnvironment.NumberOfProcesses"></see> might be useful.
            	</note>
            	<note>
            		Stop any background polling started through the <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>; 
            		<see cref="M:Aerotech.Ensemble.Status.ControlCenter.UnsubscribeAll"></see> might be useful.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Loader.Load(System.String,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Loads the firmware on all connected Controllers
            </summary>
            <param name="mlodFileName">The file name of the file with the lod files</param>
            <param name="progressChangedEventHandler">Delegate to call when progress changes</param>
            <remarks>
            	<para>
            		This loads the firmware on all the controllers that the library is currently connected to.
            	</para>
            	<note>
            		Make sure that noone else is doing any communications to the controllers on the network before
            		using this class; <see cref="P:Aerotech.Ensemble.SoftwareEnvironment.NumberOfProcesses"></see> might be useful.
            	</note>
            	<note>
            		Stop any background polling started through the <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>; 
            		<see cref="M:Aerotech.Ensemble.Status.ControlCenter.UnsubscribeAll"></see> might be useful.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Loader.Commit">
            <summary>
            Commits the loaded firmware on the controllers
            </summary>
            <remarks>
            	<note>
            		This commits the firmware on all controllers that the library is currently connected to.
            	</note>
            	<note>
            		You have to <see cref="M:Aerotech.Ensemble.Firmware.Loader.Load(System.String)"></see> the firmware first.
            	</note>
            	<note>
            		Ensure that the controllers are not doing any communications on the network before
            		calling this method; <see cref="P:Aerotech.Ensemble.SoftwareEnvironment.NumberOfProcesses"></see> might be useful.
            	</note>
            	<note>
            		Stop any background polling started through the <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>; 
            		<see cref="M:Aerotech.Ensemble.Status.ControlCenter.UnsubscribeAll"></see> might be useful.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Loader.Commit(System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Commits the loaded firmware on the controllers
            </summary>
            <param name="progressChangedEventHandler">Delegate to call when progress changes</param>
            <remarks>
            	<note>
            		This commits the firmware on all controllers that the library is currently connected to.
            	</note>
            	<note>
            		You have to <see cref="M:Aerotech.Ensemble.Firmware.Loader.Load(System.String,System.ComponentModel.ProgressChangedEventHandler)"></see> the firmware first.
            	</note>
            	<note>
            		Ensure that the controllers are not doing any communications on the network before
            		calling this method; <see cref="P:Aerotech.Ensemble.SoftwareEnvironment.NumberOfProcesses"></see> might be useful.
            	</note>
            	<note>
            		Stop any background polling started through the <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>; 
            		<see cref="M:Aerotech.Ensemble.Status.ControlCenter.UnsubscribeAll"></see> might be useful.
            	</note>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Firmware.Debug">
            <summary>
            Provides the ability to debug the firmware
            </summary>
            <remarks>
            	<para>
            		Only advanced users should use this class, as memory corruption may result if incorrect memory addresses are written to.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Instantiates a new instance of Debug
            </summary>
            <param name="controller">The controller to debug</param>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.ReadMem``1(System.Int32)">
            <summary>
            Read from memory
            </summary>
            <typeparam name="TType">To read as what type</typeparam>
            <param name="address">The address to read from</param>
            <returns>The data at the given <paramref name="address"></paramref></returns>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.WriteMem``1(System.Int32,``0)">
            <summary>
            Write to memory
            </summary>
            <typeparam name="TType">To write as what type</typeparam>
            <param name="address">The address to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.ReadFlash``1(System.Int32)">
            <summary>
            Read flash of the master
            </summary>
            <typeparam name="TType">To read as what type</typeparam>
            <param name="address">The address to read from</param>
            <returns>The data at the given <paramref name="address"></paramref></returns>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.WriteFlash``1(System.Int32,``0)">
            <summary>
            Write flash on the master
            </summary>
            <typeparam name="TType">To write as what type</typeparam>
            <param name="address">The address to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.CommitFlash">
            <summary>
            Commits the flash memory to permanent storage on the master
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.ReadFlash``1(System.Int32,System.Int32)">
            <summary>
            Read flash
            </summary>
            <typeparam name="TType">To read as what type</typeparam>
            <param name="axisNumber">The axis from which to read</param>
            <param name="address">The address to read from</param>
            <returns>The data at the given <paramref name="address"></paramref></returns>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.WriteFlash``1(System.Int32,System.Int32,``0)">
            <summary>
            Write flash
            </summary>
            <typeparam name="TType">To write as what type</typeparam>
            <param name="axisNumber">The axis to which to write</param>
            <param name="address">The address to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.Debug.CommitFlash(System.Int32)">
            <summary>
            Commits the flash memory to permanent storage
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Firmware.Debug.Controller">
            <summary>
            Provides access to the <see cref="P:Aerotech.Ensemble.Firmware.Debug.Controller"></see> being debugged
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Firmware.PluginType">
            <summary>
            Represents a type of plugin
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Firmware.PluginType.None">
            <summary>
            No plugins have been selected
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Firmware.PluginType.E">
            <summary>
            Type E plugins
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Firmware.PluginType.All">
            <summary>
            All types of plugins
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Firmware.PluginHandler">
            <summary>
            Helps with managing the plugins
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.PluginHandler.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="controller">The controller for which to help with plugins</param>
        </member>
        <member name="M:Aerotech.Ensemble.Firmware.PluginHandler.IsRunning(Aerotech.Ensemble.Firmware.PluginType)">
            <summary>
            The plugin type to check if it is running
            </summary>
            <param name="pluginType">The type of plugin to check</param>
            <returns>Whether the plugin is actively running</returns>
        </member>
        <member name="T:Aerotech.Ensemble.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ArgumentGreaterThanPointsAllocated">
            <summary>
              Looks up a localized string similar to {0} is greater than number of points allocated.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ArgumentMustBePositive">
            <summary>
              Looks up a localized string similar to {0} must be greater than 0.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ArgumentMustBeUnique">
            <summary>
              Looks up a localized string similar to {0} given has to be unique.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ArgumentOutOfBounds">
            <summary>
              Looks up a localized string similar to {0} argument has to be between {1} and {2}.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ArraySizeMustMatchNumberOfAxes">
            <summary>
              Looks up a localized string similar to The parameter has to have the same size as the number of axes being operated on.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.AtLeastOneAxisMustBeSelected">
            <summary>
              Looks up a localized string similar to At least one axis must be selected.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.AxesLimitedToController">
            <summary>
              Looks up a localized string similar to Only axes present on controller can be specified.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.AxesNamesMustBeUnique">
            <summary>
              Looks up a localized string similar to Axis names must be unique.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ControllerDisconnectedText">
            <summary>
              Looks up a localized string similar to Controller is disconnected.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ControllerNameLocked">
            <summary>
              Looks up a localized string similar to The name is locked, cannot change the name.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.DriveDoesNotHaveJoystickPort">
            <summary>
              Looks up a localized string similar to The drive does not have a dedicated Joystick port.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorAxisDisabled">
            <summary>
              Looks up a localized string similar to Axis {0} is disabled.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorCannotConvert">
            <summary>
              Looks up a localized string similar to Cannot convert {0} to {1} or {2}.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.errorCodesInfo">
             <summary>
               Looks up a localized string similar to &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;!--
            				!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            				!! this file is auto generated, do NOT edit !!
            				!! editing this is a waste of time          !!
            				!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            
            				generated by errorCodesInfo_xml.xslt
            			--&gt;
            &lt;data&gt;
              &lt;error name="NoError"&gt;
                &lt;category name="Root" /&gt;
              &lt;/error&gt;
              &lt;error name="RegistryAccessError"&gt;
                &lt;category name="Root" /&gt;
                &lt;category name="SoftwareEnvironment" /&gt;
                &lt;doc&gt;
                   [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorCompilingFileText">
            <summary>
              Looks up a localized string similar to Error compiling the {0} file.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorFirmwareOutOfDate">
            <summary>
              Looks up a localized string similar to Controller firmware version is incompatible. Controller version: {0} Required, at least: {1}.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorInvalidAxesSet">
            <summary>
              Looks up a localized string similar to The set of available axes is not valid.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorInvalidAxisName">
            <summary>
              Looks up a localized string similar to The value for {0} is invalid; only letters and _ are allowed.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorInvalidControllerName">
            <summary>
              Looks up a localized string similar to The name has invalid characters.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorInvalidUpgradableXMLFormat">
            <summary>
              Looks up a localized string similar to File is in an old format that must be upgraded..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorInvalidXMLFormat">
            <summary>
              Looks up a localized string similar to Invalid XML file format.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorNodeAlreadyMapped">
            <summary>
              Looks up a localized string similar to Mapped controller names must be unique.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorProductXMLMismatch">
            <summary>
              Looks up a localized string similar to Cannot use {0} parameter files for {1} controllers.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorText">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ErrorWrongXMLVersion">
            <summary>
              Looks up a localized string similar to Unsupported version of the parameter file.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ExactlyOneAxisMustBeSelected">
            <summary>
              Looks up a localized string similar to The parameter must have one axis selected.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.InvalidErrorInformation">
            <summary>
              Looks up a localized string similar to The given error information is not valid.  Libraries are out of sync..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.InvalidExtension">
            <summary>
              Looks up a localized string similar to '{0}' is not a valid extension.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.InvalidFileFormat">
            <summary>
              Looks up a localized string similar to Invalid file format.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.InvalidInternalConfiguration">
            <summary>
              Looks up a localized string similar to Invalid internal library configuration. Contact Aerotech, Inc..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.InvalidParameterInformation_ContextContextKey">
            <summary>
              Looks up a localized string similar to context of {0}, contextKey of {1}.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.InvalidVariablePathFormat">
            <summary>
              Looks up a localized string similar to Invalid format for the variable path; allowed: variable[(0,1...)][.field1][.field2]....
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.KeyPropertyOfItemCannotBeNull">
            <summary>
              Looks up a localized string similar to The Key property of item argument must be non-null..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.NodeHasAlreadyBeenAdded">
            <summary>
              Looks up a localized string similar to The value node has already been added..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.OneCommandAtATimeIsAllowed">
            <summary>
              Looks up a localized string similar to Only one command can be executed at one time per controller.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.OnePluginTypeCanBeSpecified">
            <summary>
              Looks up a localized string similar to Only one plugin type can be specified.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ParameterCategoryName_UserDefined">
            <summary>
              Looks up a localized string similar to UserDefined.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.structsInfo">
            <summary>
              Looks up a localized string similar to &lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;data&gt;&lt;enum dotnet="ServoRateParameter" namespace="Aerotech.Ensemble"&gt;&lt;names&gt;
            				&lt;id&gt;servo&lt;/id&gt;
            				&lt;short&gt;SERVO&lt;/short&gt;
            				&lt;full&gt;ServoRate Parameter&lt;/full&gt;
            				&lt;display culture="en"&gt;ServoRate Parameter&lt;/display&gt;
            				
            				
            				
            				
            			&lt;/names&gt;&lt;value value="0"&gt;&lt;names&gt;
            						&lt;short&gt;1 kHz&lt;/short&gt;
            						&lt;full&gt;One kHz&lt;/full&gt;
            						&lt;display culture="en"&gt;One kHz&lt;/display&gt;
            						
            						
            						
            						
            					&lt;/names&gt;&lt;/value&gt;&lt;value value="1"&gt;&lt;na [rest of string was truncated]";.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.UnknownAxisName">
            <summary>
              Looks up a localized string similar to Unknown axis name {0}.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.UnknownCommunicationType">
            <summary>
              Looks up a localized string similar to Unknown communication type : {0}.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.UnknownPlatform">
            <summary>
              Looks up a localized string similar to Unknown IntPtr size ({0} bytes), cannot determine correct P/Invoke to call.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.UnknownValueOfEnumeration">
            <summary>
              Looks up a localized string similar to Unkown {0} value {1}.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.UnsupportedEnumeration">
            <summary>
              Looks up a localized string similar to The given enumeration is not supported..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.UnsupportedType">
            <summary>
              Looks up a localized string similar to Unsupported {0} type.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ValueNameMustMatchKey">
            <summary>
              Looks up a localized string similar to The key must match the Name of the value XmlNode..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ValuePropertyOfItemCannotBeNull">
            <summary>
              Looks up a localized string similar to The Value property of item argument must be non-null..
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.Resources.ValuesOfTypeCanBeSetOnlyOnGivenType">
            <summary>
              Looks up a localized string similar to Values of {0} can only be set on {0} variables.
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Properties.InfoResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.InfoResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.InfoResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.InfoResources.parameters">
             <summary>
               Looks up a localized string similar to &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;configuration version="5.0" xmlns="http://www.aerotech.com/xsd/Controller/Parameters/2009/"&gt;
              &lt;Parameters architecture="Ensemble"&gt;
                &lt;Controller&gt;
                  &lt;P n="DataCollectionPoints"&gt;8000&lt;/P&gt;
                  &lt;P n="PrintBufferSize"&gt;256&lt;/P&gt;
                  &lt;P n="SerialPort0XonCharacter"&gt;26&lt;/P&gt;
                  &lt;P n="SerialPort0XoffCharacter"&gt;27&lt;/P&gt;
                  &lt;P n="SerialPort0BaudRate"&gt;9600&lt;/P&gt;
                  &lt;P n="SerialPort0Setup"&gt;3&lt;/P&gt;
                  &lt;P n="TaskExecutionSetup"&gt;2&lt;/P&gt;
                  &lt;P n="GlobalIntegers" [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.InfoResources.parametersInfo">
             <summary>
               Looks up a localized string similar to &lt;?xml version="1.0" encoding="us-ascii"?&gt;
            &lt;data&gt;
              &lt;!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --&gt;
              &lt;!-- !! this file is auto generated, do NOT edit !! --&gt;
              &lt;!-- !! editing this is a waste of time          !! --&gt;
              &lt;!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --&gt;
              &lt;!----&gt;
              &lt;!-- generated by parametersInfo_xml.xslt --&gt;
              &lt;parameter name="AxisType" type="int" number="0"&gt;
                &lt;default&gt;0&lt;/default&gt;
                &lt;bounds&gt;
            			&lt;min&gt;0&lt;/min&gt;
            			&lt;max&gt;1&lt;/max&gt;
            		&lt;/bounds&gt;
              &lt;/parameter&gt;
              &lt;parame [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Properties.InfoResources.parametersSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;xs:schema targetNamespace="http://www.aerotech.com/xsd/Controller/Parameters/2009/" elementFormDefault="qualified" xmlns="http://www.aerotech.com/xsd/Controller/Parameters/2009/" xmlns:mstns="http://www.aerotech.com/xsd/Controller/Parameters/2009/" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
            	&lt;xs:element name="configuration"&gt;
            		&lt;xs:complexType&gt;
            			&lt;xs:sequence&gt;
            				&lt;xs:element name="Parameters" maxOccurs="1" minOccurs="1"&gt;
            					&lt;xs:complexType&gt;
            						&lt;xs:seque [rest of string was truncated]";.
             </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.AxesRootCommands">
            <summary>Contains the Root Commands</summary>
            <summary>
            The category that allows access to commands for multiple axes
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.CommandCategory">
            <summary>
            Represents a category of immediate commands
            </summary>
            <exclude></exclude>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.AxesRootCommands.Motion">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.AxesRootCommands.IO">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.AxesMotionCommands">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.Disable">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Disable();
myController.Commands.Axes[0, 2].Motion.Disable();
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Disable();
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Disable();
myController.Commands.Axes.Select("X", "Z").Motion.Disable();
myController.Commands.Axes.Select(0, 2).Motion.Disable();
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Disable();
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Disable();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Disable()
myController.Commands.Axes(0, 2).Motion.Disable()
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Disable()
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Disable()
myController.Commands.Axes.Select("X", "Z").Motion.Disable()
myController.Commands.Axes.Select(0, 2).Motion.Disable()
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Disable()
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Disable()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Disable();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.Enable">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Enable();
myController.Commands.Axes[0, 2].Motion.Enable();
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Enable();
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Enable();
myController.Commands.Axes.Select("X", "Z").Motion.Enable();
myController.Commands.Axes.Select(0, 2).Motion.Enable();
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Enable();
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Enable();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Enable()
myController.Commands.Axes(0, 2).Motion.Enable()
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Enable()
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Enable()
myController.Commands.Axes.Select("X", "Z").Motion.Enable()
myController.Commands.Axes.Select(0, 2).Motion.Enable()
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Enable()
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Enable()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Enable();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.FaultAck">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.FaultAck();
myController.Commands.Axes[0, 2].Motion.FaultAck();
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.FaultAck();
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.FaultAck();
myController.Commands.Axes.Select("X", "Z").Motion.FaultAck();
myController.Commands.Axes.Select(0, 2).Motion.FaultAck();
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.FaultAck();
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.FaultAck();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.FaultAck()
myController.Commands.Axes(0, 2).Motion.FaultAck()
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.FaultAck()
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.FaultAck()
myController.Commands.Axes.Select("X", "Z").Motion.FaultAck()
myController.Commands.Axes.Select(0, 2).Motion.FaultAck()
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.FaultAck()
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.FaultAck()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;FaultAck();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.FreeRun(System.Double[])">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Speed">The speed at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.FreeRun(new double[]{10000, 15000});
myController.Commands.Axes[0, 2].Motion.FreeRun(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.FreeRun(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.FreeRun(new double[]{10000, 15000});
myController.Commands.Axes.Select("X", "Z").Motion.FreeRun(new double[]{10000, 15000});
myController.Commands.Axes.Select(0, 2).Motion.FreeRun(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.FreeRun(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.FreeRun(new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.FreeRun(New Double(){10000, 15000})
myController.Commands.Axes(0, 2).Motion.FreeRun(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.FreeRun(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.FreeRun(New Double(){10000, 15000})
myController.Commands.Axes.Select("X", "Z").Motion.FreeRun(New Double(){10000, 15000})
myController.Commands.Axes.Select(0, 2).Motion.FreeRun(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.FreeRun(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.FreeRun(New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;FreeRun(gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.FreeRunStop">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.FreeRunStop();
myController.Commands.Axes[0, 2].Motion.FreeRunStop();
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.FreeRunStop();
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.FreeRunStop();
myController.Commands.Axes.Select("X", "Z").Motion.FreeRunStop();
myController.Commands.Axes.Select(0, 2).Motion.FreeRunStop();
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.FreeRunStop();
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.FreeRunStop();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.FreeRunStop()
myController.Commands.Axes(0, 2).Motion.FreeRunStop()
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.FreeRunStop()
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.FreeRunStop()
myController.Commands.Axes.Select("X", "Z").Motion.FreeRunStop()
myController.Commands.Axes.Select(0, 2).Motion.FreeRunStop()
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.FreeRunStop()
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.FreeRunStop()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;FreeRunStop();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;FreeRunStop();
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;FreeRunStop();
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;FreeRunStop();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;FreeRunStop();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;FreeRunStop();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;FreeRunStop();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;FreeRunStop();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.Home">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Home();
myController.Commands.Axes[0, 2].Motion.Home();
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Home();
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Home();
myController.Commands.Axes.Select("X", "Z").Motion.Home();
myController.Commands.Axes.Select(0, 2).Motion.Home();
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Home();
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Home();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Home()
myController.Commands.Axes(0, 2).Motion.Home()
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Home()
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Home()
myController.Commands.Axes.Select("X", "Z").Motion.Home()
myController.Commands.Axes.Select(0, 2).Motion.Home()
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Home()
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Home()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Home();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.Linear(System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes[0, 2].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select("X", "Z").Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select(0, 2).Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Linear(new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes(0, 2).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select("X", "Z").Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select(0, 2).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Linear(New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.Linear(System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes[0, 2].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select("X", "Z").Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select(0, 2).Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Linear(new double[]{10000, 15000}, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes(0, 2).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select("X", "Z").Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select(0, 2).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Linear(New Double(){10000, 15000}, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.MoveInc(System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.MoveInc(new double[]{10000, 15000});
myController.Commands.Axes[0, 2].Motion.MoveInc(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.MoveInc(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.MoveInc(new double[]{10000, 15000});
myController.Commands.Axes.Select("X", "Z").Motion.MoveInc(new double[]{10000, 15000});
myController.Commands.Axes.Select(0, 2).Motion.MoveInc(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.MoveInc(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveInc(new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.MoveInc(New Double(){10000, 15000})
myController.Commands.Axes(0, 2).Motion.MoveInc(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000})
myController.Commands.Axes.Select("X", "Z").Motion.MoveInc(New Double(){10000, 15000})
myController.Commands.Axes.Select(0, 2).Motion.MoveInc(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.MoveInc(System.Double[],System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[0, 2].Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select("X", "Z").Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(0, 2).Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveInc(new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(0, 2).Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select("X", "Z").Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(0, 2).Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveInc(New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;MoveInc(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.MoveAbs(System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.MoveAbs(new double[]{10000, 15000});
myController.Commands.Axes[0, 2].Motion.MoveAbs(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.MoveAbs(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.MoveAbs(new double[]{10000, 15000});
myController.Commands.Axes.Select("X", "Z").Motion.MoveAbs(new double[]{10000, 15000});
myController.Commands.Axes.Select(0, 2).Motion.MoveAbs(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.MoveAbs(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveAbs(new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.MoveAbs(New Double(){10000, 15000})
myController.Commands.Axes(0, 2).Motion.MoveAbs(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000})
myController.Commands.Axes.Select("X", "Z").Motion.MoveAbs(New Double(){10000, 15000})
myController.Commands.Axes.Select(0, 2).Motion.MoveAbs(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.MoveAbs(System.Double[],System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[0, 2].Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select("X", "Z").Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(0, 2).Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveAbs(new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(0, 2).Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select("X", "Z").Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(0, 2).Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.MoveAbs(New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;MoveAbs(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.BlockMotion(Aerotech.Ensemble.Commands.OnOff)">
            <summary>Sets motion blocking to On or OFF.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets motion blocking to On or OFF.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BLOCKMOTION_Command.html">BLOCKMOTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.BlockMotion(OnOff.On);
myController.Commands.Axes[0, 2].Motion.BlockMotion(OnOff.On);
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.BlockMotion(OnOff.On);
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.BlockMotion(OnOff.On);
myController.Commands.Axes.Select("X", "Z").Motion.BlockMotion(OnOff.On);
myController.Commands.Axes.Select(0, 2).Motion.BlockMotion(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.BlockMotion(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.BlockMotion(OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.BlockMotion(OnOff.On)
myController.Commands.Axes(0, 2).Motion.BlockMotion(OnOff.On)
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.BlockMotion(OnOff.On)
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.BlockMotion(OnOff.On)
myController.Commands.Axes.Select("X", "Z").Motion.BlockMotion(OnOff.On)
myController.Commands.Axes.Select(0, 2).Motion.BlockMotion(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.BlockMotion(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.BlockMotion(OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;BlockMotion(OnOff::On);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;BlockMotion(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;BlockMotion(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;BlockMotion(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;BlockMotion(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;BlockMotion(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;BlockMotion(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;BlockMotion(OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.AutoFocus(Aerotech.Ensemble.Commands.OnOff)">
            <summary>Turns on or turns off autofocus.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Turns on or turns off autofocus.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.AutoFocus(OnOff.On);
myController.Commands.Axes[0, 2].Motion.AutoFocus(OnOff.On);
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.AutoFocus(OnOff.On);
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.AutoFocus(OnOff.On);
myController.Commands.Axes.Select("X", "Z").Motion.AutoFocus(OnOff.On);
myController.Commands.Axes.Select(0, 2).Motion.AutoFocus(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.AutoFocus(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.AutoFocus(OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.AutoFocus(OnOff.On)
myController.Commands.Axes(0, 2).Motion.AutoFocus(OnOff.On)
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.AutoFocus(OnOff.On)
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.AutoFocus(OnOff.On)
myController.Commands.Axes.Select("X", "Z").Motion.AutoFocus(OnOff.On)
myController.Commands.Axes.Select(0, 2).Motion.AutoFocus(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.AutoFocus(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.AutoFocus(OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;AutoFocus(OnOff::On);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;AutoFocus(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;AutoFocus(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;AutoFocus(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;AutoFocus(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;AutoFocus(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;AutoFocus(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;AutoFocus(OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        array&lt;double&gt;^ distances = {500, 1000};
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        double[] distances = new double[] { 500.0, 1000.0 };
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.WaitForMotionDone(WaitOption.InPosition, 5000);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.Enable
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        ' Command the linear motion to the controller at 1000 units/sec.
        Dim distances As Double() = New Double() { 500, 1000 }
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        array&lt;double&gt;^ distances = {500, 1000};
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        double[] distances = new double[] { 500.0, 1000.0 };
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.WaitForMotionDone(WaitOption.InPosition, 5000);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.Enable
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        ' Command the linear motion to the controller at 1000 units/sec.
        Dim distances As Double() = New Double() { 500, 1000 }
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionCommands.Abort">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Enable();
        // Specify the distances in an array. Move axis 0 by 500 and axis 2 by 1000.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Linear(distances, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion.
        myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Abort();
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Enable();
        // Specify the distances in an array. Move axis 0 by 500 and axis 2 by 1000.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Linear(distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion.
        myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Abort();
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.Enable
        ' Specify the distances in an array. Move axis 0 by 500 and axis 2 by 1000.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.Linear(distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion.
        myController.Commands.Axes.Item(AxisMask.A0, AxisMask.A2).Motion.Abort
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.AxesMotionCommands.Setup">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.AxesMotionSetupCommands">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionSetupCommands.RampMode(Aerotech.Ensemble.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">The ramp mode to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampMode(RampMode.Dist);
myController.Commands.Axes[0, 2].Motion.Setup.RampMode(RampMode.Dist);
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Setup.RampMode(RampMode.Dist);
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Setup.RampMode(RampMode.Dist);
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampMode(RampMode.Dist);
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampMode(RampMode.Dist);
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Setup.RampMode(RampMode.Dist);
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampMode(RampMode.Dist);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampMode(RampMode.Dist)
myController.Commands.Axes(0, 2).Motion.Setup.RampMode(RampMode.Dist)
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampMode(RampMode.Dist)
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Setup.RampMode(RampMode.Dist)
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampMode(RampMode.Dist)
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampMode(RampMode.Dist)
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampMode(RampMode.Dist)
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampMode(RampMode.Dist)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionSetupCommands.RampDist(System.Double[])">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampDist(new double[]{1000, 1000});
myController.Commands.Axes[0, 2].Motion.Setup.RampDist(new double[]{1000, 1000});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Setup.RampDist(new double[]{1000, 1000});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Setup.RampDist(new double[]{1000, 1000});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampDist(new double[]{1000, 1000});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampDist(new double[]{1000, 1000});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Setup.RampDist(new double[]{1000, 1000});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampDist(new double[]{1000, 1000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampDist(New Double(){1000, 1000})
myController.Commands.Axes(0, 2).Motion.Setup.RampDist(New Double(){1000, 1000})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampDist(New Double(){1000, 1000})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Setup.RampDist(New Double(){1000, 1000})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampDist(New Double(){1000, 1000})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampDist(New Double(){1000, 1000})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampDist(New Double(){1000, 1000})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampDist(New Double(){1000, 1000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;double&gt;{1000, 1000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionSetupCommands.RampRate(System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes[0, 2].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampRate(new double[]{50000, 50000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes(0, 2).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampRate(New Double(){50000, 50000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionSetupCommands.RampTime(System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes[0, 2].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampTime(new double[]{1, 1});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes(0, 2).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.RampTime(New Double(){1, 1})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionSetupCommands.Reconcile">
            <summary>Reconciles the position of the axes in the list on the plane to servo position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RECONCILE_Command.html">RECONCILE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.Reconcile();
myController.Commands.Axes[0, 2].Motion.Setup.Reconcile();
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].Motion.Setup.Reconcile();
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].Motion.Setup.Reconcile();
myController.Commands.Axes.Select("X", "Z").Motion.Setup.Reconcile();
myController.Commands.Axes.Select(0, 2).Motion.Setup.Reconcile();
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).Motion.Setup.Reconcile();
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.Reconcile();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.Reconcile()
myController.Commands.Axes(0, 2).Motion.Setup.Reconcile()
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).Motion.Setup.Reconcile()
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).Motion.Setup.Reconcile()
myController.Commands.Axes.Select("X", "Z").Motion.Setup.Reconcile()
myController.Commands.Axes.Select(0, 2).Motion.Setup.Reconcile()
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).Motion.Setup.Reconcile()
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).Motion.Setup.Reconcile()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;Reconcile();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;Reconcile();
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;Reconcile();
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;Motion-&gt;Setup-&gt;Reconcile();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;Reconcile();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;Reconcile();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;Reconcile();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;Motion-&gt;Setup-&gt;Reconcile();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionSetupCommands.PosCap">
            <summary>Retrieves the POSCAP positions.</summary>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesMotionSetupCommands.PosCap(System.Boolean)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="reArm">Whether the position capture should be armed after the read.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.AxesIOCommands">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesIOCommands.Brake(Aerotech.Ensemble.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the brake to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].IO.Brake(OnOff.On);
myController.Commands.Axes[0, 2].IO.Brake(OnOff.On);
myController.Commands.Axes[AxisMask.A0|AxisMask.A2].IO.Brake(OnOff.On);
myController.Commands.Axes[AxisMask.A0, AxisMask.A2].IO.Brake(OnOff.On);
myController.Commands.Axes.Select("X", "Z").IO.Brake(OnOff.On);
myController.Commands.Axes.Select(0, 2).IO.Brake(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A0|AxisMask.A2).IO.Brake(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).IO.Brake(OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").IO.Brake(OnOff.On)
myController.Commands.Axes(0, 2).IO.Brake(OnOff.On)
myController.Commands.Axes(AxisMask.A0 Or AxisMask.A2).IO.Brake(OnOff.On)
myController.Commands.Axes(AxisMask.A0, AxisMask.A2).IO.Brake(OnOff.On)
myController.Commands.Axes.Select("X", "Z").IO.Brake(OnOff.On)
myController.Commands.Axes.Select(0, 2).IO.Brake(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A0 Or AxisMask.A2).IO.Brake(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A0, AxisMask.A2).IO.Brake(OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A0|AxisMask::A2]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A0, AxisMask::A2]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0|AxisMask::A2)-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A0, AxisMask::A2)-&gt;IO-&gt;Brake(OnOff::On);
</code></example>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.RootCommands">
            <summary>Contains the Root Commands</summary>
            <summary>
            Represents the main category that allows access to all of the commands
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RootCommands.AcknowledgeAll">
            <summary>Acknowledges all axis faults and clears all task errors.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ACKNOWLEDGEALL_Command.html">ACKNOWLEDGEALL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.AcknowledgeAll();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.AcknowledgeAll()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;AcknowledgeAll();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RootCommands.Execute(System.String)">
            <summary>
            Executes an immediate command
            </summary>
            <param name="code">AeroBasic code to execute</param>
            <returns>The returned value</returns>
            <remarks>
            	<para>
            		To have a value returned from the <paramref name="code"></paramref> use the "<c>RET</c>" variable.
            		The variable must be a primitive type (int, long, double, float).
            	</para>
            </remarks>
            <threadsafety instance="false"></threadsafety>
            <include file="examples.xml" path="/*/RootCommands/Example[@name=&quot;Execute&quot;]/*"></include>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RootCommands.ExecuteAsync(System.String)">
            <summary>
            Executes an immediate command asynchronously
            </summary>
            <param name="code">AeroBasic code to execute</param>
            <remarks>
            	<para>
            		This executes the command asynchronously, whenever the command is sent to the controller,
            		the function returns.  It does not wait for the task to finish, not for a return value,
            		and not for task errors.
            	</para>
            </remarks>
            <threadsafety instance="false"></threadsafety>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.Motion">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.Register">
            <summary>Contains the Register Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.IO">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.Status">
            <summary>Contains the Status Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.Tuning">
            <summary>Contains the Tuning Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.DataAcquisition">
            <summary>Contains the DataAcquisition Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.PSO">
            <summary>Contains the PSO Commands</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.RootCommands.Axes">
            <summary>Allows execution of commands by selecting a set of axes to operate on</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.MotionCommands">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWRadius(0, 10000, 2, 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWRadius(System.String,System.Double,System.String,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWRadius("X", 10000, "Z", 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWCenter(0, 10000, 2, 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWRadius(0, 10000, 2, 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWRadius(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius(0, 10000, 2, 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWRadius(System.String,System.Double,System.String,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius("X", 10000, "Z", 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter(0, 10000, 2, 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius(0, 10000, 2, 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWRadius(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.CCWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1End">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2End">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Disable(System.Int32[])">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Disable(new int[]{0, 2});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Disable(New Integer(){0, 2})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Disable(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Disable(System.Int32)">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Disable(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Disable(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Disable(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Disable(System.String[])">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Disable(new string[]{"X", "Z"});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Disable(New String(){"X", "Z"})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Disable(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Disable(System.String)">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Disable("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Disable("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Disable(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Disable(Aerotech.Ensemble.AxisMask)">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Disable(AxisMask.A0|AxisMask.A2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Disable(AxisMask.A0 Or AxisMask.A2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Disable(AxisMask::A0|AxisMask::A2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Enable(System.Int32[])">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Enable(new int[]{0, 2});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Enable(New Integer(){0, 2})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Enable(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Enable(System.Int32)">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Enable(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Enable(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Enable(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Enable(System.String[])">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Enable(new string[]{"X", "Z"});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Enable(New String(){"X", "Z"})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Enable(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Enable(System.String)">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Enable("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Enable("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Enable(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Enable(Aerotech.Ensemble.AxisMask)">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Enable(AxisMask.A0|AxisMask.A2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Enable(AxisMask.A0 Or AxisMask.A2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Enable(AxisMask::A0|AxisMask::A2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FaultAck(System.Int32[])">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FaultAck(new int[]{0, 2});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FaultAck(New Integer(){0, 2})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FaultAck(System.Int32)">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FaultAck(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FaultAck(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FaultAck(System.String[])">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FaultAck(new string[]{"X", "Z"});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FaultAck(New String(){"X", "Z"})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FaultAck(System.String)">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FaultAck("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FaultAck("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FaultAck(Aerotech.Ensemble.AxisMask)">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FaultAck(AxisMask.A0|AxisMask.A2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FaultAck(AxisMask.A0 Or AxisMask.A2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(AxisMask::A0|AxisMask::A2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRun(System.Int32[],System.Double[])">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Speed">The speed at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRun(new int[]{0, 2}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRun(New Integer(){0, 2}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRun(System.Int32,System.Double)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Speed">The speed at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRun(0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRun(0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRun(System.String[],System.Double[])">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Speed">The speed at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRun(new string[]{"X", "Z"}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRun(New String(){"X", "Z"}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRun(System.String,System.Double)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Speed">The speed at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRun("X", 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRun("X", 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(L"X", 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRun(Aerotech.Ensemble.AxisMask,System.Double[])">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Speed">The speed at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRun(AxisMask.A0|AxisMask.A2, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRun(AxisMask.A0 Or AxisMask.A2, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRun(Aerotech.Ensemble.AxisMask,System.Double)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Speed">The speed at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRun(AxisMask.A0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRun(AxisMask.A0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(AxisMask::A0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRunStop(System.Int32[])">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRunStop(new int[]{0, 2});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRunStop(New Integer(){0, 2})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRunStop(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRunStop(System.Int32)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRunStop(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRunStop(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRunStop(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRunStop(System.String[])">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRunStop(new string[]{"X", "Z"});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRunStop(New String(){"X", "Z"})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRunStop(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRunStop(System.String)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRunStop("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRunStop("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRunStop(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.FreeRunStop(Aerotech.Ensemble.AxisMask)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.FreeRunStop(AxisMask.A0|AxisMask.A2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.FreeRunStop(AxisMask.A0 Or AxisMask.A2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;FreeRunStop(AxisMask::A0|AxisMask::A2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Home(System.Int32[])">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Home(new int[]{0, 2});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Home(New Integer(){0, 2})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Home(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Home(System.Int32)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Home(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Home(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Home(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Home(System.String[])">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Home(new string[]{"X", "Z"});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Home(New String(){"X", "Z"})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Home(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Home(System.String)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Home("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Home("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Home(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Home(Aerotech.Ensemble.AxisMask)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Home(AxisMask.A0|AxisMask.A2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Home(AxisMask.A0 Or AxisMask.A2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Home(AxisMask::A0|AxisMask::A2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.Int32[],System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(new int[]{0, 2}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(New Integer(){0, 2}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.Int32,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.String[],System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(new string[]{"X", "Z"}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(New String(){"X", "Z"}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.String,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear("X", 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear("X", 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(L"X", 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(Aerotech.Ensemble.AxisMask,System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(AxisMask.A0|AxisMask.A2, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(AxisMask.A0 Or AxisMask.A2, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(Aerotech.Ensemble.AxisMask,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(AxisMask.A0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(AxisMask.A0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.Int32[],System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(new int[]{0, 2}, new double[]{10000, 15000}, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(New Integer(){0, 2}, New Double(){10000, 15000}, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.Int32,System.Double,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(0, 10000, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(0, 10000, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(0, 10000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.String[],System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(new string[]{"X", "Z"}, new double[]{10000, 15000}, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(New String(){"X", "Z"}, New Double(){10000, 15000}, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(System.String,System.Double,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear("X", 10000, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear("X", 10000, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(L"X", 10000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(Aerotech.Ensemble.AxisMask,System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(AxisMask.A0|AxisMask.A2, new double[]{10000, 15000}, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(AxisMask.A0 Or AxisMask.A2, New Double(){10000, 15000}, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Linear(Aerotech.Ensemble.AxisMask,System.Double,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Linear(AxisMask.A0, 10000, 5000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Linear(AxisMask.A0, 10000, 5000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A0, 10000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Halt">
            <summary>Halts the vector motion queue and prevents motion from starting.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/HALT_Command.html">HALT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Halt();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Halt()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Halt();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Start">
            <summary>Starts execution of the vector motion queue.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/START_Command.html">START</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Start();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Start()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Start();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.Int32[],System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(new int[]{0, 2}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(New Integer(){0, 2}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.Int32,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.String[],System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(new string[]{"X", "Z"}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(New String(){"X", "Z"}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.String,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc("X", 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc("X", 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(L"X", 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(Aerotech.Ensemble.AxisMask,System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(AxisMask.A0|AxisMask.A2, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(AxisMask.A0 Or AxisMask.A2, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(Aerotech.Ensemble.AxisMask,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(AxisMask.A0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(AxisMask.A0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(AxisMask::A0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.Int32[],System.Double[],System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(new int[]{0, 2}, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(New Integer(){0, 2}, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.Int32,System.Double,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(0, 10000, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(0, 10000, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(0, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.String[],System.Double[],System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(new string[]{"X", "Z"}, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(New String(){"X", "Z"}, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(System.String,System.Double,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc("X", 10000, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc("X", 10000, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(L"X", 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(Aerotech.Ensemble.AxisMask,System.Double[],System.Double[])">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(AxisMask.A0|AxisMask.A2, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(AxisMask.A0 Or AxisMask.A2, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveInc(Aerotech.Ensemble.AxisMask,System.Double,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move an axis, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveInc(AxisMask.A0, 10000, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveInc(AxisMask.A0, 10000, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(AxisMask::A0, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.Int32[],System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(new int[]{0, 2}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(New Integer(){0, 2}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.Int32,System.Double)">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.String[],System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(new string[]{"X", "Z"}, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(New String(){"X", "Z"}, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.String,System.Double)">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs("X", 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs("X", 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(L"X", 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(Aerotech.Ensemble.AxisMask,System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(AxisMask.A0|AxisMask.A2, new double[]{10000, 15000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(AxisMask.A0 Or AxisMask.A2, New Double(){10000, 15000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(Aerotech.Ensemble.AxisMask,System.Double)">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(AxisMask.A0, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(AxisMask.A0, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(AxisMask::A0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.Int32[],System.Double[],System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(new int[]{0, 2}, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(New Integer(){0, 2}, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.Int32,System.Double,System.Double)">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(0, 10000, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(0, 10000, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(0, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.String[],System.Double[],System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(new string[]{"X", "Z"}, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(New String(){"X", "Z"}, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(System.String,System.Double,System.Double)">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs("X", 10000, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs("X", 10000, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(L"X", 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(Aerotech.Ensemble.AxisMask,System.Double[],System.Double[])">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(AxisMask.A0|AxisMask.A2, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(AxisMask.A0 Or AxisMask.A2, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.MoveAbs(Aerotech.Ensemble.AxisMask,System.Double,System.Double)">
            <summary>Executes an absolute move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The location to move an axis to, in user units.</param><param name="Speed">The speed at which to move an axis, in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.MoveAbs(AxisMask.A0, 10000, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.MoveAbs(AxisMask.A0, 10000, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(AxisMask::A0, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.BlockMotion(System.Int32[],Aerotech.Ensemble.Commands.OnOff)">
            <summary>Sets motion blocking to On or OFF.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets motion blocking to On or OFF.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BLOCKMOTION_Command.html">BLOCKMOTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.BlockMotion(new int[]{0, 2}, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.BlockMotion(New Integer(){0, 2}, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;BlockMotion(gcnew array&lt;int&gt;{0, 2}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.BlockMotion(System.Int32,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Sets motion blocking to On or OFF.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets motion blocking to On or OFF.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BLOCKMOTION_Command.html">BLOCKMOTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.BlockMotion(0, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.BlockMotion(0, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;BlockMotion(0, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.BlockMotion(System.String[],Aerotech.Ensemble.Commands.OnOff)">
            <summary>Sets motion blocking to On or OFF.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets motion blocking to On or OFF.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BLOCKMOTION_Command.html">BLOCKMOTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.BlockMotion(new string[]{"X", "Z"}, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.BlockMotion(New String(){"X", "Z"}, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;BlockMotion(gcnew array&lt;String^&gt;{L"X", L"Z"}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.BlockMotion(System.String,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Sets motion blocking to On or OFF.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets motion blocking to On or OFF.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BLOCKMOTION_Command.html">BLOCKMOTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.BlockMotion("X", OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.BlockMotion("X", OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;BlockMotion(L"X", OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.BlockMotion(Aerotech.Ensemble.AxisMask,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Sets motion blocking to On or OFF.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets motion blocking to On or OFF.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BLOCKMOTION_Command.html">BLOCKMOTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.BlockMotion(AxisMask.A0|AxisMask.A2, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.BlockMotion(AxisMask.A0 Or AxisMask.A2, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;BlockMotion(AxisMask::A0|AxisMask::A2, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitMode(Aerotech.Ensemble.Commands.WaitType)">
            <summary>Sets the mode of wait of a task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The wait mode type to set. Possible modes are NOWAIT, MOVEDONE, and INPOS.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MODE_Command.html">WAIT MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.WaitMode(WaitType.NoWait);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.WaitMode(WaitType.NoWait)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;WaitMode(WaitType::NoWait);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.AutoFocus(System.Int32[],Aerotech.Ensemble.Commands.OnOff)">
            <summary>Turns on or turns off autofocus.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Turns on or turns off autofocus.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.AutoFocus(new int[]{0, 2}, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.AutoFocus(New Integer(){0, 2}, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;AutoFocus(gcnew array&lt;int&gt;{0, 2}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.AutoFocus(System.Int32,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Turns on or turns off autofocus.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Turns on or turns off autofocus.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.AutoFocus(0, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.AutoFocus(0, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;AutoFocus(0, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.AutoFocus(System.String[],Aerotech.Ensemble.Commands.OnOff)">
            <summary>Turns on or turns off autofocus.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Turns on or turns off autofocus.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.AutoFocus(new string[]{"X", "Z"}, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.AutoFocus(New String(){"X", "Z"}, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;AutoFocus(gcnew array&lt;String^&gt;{L"X", L"Z"}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.AutoFocus(System.String,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Turns on or turns off autofocus.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Turns on or turns off autofocus.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.AutoFocus("X", OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.AutoFocus("X", OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;AutoFocus(L"X", OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.AutoFocus(Aerotech.Ensemble.AxisMask,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Turns on or turns off autofocus.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Turns on or turns off autofocus.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.AutoFocus(AxisMask.A0|AxisMask.A2, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.AutoFocus(AxisMask.A0 Or AxisMask.A2, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;AutoFocus(AxisMask::A0|AxisMask::A2, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.Int32,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndex">The axis number to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A2 | AxisMask::A0);
        selectedAxesCommands-&gt;Motion-&gt;Enable();
        // Home axes 0 and 1.
        selectedAxesCommands-&gt;Motion-&gt;Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(AxisMask.A2 | AxisMask.A0);
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 1.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(AxisMask.A2 Or AxisMask.A0)
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 1.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.Int32[],System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndexes">The axis numbers ot wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.String,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisName">The name of the axis to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A2 | AxisMask::A0);
        selectedAxesCommands-&gt;Motion-&gt;Enable();
        // Home axes 0 and 1.
        selectedAxesCommands-&gt;Motion-&gt;Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(AxisMask.A2 | AxisMask.A0);
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 1.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(AxisMask.A2 Or AxisMask.A0)
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 1.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.String[],System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisNames">The names of the axes to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,Aerotech.Ensemble.AxisMask,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisMask">The axes to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A2 | AxisMask::A0);
        selectedAxesCommands-&gt;Motion-&gt;Enable();
        // Home axes 0 and 1.
        selectedAxesCommands-&gt;Motion-&gt;Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(AxisMask.A2 | AxisMask.A0);
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 1.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(AxisMask.A2 Or AxisMask.A0)
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 1.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndex">The axis number to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A2 | AxisMask::A0);
        selectedAxesCommands-&gt;Motion-&gt;Enable();
        // Home axes 0 and 1.
        selectedAxesCommands-&gt;Motion-&gt;Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(AxisMask.A2 | AxisMask.A0);
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 1.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(AxisMask.A2 Or AxisMask.A0)
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 1.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.Int32[])">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndexes">The axis numbers ot wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.String)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisName">The name of the axis to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A2 | AxisMask::A0);
        selectedAxesCommands-&gt;Motion-&gt;Enable();
        // Home axes 0 and 1.
        selectedAxesCommands-&gt;Motion-&gt;Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(AxisMask.A2 | AxisMask.A0);
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 1.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(AxisMask.A2 Or AxisMask.A0)
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 1.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,System.String[])">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisNames">The names of the axes to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.WaitForMotionDone(Aerotech.Ensemble.Commands.WaitOption,Aerotech.Ensemble.AxisMask)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisMask">The axes to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Commands</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A2 | AxisMask::A0);
        selectedAxesCommands-&gt;Motion-&gt;Enable();
        // Home axes 0 and 1.
        selectedAxesCommands-&gt;Motion-&gt;Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands-&gt;Motion-&gt;Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands-&gt;Motion-&gt;WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(AxisMask.A2 | AxisMask.A0);
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 1.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(AxisMask.A2 Or AxisMask.A0)
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 1.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &amp;H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Abort(System.Int32)">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisIndex">The axis index on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController-&gt;Commands-&gt;Motion-&gt;Enable(AxisMask::A2 | AxisMask::A0);
        // Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A2 | AxisMask::A0, distances, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion for whatever reason.
        myController-&gt;Commands-&gt;Motion-&gt;Abort(AxisMask::A2 | AxisMask::A0);
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A2 | AxisMask.A0);
        // Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A2 | AxisMask.A0, distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A2 | AxisMask.A0);
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A2 Or AxisMask.A0)
        ' Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A2 Or AxisMask.A0, distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A2 Or AxisMask.A0)
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Abort(System.Int32[])">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisIndexes">The axis indexes on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Abort(System.String)">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisName">The name of axis on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController-&gt;Commands-&gt;Motion-&gt;Enable(AxisMask::A2 | AxisMask::A0);
        // Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A2 | AxisMask::A0, distances, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion for whatever reason.
        myController-&gt;Commands-&gt;Motion-&gt;Abort(AxisMask::A2 | AxisMask::A0);
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A2 | AxisMask.A0);
        // Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A2 | AxisMask.A0, distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A2 | AxisMask.A0);
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A2 Or AxisMask.A0)
        ' Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A2 Or AxisMask.A0, distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A2 Or AxisMask.A0)
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Abort(System.String[])">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisNames">The names of axes on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionCommands.Abort(Aerotech.Ensemble.AxisMask)">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisMask">The axes on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController-&gt;Commands-&gt;Motion-&gt;Enable(AxisMask::A2 | AxisMask::A0);
        // Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        array&lt;double&gt;^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A2 | AxisMask::A0, distances, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion for whatever reason.
        myController-&gt;Commands-&gt;Motion-&gt;Abort(AxisMask::A2 | AxisMask::A0);
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A2 | AxisMask.A0);
        // Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A2 | AxisMask.A0, distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A2 | AxisMask.A0);
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A2 Or AxisMask.A0)
        ' Specify our distances in an array. Move axis 0 by 500 and axis 1 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A2 Or AxisMask.A0, distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A2 Or AxisMask.A0)
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.MotionCommands.Setup">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.MotionSetupCommands">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Plane(System.Int32)">
            <summary>Sets the current plane of motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="PlaneNumber">The plane to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PLANE_Command.html">PLANE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Plane(1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Plane(1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Plane(1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Scurve(System.Double)">
            <summary>Specifies the SCurve value to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value by which to SCurve.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SCURVE_Command.html">SCURVE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Scurve(75);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Scurve(75)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Scurve(75);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Absolute">
            <summary>Sets motion commands to be in absolute mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABS_Command.html">ABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Absolute();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Absolute()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Absolute();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Incremental">
            <summary>Sets motion commands to be in incremental mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/INC_Command.html">INC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Incremental();
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Incremental()
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Incremental();
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampMode(Aerotech.Ensemble.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">The ramp mode to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampMode(RampMode.Dist);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampMode(RampMode.Dist)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Dist);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampMode(System.Int32[],Aerotech.Ensemble.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">The ramp mode to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampMode(new int[]{0, 2}, RampMode.Dist);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampMode(New Integer(){0, 2}, RampMode.Dist)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(gcnew array&lt;int&gt;{0, 2}, RampMode::Dist);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampMode(System.Int32,Aerotech.Ensemble.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">The ramp mode to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampMode(0, RampMode.Dist);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampMode(0, RampMode.Dist)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(0, RampMode::Dist);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampMode(System.String[],Aerotech.Ensemble.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">The ramp mode to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampMode(new string[]{"X", "Z"}, RampMode.Dist);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampMode(New String(){"X", "Z"}, RampMode.Dist)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(gcnew array&lt;String^&gt;{L"X", L"Z"}, RampMode::Dist);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampMode(System.String,Aerotech.Ensemble.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">The ramp mode to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampMode("X", RampMode.Dist);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampMode("X", RampMode.Dist)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(L"X", RampMode::Dist);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampMode(Aerotech.Ensemble.AxisMask,Aerotech.Ensemble.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">The ramp mode to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampMode(AxisMask.A0|AxisMask.A2, RampMode.Dist);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampMode(AxisMask.A0 Or AxisMask.A2, RampMode.Dist)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(AxisMask::A0|AxisMask::A2, RampMode::Dist);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDist(System.Double)">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDist(1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDist(1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDist(1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDistAccel(System.Double)">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDistAccel(1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDistAccel(1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDistAccel(1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDistDecel(System.Double)">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDistDecel(1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDistDecel(1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDistDecel(1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDist(System.Int32[],System.Double[])">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDist(new int[]{0, 2}, new double[]{1000, 1000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDist(New Integer(){0, 2}, New Double(){1000, 1000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{1000, 1000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDist(System.Int32,System.Double)">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDist(0, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDist(0, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDist(0, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDist(System.String[],System.Double[])">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDist(new string[]{"X", "Z"}, new double[]{1000, 1000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDist(New String(){"X", "Z"}, New Double(){1000, 1000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDist(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{1000, 1000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDist(System.String,System.Double)">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDist("X", 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDist("X", 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDist(L"X", 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDist(Aerotech.Ensemble.AxisMask,System.Double[])">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDist(AxisMask.A0|AxisMask.A2, new double[]{1000, 1000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDist(AxisMask.A0 Or AxisMask.A2, New Double(){1000, 1000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDist(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{1000, 1000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampDist(Aerotech.Ensemble.AxisMask,System.Double)">
            <summary>Specifies distance-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration distance.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP DIST_Command.html">RAMP DIST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampDist(AxisMask.A0, 1000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampDist(AxisMask.A0, 1000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampDist(AxisMask::A0, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRate(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRate(50000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRate(50000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(50000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRateAccel(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRateAccel(50000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRateAccel(50000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(50000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRateDecel(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRateDecel(50000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRateDecel(50000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(50000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRate(System.Int32[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRate(new int[]{0, 2}, new double[]{50000, 50000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRate(New Integer(){0, 2}, New Double(){50000, 50000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRate(System.Int32,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRate(0, 50000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRate(0, 50000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(0, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRate(System.String[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRate(new string[]{"X", "Z"}, new double[]{50000, 50000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRate(New String(){"X", "Z"}, New Double(){50000, 50000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRate(System.String,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRate("X", 50000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRate("X", 50000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(L"X", 50000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRate(Aerotech.Ensemble.AxisMask,System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRate(AxisMask.A0|AxisMask.A2, new double[]{50000, 50000});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRate(AxisMask.A0 Or AxisMask.A2, New Double(){50000, 50000})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampRate(Aerotech.Ensemble.AxisMask,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampRate(AxisMask.A0, 50000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampRate(AxisMask.A0, 50000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(AxisMask::A0, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTime(System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTime(1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTime(1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTimeAccel(System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTimeAccel(1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTimeAccel(1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTimeDecel(System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTimeDecel(1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTimeDecel(1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTime(System.Int32[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTime(new int[]{0, 2}, new double[]{1, 1});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTime(New Integer(){0, 2}, New Double(){1, 1})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTime(System.Int32,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTime(0, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTime(0, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTime(System.String[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTime(new string[]{"X", "Z"}, new double[]{1, 1});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTime(New String(){"X", "Z"}, New Double(){1, 1})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTime(System.String,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTime("X", 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTime("X", 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTime(Aerotech.Ensemble.AxisMask,System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTime(AxisMask.A0|AxisMask.A2, new double[]{1, 1});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTime(AxisMask.A0 Or AxisMask.A2, New Double(){1, 1})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(AxisMask::A0|AxisMask::A2, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.RampTime(Aerotech.Ensemble.AxisMask,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.RampTime(AxisMask.A0, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.RampTime(AxisMask.A0, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(AxisMask::A0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.SetExtPos(System.Int32,System.Double)">
            <summary>Sets an arbitrary position value, in encoder counts, in external position register.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set in external position register.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SETEXTPOS_Command.html">SETEXTPOS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.SetExtPos(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.SetExtPos(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;SetExtPos(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.SetExtPos(System.String,System.Double)">
            <summary>Sets an arbitrary position value, in encoder counts, in external position register.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set in external position register.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SETEXTPOS_Command.html">SETEXTPOS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.SetExtPos("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.SetExtPos("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;SetExtPos(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosOffsetSet(System.Int32,System.Double)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.PosOffsetSet(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.PosOffsetSet(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosOffsetSet(System.String,System.Double)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.PosOffsetSet("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.PosOffsetSet("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosOffsetClear(System.Int32)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.PosOffsetClear(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.PosOffsetClear(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetClear(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosOffsetClear(System.String)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.PosOffsetClear("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.PosOffsetClear("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetClear(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.ScaleFactorSet(System.Int32,System.Double)">
            <summary>Sets or clears the scale factor for an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The scale factor for the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SCALEFACTOR_Command.html">SCALEFACTOR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.ScaleFactorSet(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.ScaleFactorSet(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;ScaleFactorSet(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.ScaleFactorSet(System.String,System.Double)">
            <summary>Sets or clears the scale factor for an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The scale factor for the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SCALEFACTOR_Command.html">SCALEFACTOR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.ScaleFactorSet("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.ScaleFactorSet("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;ScaleFactorSet(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.ScaleFactorClear(System.Int32)">
            <summary>Sets or clears the scale factor for an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SCALEFACTOR_Command.html">SCALEFACTOR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.ScaleFactorClear(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.ScaleFactorClear(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;ScaleFactorClear(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.ScaleFactorClear(System.String)">
            <summary>Sets or clears the scale factor for an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SCALEFACTOR_Command.html">SCALEFACTOR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.ScaleFactorClear("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.ScaleFactorClear("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;ScaleFactorClear(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Reconcile(System.Int32[])">
            <summary>Reconciles the position of the axes in the list on the plane to servo position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RECONCILE_Command.html">RECONCILE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Reconcile(new int[]{0, 2});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Reconcile(New Integer(){0, 2})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Reconcile(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Reconcile(System.Int32)">
            <summary>Reconciles the position of the axes in the list on the plane to servo position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RECONCILE_Command.html">RECONCILE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Reconcile(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Reconcile(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Reconcile(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Reconcile(System.String[])">
            <summary>Reconciles the position of the axes in the list on the plane to servo position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RECONCILE_Command.html">RECONCILE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Reconcile(new string[]{"X", "Z"});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Reconcile(New String(){"X", "Z"})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Reconcile(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Reconcile(System.String)">
            <summary>Reconciles the position of the axes in the list on the plane to servo position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RECONCILE_Command.html">RECONCILE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Reconcile("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Reconcile("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Reconcile(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.Reconcile(Aerotech.Ensemble.AxisMask)">
            <summary>Reconciles the position of the axes in the list on the plane to servo position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/RECONCILE_Command.html">RECONCILE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.Reconcile(AxisMask.A0|AxisMask.A2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.Reconcile(AxisMask.A0 Or AxisMask.A2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Reconcile(AxisMask::A0|AxisMask::A2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.TimeScale(System.Double)">
            <summary>Specifies the time scale to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Percentage">The percentage timescaling, 1 - 200.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/TIMESCALE_Command.html">TIMESCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Motion.Setup.TimeScale(100);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Motion.Setup.TimeScale(100)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;TimeScale(100);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.Int32)">
            <summary>Retrieves the POSCAP position.</summary>
            <param name="axisIndex">The index of the axis on which to execute the command.</param>
            <returns>The captured position.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.Int32,System.Boolean)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisIndex">The index of the axis on which to execute the command.</param>
            <param name="reArm">Whether the position capture should be armed after the read.</param>
            <returns>The captured position.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.Int32[])">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisIndexes">The indexes of the axes on which to execute the command.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.Int32[],System.Boolean)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisIndexes">The indexes of the axes on which to execute the command.</param>
            <param name="reArm">Whether the position capture should be armed after the read.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(Aerotech.Ensemble.AxisMask)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisMask">The mask representing on which axes to execute the commands.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(Aerotech.Ensemble.AxisMask,System.Boolean)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisMask">The mask representing on which axes to execute the commands.</param>
            <param name="reArm">Whether the position capture should be armed after the read.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.String)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisName">The name of the axis on which to execute the command.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.String,System.Boolean)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisName">The name of the axis on which to execute the command.</param>
            <param name="reArm">Whether the position capture should be armed after the read.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.String[])">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisNames">The names of the axes on which to execute the command.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.MotionSetupCommands.PosCap(System.String[],System.Boolean)">
            <summary>Retrieves the POSCAP positions.</summary>
            <param name="axisNames">The names of the axes on which to execute the command.</param>
            <param name="reArm">Whether the position capture should be armed after the read.</param>
            <returns>The captured positions.</returns>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.RegisterCommands">
            <summary>Contains the Register Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.Lock(Aerotech.Ensemble.Commands.Semaphores)">
            <summary>Locks a specified semaphore.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Semaphore">The semaphore to lock.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/LOCK_Command.html">LOCK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Register.Lock(Semaphores.GlobalIntegers);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Register.Lock(Semaphores.GlobalIntegers)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Register-&gt;Lock(Semaphores::GlobalIntegers);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.UnLock(Aerotech.Ensemble.Commands.Semaphores)">
            <summary>Unlocks a specified semaphore.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="RegSet">The semaphore to unlock.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/UNLOCK_Command.html">UNLOCK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Register.UnLock(Semaphores.GlobalIntegers);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Register.UnLock(Semaphores.GlobalIntegers)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Register-&gt;UnLock(Semaphores::GlobalIntegers);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.WriteIntegerGlobal(System.Int32,System.Int32)">
            <summary>Provides access to the global integer variable (register) set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="RegNumber">The variable (register) number in the set.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/IGLOBAL_Function.html">IGLOBAL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Register.WriteIntegerGlobal(0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Register.WriteIntegerGlobal(0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Register-&gt;WriteIntegerGlobal(0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.ReadIntegerGlobal(System.Int32)">
            <summary>Provides access to the global integer variable (register) set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="RegNumber">The variable (register) number in the set.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/IGLOBAL_Function.html">IGLOBAL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.Register.ReadIntegerGlobal(0));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.Register.ReadIntegerGlobal(0))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;Register-&gt;ReadIntegerGlobal(0));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.WriteDoubleGlobal(System.Int32,System.Double)">
            <summary>Provides access to the global double variable (register) set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="RegNumber">The variable (register) number in the set.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DGLOBAL_Function.html">DGLOBAL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Register.WriteDoubleGlobal(0, 3.1415927);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Register.WriteDoubleGlobal(0, 3.1415927)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Register-&gt;WriteDoubleGlobal(0, 3.1415927);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.ReadDoubleGlobal(System.Int32)">
            <summary>Provides access to the global double variable (register) set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="RegNumber">The variable (register) number in the set.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DGLOBAL_Function.html">DGLOBAL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.Register.ReadDoubleGlobal(0));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.Register.ReadDoubleGlobal(0))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;Register-&gt;ReadDoubleGlobal(0));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.ReadIntegers(System.Int32,System.Int32)">
            <summary>
            Reads multiple values from IntegerRegisters
            </summary>
            <param name="address">The address to start reading at</param>
            <param name="count">The amount of integers to read</param>
            <returns>The values in the registers</returns>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.ReadIntegers(System.Int32,System.Int32,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Reads multiple values from IntegerRegisters
            </summary>
            <param name="address">The address to start reading at</param>
            <param name="count">The amount of integers to read</param>
            <param name="progressChangedEventHandler">The delegate that gets called to provide progress for retrieving registers</param>
            <returns>The values in the registers</returns>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.ReadDoubles(System.Int32,System.Int32)">
            <summary>
            Reads multiple values from DoubleRegisters
            </summary>
            <param name="address">The address to start reading at</param>
            <param name="count">The amount of doubles to read</param>
            <returns>The values in the registers</returns>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.ReadDoubles(System.Int32,System.Int32,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Reads multiple values from DoubleRegisters
            </summary>
            <param name="address">The address to start reading at</param>
            <param name="count">The amount of doubles to read</param>
            <param name="progressChangedEventHandler">The delegate that gets called to provide progress for retrieving registers</param>
            <returns>The values in the registers</returns>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.WriteIntegers(System.Int32,System.Int32[])">
            <summary>
            Writes multiple values to IntegerRegisters
            </summary>
            <param name="address">The address to start writing at</param>
            <param name="values">The values to write</param>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.WriteIntegers(System.Int32,System.Int32[],System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Writes multiple values to IntegerRegisters
            </summary>
            <param name="address">The address to start writing at</param>
            <param name="values">The values to write</param>
            <param name="progressChangedEventHandler">The delegate that gets called to provide progress for writing the registers</param>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.WriteDoubles(System.Int32,System.Double[])">
            <summary>
            Writes multiple values to DoubleRegisters
            </summary>
            <param name="address">The address to start writing at</param>
            <param name="values">The values to write</param>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.RegisterCommands.WriteDoubles(System.Int32,System.Double[],System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Writes multiple values to DoubleRegisters
            </summary>
            <param name="address">The address to start writing at</param>
            <param name="values">The values to write</param>
            <param name="progressChangedEventHandler">The delegate that gets called to provide progress for writing the registers</param>
            <remarks>
            <para>This command is optimized for transfer of large amounts of data.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.IOCommands">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.AnalogInput(System.Int32,System.Int32)">
            <summary>Reads the analog input value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the analog input.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="Channel">The analog channel to get the value of.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AIN_Function.html">AIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.IO.AnalogInput(0, 1));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.IO.AnalogInput(0, 1))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;AnalogInput(0, 1));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.AnalogInput(System.String,System.Int32)">
            <summary>Reads the analog input value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the analog input.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="Channel">The analog channel to get the value of.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AIN_Function.html">AIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.IO.AnalogInput("X", 1));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.IO.AnalogInput("X", 1))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;AnalogInput(L"X", 1));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.AnalogOutput(System.Int32,System.Int32[],System.Double[])">
            <summary>Sets the value of the analog output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Channel">The analog channel to set the value of.</param><param name="Value">The value of the analog output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AOUT_Command.html">AOUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.AnalogOutput(0, new int[]{0, 1}, new double[]{1.25, 0.0});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.AnalogOutput(0, New Integer(){0, 1}, New Double(){1.25, 0.0})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;AnalogOutput(0, gcnew array&lt;int&gt;{0, 1}, gcnew array&lt;double&gt;{1.25, 0.0});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.AnalogOutput(System.String,System.Int32[],System.Double[])">
            <summary>Sets the value of the analog output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Channel">The analog channel to set the value of.</param><param name="Value">The value of the analog output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/AOUT_Command.html">AOUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.AnalogOutput("X", new int[]{0, 1}, new double[]{1.25, 0.0});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.AnalogOutput("X", New Integer(){0, 1}, New Double(){1.25, 0.0})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;AnalogOutput(L"X", gcnew array&lt;int&gt;{0, 1}, gcnew array&lt;double&gt;{1.25, 0.0});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalInput(System.Int32,System.Int32)">
            <summary>Reads the digital input value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the digital input.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port from which to read the value.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DIN_Function.html">DIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.IO.DigitalInput(0, 0));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.IO.DigitalInput(0, 0))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInput(0, 0));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalInput(System.String,System.Int32)">
            <summary>Reads the digital input value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the digital input.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port from which to read the value.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DIN_Function.html">DIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.IO.DigitalInput("X", 0));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.IO.DigitalInput("X", 0))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInput(L"X", 0));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalInputBit(System.Int32,System.Int32,System.Int32)">
            <summary>Reads the digital input value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the digital input.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port from which to read the value.</param><param name="Bit">The bit to read.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DIN_Function.html">DIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.IO.DigitalInputBit(0, 0, 2));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.IO.DigitalInputBit(0, 0, 2))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInputBit(0, 0, 2));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalInputBit(System.String,System.Int32,System.Int32)">
            <summary>Reads the digital input value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the digital input.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port from which to read the value.</param><param name="Bit">The bit to read.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DIN_Function.html">DIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.IO.DigitalInputBit("X", 0, 2));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.IO.DigitalInputBit("X", 0, 2))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInputBit(L"X", 0, 2));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalOutputEntire(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the digital output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port on which to set the value.</param><param name="Value">The value to set the port to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DOUT_Command.html">DOUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.DigitalOutputEntire(0, 0, 7);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.DigitalOutputEntire(0, 0, 7)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;DigitalOutputEntire(0, 0, 7);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalOutputEntire(System.String,System.Int32,System.Int32)">
            <summary>Sets the digital output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port on which to set the value.</param><param name="Value">The value to set the port to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DOUT_Command.html">DOUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.DigitalOutputEntire("X", 0, 7);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.DigitalOutputEntire("X", 0, 7)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;DigitalOutputEntire(L"X", 0, 7);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalOutputByBits(System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>Sets the digital output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port on which to set the value.</param><param name="Bits">The bits to set.</param><param name="Values">The values to set the bits to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DOUT_Command.html">DOUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.DigitalOutputByBits(0, 0, new int[]{14, 22}, new int[]{0, 1});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.DigitalOutputByBits(0, 0, New Integer(){14, 22}, New Integer(){0, 1})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;DigitalOutputByBits(0, 0, gcnew array&lt;int&gt;{14, 22}, gcnew array&lt;int&gt;{0, 1});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.DigitalOutputByBits(System.String,System.Int32,System.Int32[],System.Int32[])">
            <summary>Sets the digital output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Port">The port on which to set the value.</param><param name="Bits">The bits to set.</param><param name="Values">The values to set the bits to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DOUT_Command.html">DOUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.DigitalOutputByBits("X", 0, new int[]{14, 22}, new int[]{0, 1});
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.DigitalOutputByBits("X", 0, New Integer(){14, 22}, New Integer(){0, 1})
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;DigitalOutputByBits(L"X", 0, gcnew array&lt;int&gt;{14, 22}, gcnew array&lt;int&gt;{0, 1});
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.Brake(System.Int32[],Aerotech.Ensemble.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the brake to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.Brake(new int[]{0, 2}, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.Brake(New Integer(){0, 2}, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;Brake(gcnew array&lt;int&gt;{0, 2}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.Brake(System.Int32,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the brake to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.Brake(0, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.Brake(0, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;Brake(0, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.Brake(System.String[],Aerotech.Ensemble.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the brake to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.Brake(new string[]{"X", "Z"}, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.Brake(New String(){"X", "Z"}, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;Brake(gcnew array&lt;String^&gt;{L"X", L"Z"}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.Brake(System.String,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the brake to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.Brake("X", OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.Brake("X", OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;Brake(L"X", OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.IOCommands.Brake(Aerotech.Ensemble.AxisMask,Aerotech.Ensemble.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the brake to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.IO.Brake(AxisMask.A0|AxisMask.A2, OnOff.On);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.IO.Brake(AxisMask.A0 Or AxisMask.A2, OnOff.On)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;IO-&gt;Brake(AxisMask::A0|AxisMask::A2, OnOff::On);
</code></example>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.StatusCommands">
            <summary>Contains the Status Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.StatusCommands.PositionMarkerLatched(System.Int32)">
            <summary>Gets the position feedback latched when the marker signal occurred during a home.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The latched marker position.</returns><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PMRKLATCH_Function.html">PMRKLATCH</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.Status.PositionMarkerLatched(0));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.Status.PositionMarkerLatched(0))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;PositionMarkerLatched(0));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.StatusCommands.PositionMarkerLatched(System.String)">
            <summary>Gets the position feedback latched when the marker signal occurred during a home.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The latched marker position.</returns><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PMRKLATCH_Function.html">PMRKLATCH</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.Status.PositionMarkerLatched("X"));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.Status.PositionMarkerLatched("X"))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;PositionMarkerLatched(L"X"));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.StatusCommands.EtherStatus">
            <summary>Gets the Ethernet status.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The status of the Ethernet code.</returns><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ETHERSTATUS_Function.html">ETHERSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.Status.EtherStatus());
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.Status.EtherStatus())
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;EtherStatus());
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.StatusCommands.GetMode(Aerotech.Ensemble.Commands.ModeType)">
            <summary>Gets the setting of one of the modal variables.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The requested value.</returns><param name="ModeType">The type of information that is requested.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/GETMODE_Function.html">GETMODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.Status.GetMode(ModeType.WaitMode));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.Status.GetMode(ModeType.WaitMode))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;GetMode(ModeType::WaitMode));
</code></example>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.TuningCommands">
            <summary>Contains the Tuning Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.SetGain(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sets all the servo control loop gains.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="GainKp">The GainKp value.</param><param name="GainKi">The GainKi value.</param><param name="GainKpos">The GainKpos value.</param><param name="GainAff">The GainAff value.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SETGAIN_Command.html">SETGAIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.SetGain(0, 100000, 1200, 48, 150000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.SetGain(0, 100000, 1200, 48, 150000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;SetGain(0, 100000, 1200, 48, 150000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.SetGain(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sets all the servo control loop gains.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="GainKp">The GainKp value.</param><param name="GainKi">The GainKi value.</param><param name="GainKpos">The GainKpos value.</param><param name="GainAff">The GainAff value.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/SETGAIN_Command.html">SETGAIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.SetGain("X", 100000, 1200, 48, 150000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.SetGain("X", 100000, 1200, 48, 150000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;SetGain(L"X", 100000, 1200, 48, 150000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.MComm(System.Int32,System.Double)">
            <summary>Sends a direct current command to the servo control loop.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MCOMM_Command.html">MCOMM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.MComm(0, 2.5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.MComm(0, 2.5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;MComm(0, 2.5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.MComm(System.String,System.Double)">
            <summary>Sends a direct current command to the servo control loop.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MCOMM_Command.html">MCOMM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.MComm("X", 2.5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.MComm("X", 2.5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;MComm(L"X", 2.5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.MSet(System.Int32,System.Double,System.Double)">
            <summary>Generates an open-loop current command.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><param name="Angle">The electrical angle.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MSET_Command.html">MSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.MSet(0, 2.5, 60);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.MSet(0, 2.5, 60)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;MSet(0, 2.5, 60);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.MSet(System.String,System.Double,System.Double)">
            <summary>Generates an open-loop current command.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><param name="Angle">The electrical angle.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/MSET_Command.html">MSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.MSet("X", 2.5, 60);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.MSet("X", 2.5, 60)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;MSet(L"X", 2.5, 60);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.Oscillate(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">The distance to move the axis.</param><param name="Frequency">The frequency at which to move the axis.</param><param name="Cycles">The number of cycles to complete.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(0, 50000, 1.0, 2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.Oscillate(System.String,System.Double,System.Double,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">The distance to move the axis.</param><param name="Frequency">The frequency at which to move the axis.</param><param name="Cycles">The number of cycles to complete.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(L"X", 50000, 1.0, 2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.Oscillate(System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">The distance to move the axis.</param><param name="Frequency">The frequency at which to move the axis.</param><param name="Cycles">The number of cycles to complete.</param><param name="NumFreqs">
								The number of frequencies to execute (multiples of <paramref name="Frequency"></paramref>).
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2, 3);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2, 3)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(0, 50000, 1.0, 2, 3);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.Oscillate(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">The distance to move the axis.</param><param name="Frequency">The frequency at which to move the axis.</param><param name="Cycles">The number of cycles to complete.</param><param name="NumFreqs">
								The number of frequencies to execute (multiples of <paramref name="Frequency"></paramref>).
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2, 3);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2, 3)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(L"X", 50000, 1.0, 2, 3);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.LoopTrans(System.Int32,Aerotech.Ensemble.Commands.LoopTransmissionMode,System.Double,System.Double,Aerotech.Ensemble.Commands.LoopTransmissionType)">
            <summary>Initiates loop transmission mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Sets the loop transmission mode to On or Off.</param><param name="Amplitude">Sets the maximum loop output as a percentage.</param><param name="Frequency">The frequency of the disturbance generated, in Hertz.</param><param name="Type">The type of loop transmission to run.</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.LoopTrans(0, LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.LoopTrans(0, LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;LoopTrans(0, LoopTransmissionMode::Sinusoid, 12.5, 75, LoopTransmissionType::OpenLoop);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.TuningCommands.LoopTrans(System.String,Aerotech.Ensemble.Commands.LoopTransmissionMode,System.Double,System.Double,Aerotech.Ensemble.Commands.LoopTransmissionType)">
            <summary>Initiates loop transmission mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Sets the loop transmission mode to On or Off.</param><param name="Amplitude">Sets the maximum loop output as a percentage.</param><param name="Frequency">The frequency of the disturbance generated, in Hertz.</param><param name="Type">The type of loop transmission to run.</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.Tuning.LoopTrans("X", LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.Tuning.LoopTrans("X", LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;Tuning-&gt;LoopTrans(L"X", LoopTransmissionMode::Sinusoid, 12.5, 75, LoopTransmissionType::OpenLoop);
</code></example>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.DataAcquisitionCommands">
            <summary>Contains the DataAcquisition Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.ArraySetup(System.Int32,System.Int32)">
            <summary>
						Enables data collection.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="NumberOfSamples">The number of samples to be collected. After the specified number of samples are collected, data acquisition turns off automatically. On multi-axis drives, multiple samples can be collected at each trigger event, so this argument must specify the number of data samples to store, not the number of trigger events.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ ON_Command.html">DATAACQ ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.ArraySetup(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.ArraySetup(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArraySetup(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.ArraySetup(System.String,System.Int32)">
            <summary>
						Enables data collection.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="NumberOfSamples">The number of samples to be collected. After the specified number of samples are collected, data acquisition turns off automatically. On multi-axis drives, multiple samples can be collected at each trigger event, so this argument must specify the number of data samples to store, not the number of trigger events.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ ON_Command.html">DATAACQ ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.ArraySetup("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.ArraySetup("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArraySetup(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.ArrayRead(System.Int32,System.Int32,System.Int32)">
            <summary>
						Transfers drive array values into the specified controller array variables.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="VariableStart">The starting location of IGLOBAL where captured data will be read into.</param><param name="NumberOfSamples">The number of samples to be read back.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ READ_Command.html">DATAACQ READ</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.ArrayRead(0, 0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.ArrayRead(0, 0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArrayRead(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.ArrayRead(System.String,System.Int32,System.Int32)">
            <summary>
						Transfers drive array values into the specified controller array variables.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="VariableStart">The starting location of IGLOBAL where captured data will be read into.</param><param name="NumberOfSamples">The number of samples to be read back.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ READ_Command.html">DATAACQ READ</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.ArrayRead("X", 0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.ArrayRead("X", 0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArrayRead(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.Input(System.Int32,System.Int32)">
            <summary>
						Specifies the data element collected when a trigger occurs.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="SourceSignal">The source signal to be collected.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ INPUT_Command.html">DATAACQ INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.Input(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.Input(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;Input(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.Input(System.String,System.Int32)">
            <summary>
						Specifies the data element collected when a trigger occurs.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="SourceSignal">The source signal to be collected.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ INPUT_Command.html">DATAACQ INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.Input("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.Input("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;Input(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.Trigger(System.Int32,System.Int32)">
            <summary>
						Specifies which signal will be monitored to collect data.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TriggerSignal">The signal to be triggered on.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ TRIGGER_Command.html">DATAACQ TRIGGER</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.Trigger(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.Trigger(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;Trigger(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.Trigger(System.String,System.Int32)">
            <summary>
						Specifies which signal will be monitored to collect data.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TriggerSignal">The signal to be triggered on.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ TRIGGER_Command.html">DATAACQ TRIGGER</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.Trigger("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.Trigger("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;Trigger(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.Off(System.Int32)">
            <summary>
						Turns off data acquisition. All previously specified DATAACQ command configurations are cleared and must be re-specified if required.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ OFF_Command.html">DATAACQ OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.Off(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.Off(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;Off(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.DataAcquisitionCommands.Off(System.String)">
            <summary>
						Turns off data acquisition. All previously specified DATAACQ command configurations are cleared and must be re-specified if required.
					</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/DATAACQ OFF_Command.html">DATAACQ OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.DataAcquisition.Off("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.DataAcquisition.Off("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;DataAcquisition-&gt;Off(L"X");
</code></example>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.PSOCommands">
            <summary>Contains the PSO Commands</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Status(System.Int32)">
            <summary>Gets the PSO status information.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The PSO status bits.</returns><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOSTATUS_Function.html">PSOSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.PSO.Status(0));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.PSO.Status(0))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;PSO-&gt;Status(0));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Status(System.String)">
            <summary>Gets the PSO status information.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The PSO status bits.</returns><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOSTATUS_Function.html">PSOSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
Console.WriteLine(myController.Commands.PSO.Status("X"));
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
Console.WriteLine(myController.Commands.PSO.Status("X"))
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
Console::WriteLine(myController-&gt;Commands-&gt;PSO-&gt;Status(L"X"));
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Array(System.Int32,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.Array(0, 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.Array(0, 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;Array(0, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Array(System.String,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.Array("X", 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.Array("X", 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;Array(L"X", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectDistance(System.Int32,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectDistance(0, 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectDistance(0, 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectDistance(0, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectDistance(System.String,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectDistance("X", 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectDistance("X", 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectDistance(L"X", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectLaser(System.Int32,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectLaser(0, 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectLaser(0, 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectLaser(0, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectLaser(System.String,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectLaser("X", 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectLaser("X", 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectLaser(L"X", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectWindow1(System.Int32,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectWindow1(0, 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectWindow1(0, 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectWindow1(0, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectWindow1(System.String,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectWindow1("X", 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectWindow1("X", 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectWindow1(L"X", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectWindow2(System.Int32,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectWindow2(0, 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectWindow2(0, 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectWindow2(0, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.ArrayFifoSelectWindow2(System.String,System.Int32,System.Int32)">
            <summary>Sends array mode distances into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index on which to start.</param><param name="NumberOfPoints">The number of points to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOARRAY_Command.html">PSOARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.ArrayFifoSelectWindow2("X", 0, 5);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.ArrayFifoSelectWindow2("X", 0, 5)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;ArrayFifoSelectWindow2(L"X", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Control(System.Int32,Aerotech.Ensemble.Commands.PsoMode)">
            <summary>Enables and disables the PSO hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">The mode of operation of the PSO hardware.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOCONTROL_Command.html">PSOCONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.Control(0, PsoMode.Reset);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.Control(0, PsoMode.Reset)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;Control(0, PsoMode::Reset);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Control(System.String,Aerotech.Ensemble.Commands.PsoMode)">
            <summary>Enables and disables the PSO hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">The mode of operation of the PSO hardware.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOCONTROL_Command.html">PSOCONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.Control("X", PsoMode.Reset);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.Control("X", PsoMode.Reset)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;Control(L"X", PsoMode::Reset);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.DistanceArray(System.Int32)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.DistanceArray(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.DistanceArray(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;DistanceArray(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.DistanceArray(System.String)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.DistanceArray("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.DistanceArray("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;DistanceArray(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.DistanceFixed(System.Int32,System.Double)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="FireDistance">The distance an axis must travel before a firing event triggers the pulse generator.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.DistanceFixed(0, 20);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.DistanceFixed(0, 20)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;DistanceFixed(0, 20);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.DistanceFixed(System.String,System.Double)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="FireDistance">The distance an axis must travel before a firing event triggers the pulse generator.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.DistanceFixed("X", 20);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.DistanceFixed("X", 20)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;DistanceFixed(L"X", 20);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulse(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE_Command.html">PSOOUTPUT PULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulse(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulse(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulse(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE_Command.html">PSOOUTPUT PULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulse("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulse("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseBitMask(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE BIT MASK_Command.html">PSOOUTPUT PULSE BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseBitMask(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseBitMask(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseBitMask(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseBitMask(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE BIT MASK_Command.html">PSOOUTPUT PULSE BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseBitMask("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseBitMask("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseBitMask(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputToggle(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT TOGGLE_Command.html">PSOOUTPUT TOGGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputToggle(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputToggle(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputToggle(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputToggle(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT TOGGLE_Command.html">PSOOUTPUT TOGGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputToggle("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputToggle("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputToggle(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputWindow(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT WINDOW_Command.html">PSOOUTPUT WINDOW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputWindow(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputWindow(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputWindow(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputWindow(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT WINDOW_Command.html">PSOOUTPUT WINDOW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputWindow("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputWindow("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputWindow(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowMask(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowMask(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowMask(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMask(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowMask(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowMask("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowMask("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMask(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowMaskHard(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowMaskHard(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowMaskHard(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHard(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowMaskHard(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowMaskHard("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowMaskHard("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHard(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowMaskEdgeMode(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">
								Specifies the pulse output behavior. This argument is required if the EDGE keyword is used.
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskEdgeMode(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowMaskEdgeMode(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">
								Specifies the pulse output behavior. This argument is required if the EDGE keyword is used.
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskEdgeMode(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowBitMask(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowBitMask(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowBitMask(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMask(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowBitMask(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowBitMask("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowBitMask("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMask(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowBitMaskEdgeMode(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">
								Specifies the pulse output behavior. This argument is required if the EDGE keyword is used.
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMaskEdgeMode(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseWindowBitMaskEdgeMode(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">
								Specifies the pulse output behavior. This argument is required if the EDGE keyword is used.
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMaskEdgeMode(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputControl(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Used on all drives to select the mode of PSO output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT CONTROL_Command.html">PSOOUTPUT CONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputControl(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputControl(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputControl(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputControl(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Used on all drives to select the mode of PSO output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT CONTROL_Command.html">PSOOUTPUT CONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputControl("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputControl("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputControl(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputBitMap(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputBitMap(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputBitMap(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputBitMap(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputBitMap("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputBitMap("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputBitMap(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">
								Specifies the mode of operation for the BIT MAP functionality. If this argument is omitted or set to 0, only the most-significant bit (bit 31) of each array value is used. If set to 1, all 32 bits of each array value is used.
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputBitMap(0, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputBitMap(0, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputBitMap(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">
								Specifies the mode of operation for the BIT MAP functionality. If this argument is omitted or set to 0, only the most-significant bit (bit 31) of each array value is used. If set to 1, all 32 bits of each array value is used.
							</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputBitMap("X", 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputBitMap("X", 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseExtSync(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE EXTSYNC_Command.html">PSOOUTPUT PULSE EXTSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseExtSync(0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseExtSync(0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseExtSync(0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.OutputPulseExtSync(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOOUTPUT PULSE EXTSYNC_Command.html">PSOOUTPUT PULSE EXTSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.OutputPulseExtSync("X");
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.OutputPulseExtSync("X")
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseExtSync(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Pulse(System.Int32,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.Pulse(0, 100, 40);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.Pulse(0, 100, 40)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;Pulse(0, 100, 40);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.Pulse(System.String,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.Pulse("X", 100, 40);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.Pulse("X", 100, 40)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;Pulse(L"X", 100, 40);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.PulseCyclesOrDelayCyclesOnly(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly(0, 100, 40, 2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly(0, 100, 40, 2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesOnly(0, 100, 40, 2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.PulseCyclesOrDelayCyclesOnly(System.String,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly("X", 100, 40, 2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly("X", 100, 40, 2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesOnly(L"X", 100, 40, 2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.PulseCyclesOrDelayDelayOnly(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly(0, 100, 40, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly(0, 100, 40, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayDelayOnly(0, 100, 40, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.PulseCyclesOrDelayDelayOnly(System.String,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly("X", 100, 40, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly("X", 100, 40, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayDelayOnly(L"X", 100, 40, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.PulseCyclesOrDelayCyclesAndDelay(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay(0, 100, 40, 2, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay(0, 100, 40, 2, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesAndDelay(0, 100, 40, 2, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.PulseCyclesOrDelayCyclesAndDelay(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay("X", 100, 40, 2, 0);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay("X", 100, 40, 2, 0)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesAndDelay(L"X", 100, 40, 2, 0);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackInput(System.Int32,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackInput(0, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackInput(0, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(0, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackInput(System.String,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackInput("X", PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackInput("X", PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(L"X", PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackInput(System.Int32,Aerotech.Ensemble.Commands.PsoEncoder,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">Ensemble HLe and HPe only. The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackInput(0, PsoEncoder.Primary, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackInput(0, PsoEncoder.Primary, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(0, PsoEncoder::Primary, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackInput(System.String,Aerotech.Ensemble.Commands.PsoEncoder,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">Ensemble HLe and HPe only. The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackInput("X", PsoEncoder.Primary, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackInput("X", PsoEncoder.Primary, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(L"X", PsoEncoder::Primary, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackInput(System.Int32,Aerotech.Ensemble.Commands.PsoEncoder,Aerotech.Ensemble.Commands.PsoEncoder,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">Ensemble HLe and HPe only. The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><param name="Source3">Ensemble HLe and HPe only. The encoder to use as the source for the third axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackInput(0, PsoEncoder.Primary, PsoEncoder.Primary, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackInput(0, PsoEncoder.Primary, PsoEncoder.Primary, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(0, PsoEncoder::Primary, PsoEncoder::Primary, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackInput(System.String,Aerotech.Ensemble.Commands.PsoEncoder,Aerotech.Ensemble.Commands.PsoEncoder,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">Ensemble HLe and HPe only. The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><param name="Source3">Ensemble HLe and HPe only. The encoder to use as the source for the third axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackInput("X", PsoEncoder.Primary, PsoEncoder.Primary, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackInput("X", PsoEncoder.Primary, PsoEncoder.Primary, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(L"X", PsoEncoder::Primary, PsoEncoder::Primary, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackReset(System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="RBitMask">The mask of possible conditions that can hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK RESET_Command.html">PSOTRACK RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackReset(0, 3);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackReset(0, 3)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackReset(0, 3);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackReset(System.String,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="RBitMask">The mask of possible conditions that can hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK RESET_Command.html">PSOTRACK RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackReset("X", 3);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackReset("X", 3)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackReset(L"X", 3);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackScale(System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackScale(0, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackScale(0, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackScale(System.String,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackScale("X", 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackScale("X", 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackScale(System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackScale(0, 1, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackScale(0, 1, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(0, 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackScale(System.String,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackScale("X", 1, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackScale("X", 1, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(L"X", 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackScale(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><param name="PreScale3">The divisor applied to the encoder input to the third PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackScale(0, 1, 1, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackScale(0, 1, 1, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(0, 1, 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackScale(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><param name="PreScale3">The divisor applied to the encoder input to the third PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackScale("X", 1, 1, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackScale("X", 1, 1, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(L"X", 1, 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackDirection(System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="DBitMask">The mask of possible directions to be suppressed when tracking position.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK DIRECTION_Command.html">PSOTRACK DIRECTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackDirection(0, 3);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackDirection(0, 3)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackDirection(0, 3);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.TrackDirection(System.String,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="DBitMask">The mask of possible directions to be suppressed when tracking position.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOTRACK DIRECTION_Command.html">PSOTRACK DIRECTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.TrackDirection("X", 3);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.TrackDirection("X", 3)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;TrackDirection(L"X", 3);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowOn(System.Int32,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowOn(0, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowOn(0, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowOn(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowOn(System.String,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowOn("X", 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowOn("X", 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowOn(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowOnInvert(System.Int32,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowOnInvert(0, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowOnInvert(0, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowOnInvert(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowOnInvert(System.String,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowOnInvert("X", 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowOnInvert("X", 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowOnInvert(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowOff(System.Int32,System.Int32)">
            <summary>Disables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW OFF_Command.html">PSOWINDOW OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowOff(0, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowOff(0, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowOff(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowOff(System.String,System.Int32)">
            <summary>Disables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW OFF_Command.html">PSOWINDOW OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowOff("X", 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowOff("X", 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowOff(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowInput(System.Int32,System.Int32,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="Source">The encoder source to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowInput(0, 1, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowInput(0, 1, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowInput(0, 1, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowInput(System.String,System.Int32,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="Source">The encoder source to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowInput("X", 1, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowInput("X", 1, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowInput(L"X", 1, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowInputInvert(System.Int32,System.Int32,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="Source">The encoder source to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowInputInvert(0, 1, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowInputInvert(0, 1, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowInputInvert(0, 1, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowInputInvert(System.String,System.Int32,Aerotech.Ensemble.Commands.PsoEncoder)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="Source">The encoder source to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowInputInvert("X", 1, PsoEncoder.Primary);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowInputInvert("X", 1, PsoEncoder.Primary)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowInputInvert(L"X", 1, PsoEncoder::Primary);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowReset(System.Int32,System.Int32,System.Int32)">
            <summary>Resets the window counter to 0 based on the encoder marker signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="BitMask">The mask of possible conditions that hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RESET_Command.html">PSOWINDOW RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowReset(0, 1, 2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowReset(0, 1, 2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowReset(0, 1, 2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowReset(System.String,System.Int32,System.Int32)">
            <summary>Resets the window counter to 0 based on the encoder marker signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="BitMask">The mask of possible conditions that hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RESET_Command.html">PSOWINDOW RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowReset("X", 1, 2);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowReset("X", 1, 2)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowReset(L"X", 1, 2);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowLoad(System.Int32,System.Int32,System.Int32)">
            <summary>Loads the specified window counter with a value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="Value">The value to load into the specified window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW LOAD_Command.html">PSOWINDOW LOAD</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowLoad(0, 1, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowLoad(0, 1, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowLoad(0, 1, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowLoad(System.String,System.Int32,System.Int32)">
            <summary>Loads the specified window counter with a value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="Value">The value to load into the specified window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW LOAD_Command.html">PSOWINDOW LOAD</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowLoad("X", 1, 10000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowLoad("X", 1, 10000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowLoad(L"X", 1, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowRangeArray(System.Int32,System.Int32)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowRangeArray(0, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowRangeArray(0, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArray(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowRangeArray(System.String,System.Int32)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowRangeArray("X", 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowRangeArray("X", 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArray(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowRangeArrayEdge(System.Int32,System.Int32,System.Double)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><param name="EdgeCode">An optional argument that restricts updating to one encoder direction.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowRangeArrayEdge(0, 1, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowRangeArrayEdge(0, 1, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArrayEdge(0, 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowRangeArrayEdge(System.String,System.Int32,System.Double)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><param name="EdgeCode">An optional argument that restricts updating to one encoder direction.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowRangeArrayEdge("X", 1, 1);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowRangeArrayEdge("X", 1, 1)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArrayEdge(L"X", 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowRange(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Specifies the low and high comparison values for specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="LowValue">The low position range for fixed window.</param><param name="HighValue">The high position range for fixed window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RANGE_Command.html">PSOWINDOW RANGE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowRange(0, 1, 5000, 22000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowRange(0, 1, 5000, 22000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowRange(0, 1, 5000, 22000);
</code></example>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.PSOCommands.WindowRange(System.String,System.Int32,System.Double,System.Double)">
            <summary>Specifies the low and high comparison values for specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ensemble CL, CP, MP, Epaq MR with MP controllers, and Lab must be set to 1. All other controllers can be set to 1 or 2.</param><param name="LowValue">The low position range for fixed window.</param><param name="HighValue">The high position range for fixed window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/PSOWINDOW RANGE_Command.html">PSOWINDOW RANGE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.Ensemble</li><li>Aerotech.Ensemble.Commands</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];
myController.Commands.PSO.WindowRange("X", 1, 5000, 22000);
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")
myController.Commands.PSO.WindowRange("X", 1, 5000, 22000)
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];
myController-&gt;Commands-&gt;PSO-&gt;WindowRange(L"X", 1, 5000, 22000);
</code></example>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemParameterCategory">
            <summary>Contains the System Parameters</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParameterCategory">
            <summary>
            The base type for categories containing parameters
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterCategory.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a user defined category
            </summary>
            <typeparam name="TType">A type derived from <see cref="T:Aerotech.Ensemble.Parameters.Parameter"></see></typeparam>
            <param name="parameters">The parameters to create the category from</param>
            <returns>
            	<para>
            		A <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see> that contains only the parameters given.
            	</para>
            </returns>
            <remarks>
            	<note>
            		If you give a <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see> to this method, it will <b>NOT</b> go recursively and get all
            		the parameters.
            	</note>
            	<note>
				If you give a <see cref="T:Aerotech.Ensemble.Parameters.BaseParameters"></see> to this method, it will <b>NOT</b> go and get the
				<see cref="P:Aerotech.Ensemble.Parameters.BaseParameters.Axes"></see> parameters.
			</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterCategory.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterCategory.All">
            <summary>
            Contains all the parameters in this category and its child categories
            </summary>
            <remarks>
            	<para>
            		This provides access to the parameters inside of this category by name.
            	</para>
            	<para>
            		In specific categories, you will be able to get the specific parameters.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterCategory.Objects">
            <summary>
            Provides access to the parameters
            </summary>
            <exclude></exclude>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterCategory.Categories">
            <summary>
            Gets the subcategories of this category.
            </summary>
            <remarks>
            	<para>
            		This prvoides access to the subcategories inside of this category by name.
            	</para>
            	<para>
            		In specific categories,  you will be able to get the specific categories.
            		See <see cref="T:Aerotech.Ensemble.Parameters.BaseParameters"></see> for an example.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.Calibration">
            <summary>Contains the Calibration Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.Communication">
            <summary>Contains the Communication Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.Joystick">
            <summary>Contains the Joystick Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.MemoryAllocation">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.User">
            <summary>Contains the User Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.TaskExecutionSetup">
            <summary>Allows access to the TaskExecutionSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.TaskExecutionSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.TaskExecutionSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;TaskExecutionSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/TaskExecutionSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">TaskExecutionSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.RequiredAxes">
            <summary>Allows access to the RequiredAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.RequiredAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.RequiredAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;RequiredAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/RequiredAxes.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">RequiredAxes</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.DisplayAxes">
            <summary>Allows access to the DisplayAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.DisplayAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.DisplayAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;DisplayAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DisplayAxes.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DisplayAxes</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.ExternalSyncFrequency">
            <summary>Allows access to the ExternalSyncFrequency Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.ExternalSyncFrequency;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.ExternalSyncFrequency

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;ExternalSyncFrequency;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ExternalSyncFrequency.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ExternalSyncFrequency</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemParameterCategory.SoftwareExternalFaultInput">
            <summary>Allows access to the SoftwareExternalFaultInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.SoftwareExternalFaultInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.SoftwareExternalFaultInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;SoftwareExternalFaultInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SoftwareExternalFaultInput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SoftwareExternalFaultInput</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCalibrationParameterCategory">
            <summary>Contains the Calibration Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCalibrationParameterCategory.CalibrationFile1D">
            <summary>Allows access to the CalibrationFile1D Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.Calibration.CalibrationFile1D;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.Calibration.CalibrationFile1D

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Calibration-&gt;CalibrationFile1D;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CalibrationFile1D.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CalibrationFile1D</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCalibrationParameterCategory.CalibrationFile2D">
            <summary>Allows access to the CalibrationFile2D Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.Calibration.CalibrationFile2D;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.Calibration.CalibrationFile2D

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Calibration-&gt;CalibrationFile2D;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CalibrationFile2D.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CalibrationFile2D</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory">
            <summary>Contains the Communication Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory.Ascii">
            <summary>Contains the ASCII Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory.EthernetIP">
            <summary>Contains the Ethernet/IP Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory.EthernetSockets">
            <summary>Contains the Ethernet Sockets Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory.Gpib">
            <summary>Contains the GPIB Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory.ModbusMaster">
            <summary>Contains the Modbus Master Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory.ModbusSlave">
            <summary>Contains the Modbus Slave Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationParameterCategory.RS232">
            <summary>Contains the RS-232 Parameters</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory">
            <summary>Contains the ASCII Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory.CommandSetup">
            <summary>Allows access to the CommandSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory.CommandTerminatingCharacter">
            <summary>Allows access to the CommandTerminatingCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandTerminatingCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandTerminatingCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandTerminatingCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandTerminatingCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandTerminatingCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory.CommandSuccessCharacter">
            <summary>Allows access to the CommandSuccessCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandSuccessCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandSuccessCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandSuccessCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandSuccessCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandSuccessCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory.CommandInvalidCharacter">
            <summary>Allows access to the CommandInvalidCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandInvalidCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandInvalidCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandInvalidCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandInvalidCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandInvalidCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory.CommandFaultCharacter">
            <summary>Allows access to the CommandFaultCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandFaultCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandFaultCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandFaultCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandFaultCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandFaultCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory.CommandTimeout">
            <summary>Allows access to the CommandTimeout Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandTimeout;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandTimeout

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandTimeout;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandTimeout.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandTimeout</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationAsciiParameterCategory.CommandTimeoutCharacter">
            <summary>Allows access to the CommandTimeoutCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandTimeoutCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandTimeoutCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandTimeoutCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandTimeoutCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandTimeoutCharacter</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory">
            <summary>Contains the Ethernet/IP Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1InputIntegers">
            <summary>Allows access to the Class1InputIntegers Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1InputIntegers;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1InputIntegers

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1InputIntegers;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1InputIntegers.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1InputIntegers</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1InputIntegersOffset">
            <summary>Allows access to the Class1InputIntegersOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1InputIntegersOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1InputIntegersOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1InputIntegersOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1InputIntegersOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1InputIntegersOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1OutputIntegers">
            <summary>Allows access to the Class1OutputIntegers Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1OutputIntegers;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1OutputIntegers

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1OutputIntegers;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1OutputIntegers.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1OutputIntegers</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1OutputIntegersOffset">
            <summary>Allows access to the Class1OutputIntegersOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1OutputIntegersOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1OutputIntegersOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1OutputIntegersOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1OutputIntegersOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1OutputIntegersOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1InputDoubles">
            <summary>Allows access to the Class1InputDoubles Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1InputDoubles;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1InputDoubles

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1InputDoubles;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1InputDoubles.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1InputDoubles</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1InputDoublesOffset">
            <summary>Allows access to the Class1InputDoublesOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1InputDoublesOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1InputDoublesOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1InputDoublesOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1InputDoublesOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1InputDoublesOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1OutputDoubles">
            <summary>Allows access to the Class1OutputDoubles Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1OutputDoubles;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1OutputDoubles

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1OutputDoubles;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1OutputDoubles.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1OutputDoubles</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetIPParameterCategory.Class1OutputDoublesOffset">
            <summary>Allows access to the Class1OutputDoublesOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetIP.Class1OutputDoublesOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetIP.Class1OutputDoublesOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetIP-&gt;Class1OutputDoublesOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Class1OutputDoublesOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Class1OutputDoublesOffset</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory">
            <summary>Contains the Ethernet Sockets Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket2RemoteIPAddress">
            <summary>Allows access to the Socket2RemoteIPAddress Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket2RemoteIPAddress;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket2RemoteIPAddress

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket2RemoteIPAddress;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket2RemoteIPAddress.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket2RemoteIPAddress</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket2Port">
            <summary>Allows access to the Socket2Port Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket2Port;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket2Port

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket2Port;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket2Port.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket2Port</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket2Setup">
            <summary>Allows access to the Socket2Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket2Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket2Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket2Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket2Setup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket2Setup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket2TransmissionSize">
            <summary>Allows access to the Socket2TransmissionSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket2TransmissionSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket2TransmissionSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket2TransmissionSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket2TransmissionSize.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket2TransmissionSize</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket3RemoteIPAddress">
            <summary>Allows access to the Socket3RemoteIPAddress Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket3RemoteIPAddress;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket3RemoteIPAddress

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket3RemoteIPAddress;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket3RemoteIPAddress.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket3RemoteIPAddress</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket3Port">
            <summary>Allows access to the Socket3Port Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket3Port;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket3Port

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket3Port;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket3Port.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket3Port</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket3Setup">
            <summary>Allows access to the Socket3Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket3Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket3Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket3Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket3Setup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket3Setup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket3TransmissionSize">
            <summary>Allows access to the Socket3TransmissionSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket3TransmissionSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket3TransmissionSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket3TransmissionSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket3TransmissionSize.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket3TransmissionSize</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket2Timeout">
            <summary>Allows access to the Socket2Timeout Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket2Timeout;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket2Timeout

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket2Timeout;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket2Timeout.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket2Timeout</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationEthernetSocketsParameterCategory.Socket3Timeout">
            <summary>Allows access to the Socket3Timeout Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.EthernetSockets.Socket3Timeout;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.EthernetSockets.Socket3Timeout

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;EthernetSockets-&gt;Socket3Timeout;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Socket3Timeout.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Socket3Timeout</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationGpibParameterCategory">
            <summary>Contains the GPIB Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationGpibParameterCategory.GpibTerminatingCharacter">
            <summary>Allows access to the GpibTerminatingCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Gpib.GpibTerminatingCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Gpib.GpibTerminatingCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Gpib-&gt;GpibTerminatingCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GpibTerminatingCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GpibTerminatingCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationGpibParameterCategory.GpibPrimaryAddress">
            <summary>Allows access to the GpibPrimaryAddress Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Gpib.GpibPrimaryAddress;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Gpib.GpibPrimaryAddress

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Gpib-&gt;GpibPrimaryAddress;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GpibPrimaryAddress.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GpibPrimaryAddress</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationGpibParameterCategory.GpibParallelResponse">
            <summary>Allows access to the GpibParallelResponse Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Gpib.GpibParallelResponse;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Gpib.GpibParallelResponse

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Gpib-&gt;GpibParallelResponse;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GpibParallelResponse.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GpibParallelResponse</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory">
            <summary>Contains the Modbus Master Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterSlaveIPAddress">
            <summary>Allows access to the ModbusMasterSlaveIPAddress Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSlaveIPAddress;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSlaveIPAddress

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterSlaveIPAddress;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterSlaveIPAddress.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterSlaveIPAddress</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterSlavePort">
            <summary>Allows access to the ModbusMasterSlavePort Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSlavePort;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSlavePort

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterSlavePort;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterSlavePort.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterSlavePort</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterSlaveID">
            <summary>Allows access to the ModbusMasterSlaveID Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSlaveID;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSlaveID

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterSlaveID;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterSlaveID.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterSlaveID</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterInputWords">
            <summary>Allows access to the ModbusMasterInputWords Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputWords;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputWords

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterInputWords;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterInputWords.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterInputWords</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterOutputWords">
            <summary>Allows access to the ModbusMasterOutputWords Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputWords;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputWords

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterOutputWords;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterOutputWords.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterOutputWords</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterInputBits">
            <summary>Allows access to the ModbusMasterInputBits Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputBits;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputBits

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterInputBits;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterInputBits.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterInputBits</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterOutputBits">
            <summary>Allows access to the ModbusMasterOutputBits Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputBits;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputBits

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterOutputBits;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterOutputBits.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterOutputBits</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterSetup">
            <summary>Allows access to the ModbusMasterSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterVirtualInputs">
            <summary>Allows access to the ModbusMasterVirtualInputs Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualInputs;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualInputs

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterVirtualInputs;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterVirtualInputs.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterVirtualInputs</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterVirtualOutputs">
            <summary>Allows access to the ModbusMasterVirtualOutputs Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualOutputs;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualOutputs

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterVirtualOutputs;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterVirtualOutputs.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterVirtualOutputs</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterOutputWordsSections">
            <summary>Allows access to the ModbusMasterOutputWordsSections Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputWordsSections;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputWordsSections

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterOutputWordsSections;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterOutputWordsSections.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterOutputWordsSections</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterOutputBitsSections">
            <summary>Allows access to the ModbusMasterOutputBitsSections Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputBitsSections;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputBitsSections

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterOutputBitsSections;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterOutputBitsSections.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterOutputBitsSections</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterRWReadOffset">
            <summary>Allows access to the ModbusMasterRWReadOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterRWReadOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterRWReadOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterRWReadOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterRWReadOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterRWReadOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterInputWordsOffset">
            <summary>Allows access to the ModbusMasterInputWordsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputWordsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputWordsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterInputWordsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterInputWordsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterInputWordsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterOutputWordsOffset">
            <summary>Allows access to the ModbusMasterOutputWordsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputWordsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputWordsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterOutputWordsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterOutputWordsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterOutputWordsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterInputBitsOffset">
            <summary>Allows access to the ModbusMasterInputBitsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputBitsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterInputBitsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterInputBitsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterInputBitsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterInputBitsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterOutputBitsOffset">
            <summary>Allows access to the ModbusMasterOutputBitsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputBitsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterOutputBitsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterOutputBitsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterOutputBitsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterOutputBitsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterStatusWordsOffset">
            <summary>Allows access to the ModbusMasterStatusWordsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterStatusWordsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterStatusWordsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterStatusWordsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterStatusWordsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterStatusWordsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterStatusBitsOffset">
            <summary>Allows access to the ModbusMasterStatusBitsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterStatusBitsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterStatusBitsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterStatusBitsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterStatusBitsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterStatusBitsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterVirtualInputsOffset">
            <summary>Allows access to the ModbusMasterVirtualInputsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualInputsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualInputsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterVirtualInputsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterVirtualInputsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterVirtualInputsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterVirtualOutputsOffset">
            <summary>Allows access to the ModbusMasterVirtualOutputsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualOutputsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterVirtualOutputsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterVirtualOutputsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterVirtualOutputsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterVirtualOutputsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterRWWriteOffset">
            <summary>Allows access to the ModbusMasterRWWriteOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterRWWriteOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterRWWriteOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterRWWriteOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterRWWriteOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterRWWriteOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusMasterParameterCategory.ModbusMasterFunctions">
            <summary>Allows access to the ModbusMasterFunctions Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterFunctions;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusMaster.ModbusMasterFunctions

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusMaster-&gt;ModbusMasterFunctions;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterFunctions.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterFunctions</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory">
            <summary>Contains the Modbus Slave Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusMasterSlaveType">
            <summary>Allows access to the ModbusMasterSlaveType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusMasterSlaveType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusMasterSlaveType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusMasterSlaveType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusMasterSlaveType.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusMasterSlaveType</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveUnitID">
            <summary>Allows access to the ModbusSlaveUnitID Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveUnitID;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveUnitID

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveUnitID;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveUnitID.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveUnitID</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveInputWords">
            <summary>Allows access to the ModbusSlaveInputWords Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputWords;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputWords

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveInputWords;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveInputWords.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveInputWords</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveOutputWords">
            <summary>Allows access to the ModbusSlaveOutputWords Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputWords;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputWords

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveOutputWords;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveOutputWords.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveOutputWords</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveInputBits">
            <summary>Allows access to the ModbusSlaveInputBits Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputBits;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputBits

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveInputBits;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveInputBits.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveInputBits</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveOutputBits">
            <summary>Allows access to the ModbusSlaveOutputBits Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputBits;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputBits

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveOutputBits;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveOutputBits.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveOutputBits</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveInputWordsOffset">
            <summary>Allows access to the ModbusSlaveInputWordsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputWordsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputWordsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveInputWordsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveInputWordsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveInputWordsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveOutputWordsOffset">
            <summary>Allows access to the ModbusSlaveOutputWordsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputWordsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputWordsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveOutputWordsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveOutputWordsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveOutputWordsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveInputBitsOffset">
            <summary>Allows access to the ModbusSlaveInputBitsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputBitsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveInputBitsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveInputBitsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveInputBitsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveInputBitsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveOutputBitsOffset">
            <summary>Allows access to the ModbusSlaveOutputBitsOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputBitsOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveOutputBitsOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveOutputBitsOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveOutputBitsOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveOutputBitsOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveRWReadOffset">
            <summary>Allows access to the ModbusSlaveRWReadOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveRWReadOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveRWReadOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveRWReadOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveRWReadOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveRWReadOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationModbusSlaveParameterCategory.ModbusSlaveRWWriteOffset">
            <summary>Allows access to the ModbusSlaveRWWriteOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveRWWriteOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.ModbusSlave.ModbusSlaveRWWriteOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;ModbusSlave-&gt;ModbusSlaveRWWriteOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ModbusSlaveRWWriteOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ModbusSlaveRWWriteOffset</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory">
            <summary>Contains the RS-232 Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort0XonCharacter">
            <summary>Allows access to the SerialPort0XonCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort0XonCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort0XonCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort0XonCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort0XonCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort0XonCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort0XoffCharacter">
            <summary>Allows access to the SerialPort0XoffCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort0XoffCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort0XoffCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort0XoffCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort0XoffCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort0XoffCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort0BaudRate">
            <summary>Allows access to the SerialPort0BaudRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort0BaudRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort0BaudRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort0BaudRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort0BaudRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort0BaudRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort0Setup">
            <summary>Allows access to the SerialPort0Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort0Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort0Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort0Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort0Setup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort0Setup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort1XonCharacter">
            <summary>Allows access to the SerialPort1XonCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort1XonCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort1XonCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort1XonCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort1XonCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort1XonCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort1XoffCharacter">
            <summary>Allows access to the SerialPort1XoffCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort1XoffCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort1XoffCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort1XoffCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort1XoffCharacter.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort1XoffCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort1BaudRate">
            <summary>Allows access to the SerialPort1BaudRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort1BaudRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort1BaudRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort1BaudRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort1BaudRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort1BaudRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemCommunicationRS232ParameterCategory.SerialPort1Setup">
            <summary>Allows access to the SerialPort1Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.RS232.SerialPort1Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.RS232.SerialPort1Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;RS232-&gt;SerialPort1Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SerialPort1Setup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SerialPort1Setup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory">
            <summary>Contains the Joystick Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory.JoystickInput1MinVoltage">
            <summary>Allows access to the JoystickInput1MinVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.System.Joystick.JoystickInput1MinVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.System.Joystick.JoystickInput1MinVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Joystick-&gt;JoystickInput1MinVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickInput1MinVoltage.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickInput1MinVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory.JoystickInput1MaxVoltage">
            <summary>Allows access to the JoystickInput1MaxVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.System.Joystick.JoystickInput1MaxVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.System.Joystick.JoystickInput1MaxVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Joystick-&gt;JoystickInput1MaxVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickInput1MaxVoltage.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickInput1MaxVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory.JoystickInput1Deadband">
            <summary>Allows access to the JoystickInput1Deadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.System.Joystick.JoystickInput1Deadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.System.Joystick.JoystickInput1Deadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Joystick-&gt;JoystickInput1Deadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickInput1Deadband.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickInput1Deadband</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory.JoystickInput0MinVoltage">
            <summary>Allows access to the JoystickInput0MinVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.System.Joystick.JoystickInput0MinVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.System.Joystick.JoystickInput0MinVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Joystick-&gt;JoystickInput0MinVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickInput0MinVoltage.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickInput0MinVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory.JoystickInput0MaxVoltage">
            <summary>Allows access to the JoystickInput0MaxVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.System.Joystick.JoystickInput0MaxVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.System.Joystick.JoystickInput0MaxVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Joystick-&gt;JoystickInput0MaxVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickInput0MaxVoltage.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickInput0MaxVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory.JoystickInput0Deadband">
            <summary>Allows access to the JoystickInput0Deadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.System.Joystick.JoystickInput0Deadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.System.Joystick.JoystickInput0Deadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Joystick-&gt;JoystickInput0Deadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickInput0Deadband.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickInput0Deadband</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemJoystickParameterCategory.JoystickSetup">
            <summary>Allows access to the JoystickSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Joystick.JoystickSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Joystick.JoystickSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Joystick-&gt;JoystickSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickSetup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemMemoryAllocationParameterCategory">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemMemoryAllocationParameterCategory.DataCollectionPoints">
            <summary>Allows access to the DataCollectionPoints Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.DataCollectionPoints;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.DataCollectionPoints

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;DataCollectionPoints;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DataCollectionPoints.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DataCollectionPoints</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemMemoryAllocationParameterCategory.PrintBufferSize">
            <summary>Allows access to the PrintBufferSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.PrintBufferSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.PrintBufferSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;PrintBufferSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/PrintBufferSize.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">PrintBufferSize</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemMemoryAllocationParameterCategory.GlobalIntegers">
            <summary>Allows access to the GlobalIntegers Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.GlobalIntegers;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.GlobalIntegers

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;GlobalIntegers;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GlobalIntegers.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GlobalIntegers</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemMemoryAllocationParameterCategory.GlobalDoubles">
            <summary>Allows access to the GlobalDoubles Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.GlobalDoubles;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.GlobalDoubles

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;GlobalDoubles;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GlobalDoubles.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GlobalDoubles</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemMemoryAllocationParameterCategory.GlobalStrings">
            <summary>Allows access to the GlobalStrings Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.GlobalStrings;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.GlobalStrings

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;GlobalStrings;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GlobalStrings.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GlobalStrings</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.SystemUserParameterCategory">
            <summary>Contains the User Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemUserParameterCategory.UserInteger0">
            <summary>Allows access to the UserInteger0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.User.UserInteger0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.User.UserInteger0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserInteger0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/UserInteger0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">UserInteger0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemUserParameterCategory.UserInteger1">
            <summary>Allows access to the UserInteger1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.User.UserInteger1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.User.UserInteger1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserInteger1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/UserInteger1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">UserInteger1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemUserParameterCategory.UserDouble0">
            <summary>Allows access to the UserDouble0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.User.UserDouble0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.User.UserDouble0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserDouble0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/UserDouble0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">UserDouble0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemUserParameterCategory.UserDouble1">
            <summary>Allows access to the UserDouble1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.User.UserDouble1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.User.UserDouble1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserDouble1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/UserDouble1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">UserDouble1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemUserParameterCategory.UserString0">
            <summary>Allows access to the UserString0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.User.UserString0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.User.UserString0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserString0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/UserString0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">UserString0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.SystemUserParameterCategory.UserString1">
            <summary>Allows access to the UserString1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.User.UserString1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.User.UserString1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserString1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/UserString1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">UserString1</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisParameterCategory">
            <summary>Contains the Axis Parameters</summary>
            <summary>
            The root category of parameters for a given axis
            </summary>
            <remarks>
            	<para>
            		This is a generic class for parameters.  The specialized class that inherits from it is
            		<see cref="T:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory"></see>.  It can be accessed from <see cref="T:Aerotech.Ensemble.Parameters.BaseParameters"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.AutofocusLoop">
            <summary>Contains the Autofocus Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.CurrentLoop">
            <summary>Contains the Current Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.DynamicControlsToolbox">
            <summary>Contains the Dynamic Controls Toolbox Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.EnhancedThroughputModule">
            <summary>Contains the Enhanced Throughput Module Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.EnhancedTrackingControl">
            <summary>Contains the Enhanced Tracking Control Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.Fault">
            <summary>Contains the Fault Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.Feedback">
            <summary>Contains the Feedback Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.IO">
            <summary>Contains the I/O Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.Limits">
            <summary>Contains the Limits Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.Motion">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.Motor">
            <summary>Contains the Motor Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.ServoLoop">
            <summary>Contains the Servo Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.Units">
            <summary>Contains the Units Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.AxisType">
            <summary>Allows access to the AxisType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AxisType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AxisType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AxisType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AxisType.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AxisType</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.RolloverCounts">
            <summary>Allows access to the RolloverCounts Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].RolloverCounts;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").RolloverCounts

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;RolloverCounts;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/RolloverCounts.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">RolloverCounts</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.GantryMasterAxis">
            <summary>Allows access to the GantryMasterAxis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].GantryMasterAxis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").GantryMasterAxis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;GantryMasterAxis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GantryMasterAxis.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GantryMasterAxis</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.BacklashDistance">
            <summary>Allows access to the BacklashDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].BacklashDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").BacklashDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;BacklashDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/BacklashDistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">BacklashDistance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.GantrySetup">
            <summary>Allows access to the GantrySetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].GantrySetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").GantrySetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;GantrySetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GantrySetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GantrySetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.RolloverMode">
            <summary>Allows access to the RolloverMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].RolloverMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").RolloverMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;RolloverMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/RolloverMode.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">RolloverMode</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.FlashConfigSetup">
            <summary>Allows access to the FlashConfigSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].FlashConfigSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").FlashConfigSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;FlashConfigSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FlashConfigSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FlashConfigSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.AxisName">
            <summary>
            The axis name
            </summary>
        </member>
        <member name="E:Aerotech.Ensemble.Parameters.AxisParameterCategory.AxisNameChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.AxisName"></see> property changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.AxisNumber">
            <summary>
            The axis number
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory">
            <summary>Contains the Autofocus Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusInput">
            <summary>Allows access to the AutofocusInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusInput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusInput</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusTarget">
            <summary>Allows access to the AutofocusTarget Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusTarget;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusTarget

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusTarget;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusTarget.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusTarget</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusDeadband">
            <summary>Allows access to the AutofocusDeadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusDeadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusDeadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusDeadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusDeadband.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusDeadband</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusGainKi">
            <summary>Allows access to the AutofocusGainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusGainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusGainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusGainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusGainKi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusGainKi</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusGainKp">
            <summary>Allows access to the AutofocusGainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusGainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusGainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusGainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusGainKp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusGainKp</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusLimitLow">
            <summary>Allows access to the AutofocusLimitLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusLimitLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusLimitLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusLimitLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusLimitLow.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusLimitLow</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusLimitHigh">
            <summary>Allows access to the AutofocusLimitHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusLimitHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusLimitHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusLimitHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusLimitHigh.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusLimitHigh</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusSpeedClamp">
            <summary>Allows access to the AutofocusSpeedClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusSpeedClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusSpeedClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusSpeedClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusSpeedClamp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusSpeedClamp</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusHoldInput">
            <summary>Allows access to the AutofocusHoldInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusHoldInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusHoldInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusHoldInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusHoldInput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusHoldInput</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusSetup">
            <summary>Allows access to the AutofocusSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusInitialRampTime">
            <summary>Allows access to the AutofocusInitialRampTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusInitialRampTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusInitialRampTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusInitialRampTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusInitialRampTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusInitialRampTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisAutofocusLoopParameterCategory.AutofocusGainKi2">
            <summary>Allows access to the AutofocusGainKi2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusGainKi2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusGainKi2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusGainKi2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutofocusGainKi2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutofocusGainKi2</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisCurrentLoopParameterCategory">
            <summary>Contains the Current Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisCurrentLoopParameterCategory.AmplifierDeadtime">
            <summary>Allows access to the AmplifierDeadtime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.AmplifierDeadtime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.AmplifierDeadtime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;AmplifierDeadtime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AmplifierDeadtime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AmplifierDeadtime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisCurrentLoopParameterCategory.CurrentGainKi">
            <summary>Allows access to the CurrentGainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentGainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentGainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CurrentGainKi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CurrentGainKi</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisCurrentLoopParameterCategory.CurrentGainKp">
            <summary>Allows access to the CurrentGainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentGainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentGainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CurrentGainKp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CurrentGainKp</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisCurrentLoopParameterCategory.CurrentOffsetA">
            <summary>Allows access to the CurrentOffsetA Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentOffsetA;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentOffsetA

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentOffsetA;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CurrentOffsetA.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CurrentOffsetA</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisCurrentLoopParameterCategory.CurrentOffsetB">
            <summary>Allows access to the CurrentOffsetB Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentOffsetB;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentOffsetB

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentOffsetB;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CurrentOffsetB.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CurrentOffsetB</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxParameterCategory">
            <summary>Contains the Dynamic Controls Toolbox Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxParameterCategory.ThresholdGainScheduling">
            <summary>Contains the Threshold Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxParameterCategory.DynamicGainScheduling">
            <summary>Contains the Dynamic Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxParameterCategory.HarmonicCancellation">
            <summary>Contains the Harmonic Cancellation Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxParameterCategory.CommandShaping">
            <summary>Contains the Command Shaping Parameters</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory">
            <summary>Contains the Threshold Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdScheduleSetup">
            <summary>Allows access to the ThresholdScheduleSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdScheduleSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdScheduleSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdScheduleSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdScheduleSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdScheduleSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion2High">
            <summary>Allows access to the ThresholdRegion2High Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2High;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2High

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion2High;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion2High.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion2High</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion2Low">
            <summary>Allows access to the ThresholdRegion2Low Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2Low;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2Low

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion2Low;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion2Low.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion2Low</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKpos">
            <summary>Allows access to the ThresholdRegion3GainKpos Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpos;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpos

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKpos;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion3GainKpos.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion3GainKpos</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKp">
            <summary>Allows access to the ThresholdRegion3GainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion3GainKp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion3GainKp</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKi">
            <summary>Allows access to the ThresholdRegion3GainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion3GainKi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion3GainKi</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKpi">
            <summary>Allows access to the ThresholdRegion3GainKpi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKpi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion3GainKpi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion3GainKpi</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion4High">
            <summary>Allows access to the ThresholdRegion4High Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4High;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4High

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion4High;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion4High.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion4High</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion4Low">
            <summary>Allows access to the ThresholdRegion4Low Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4Low;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4Low

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion4Low;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion4Low.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion4Low</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKpos">
            <summary>Allows access to the ThresholdRegion5GainKpos Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpos;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpos

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKpos;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion5GainKpos.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion5GainKpos</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKp">
            <summary>Allows access to the ThresholdRegion5GainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion5GainKp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion5GainKp</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKi">
            <summary>Allows access to the ThresholdRegion5GainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion5GainKi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion5GainKi</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKpi">
            <summary>Allows access to the ThresholdRegion5GainKpi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKpi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ThresholdRegion5GainKpi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ThresholdRegion5GainKpi</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory">
            <summary>Contains the Dynamic Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicScheduleSetup">
            <summary>Allows access to the DynamicScheduleSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicScheduleSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicScheduleSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicScheduleSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DynamicScheduleSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DynamicScheduleSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicGainKposScale">
            <summary>Allows access to the DynamicGainKposScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKposScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKposScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicGainKposScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DynamicGainKposScale.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DynamicGainKposScale</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicGainKpScale">
            <summary>Allows access to the DynamicGainKpScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKpScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKpScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicGainKpScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DynamicGainKpScale.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DynamicGainKpScale</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicGainKiScale">
            <summary>Allows access to the DynamicGainKiScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKiScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKiScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicGainKiScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DynamicGainKiScale.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DynamicGainKiScale</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory">
            <summary>Contains the Harmonic Cancellation Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Type">
            <summary>Allows access to the HarmonicCancellation0Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation0Type.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation0Type</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Period">
            <summary>Allows access to the HarmonicCancellation0Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation0Period.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation0Period</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Gain">
            <summary>Allows access to the HarmonicCancellation0Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation0Gain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation0Gain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Phase">
            <summary>Allows access to the HarmonicCancellation0Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation0Phase.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation0Phase</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Type">
            <summary>Allows access to the HarmonicCancellation1Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation1Type.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation1Type</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Period">
            <summary>Allows access to the HarmonicCancellation1Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation1Period.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation1Period</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Gain">
            <summary>Allows access to the HarmonicCancellation1Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation1Gain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation1Gain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Phase">
            <summary>Allows access to the HarmonicCancellation1Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation1Phase.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation1Phase</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Type">
            <summary>Allows access to the HarmonicCancellation2Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation2Type.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation2Type</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Period">
            <summary>Allows access to the HarmonicCancellation2Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation2Period.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation2Period</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Gain">
            <summary>Allows access to the HarmonicCancellation2Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation2Gain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation2Gain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Phase">
            <summary>Allows access to the HarmonicCancellation2Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation2Phase.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation2Phase</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Type">
            <summary>Allows access to the HarmonicCancellation3Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation3Type.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation3Type</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Period">
            <summary>Allows access to the HarmonicCancellation3Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation3Period.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation3Period</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Gain">
            <summary>Allows access to the HarmonicCancellation3Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation3Gain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation3Gain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Phase">
            <summary>Allows access to the HarmonicCancellation3Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation3Phase.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation3Phase</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Type">
            <summary>Allows access to the HarmonicCancellation4Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation4Type.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation4Type</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Period">
            <summary>Allows access to the HarmonicCancellation4Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation4Period.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation4Period</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Gain">
            <summary>Allows access to the HarmonicCancellation4Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation4Gain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation4Gain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Phase">
            <summary>Allows access to the HarmonicCancellation4Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellation4Phase.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellation4Phase</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellationSetup">
            <summary>Allows access to the HarmonicCancellationSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellationSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellationSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellationSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HarmonicCancellationSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HarmonicCancellationSetup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory">
            <summary>Contains the Command Shaping Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperSetup">
            <summary>Allows access to the CommandShaperSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime00">
            <summary>Allows access to the CommandShaperTime00 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime00;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime00

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime00;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime00.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime00</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime01">
            <summary>Allows access to the CommandShaperTime01 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime01;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime01

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime01;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime01.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime01</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime02">
            <summary>Allows access to the CommandShaperTime02 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime02;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime02

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime02;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime02.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime02</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime03">
            <summary>Allows access to the CommandShaperTime03 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime03;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime03

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime03;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime03.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime03</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime04">
            <summary>Allows access to the CommandShaperTime04 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime04;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime04

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime04;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime04.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime04</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime05">
            <summary>Allows access to the CommandShaperTime05 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime05;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime05

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime05;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime05.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime05</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime06">
            <summary>Allows access to the CommandShaperTime06 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime06;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime06

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime06;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime06.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime06</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime07">
            <summary>Allows access to the CommandShaperTime07 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime07;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime07

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime07;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime07.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime07</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime08">
            <summary>Allows access to the CommandShaperTime08 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime08;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime08

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime08;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime08.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime08</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime09">
            <summary>Allows access to the CommandShaperTime09 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime09;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime09

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime09;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime09.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime09</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime10">
            <summary>Allows access to the CommandShaperTime10 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime10;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime10

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime10;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime10.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime10</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime11">
            <summary>Allows access to the CommandShaperTime11 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime11;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime11

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime11;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime11.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime11</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime12">
            <summary>Allows access to the CommandShaperTime12 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime12;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime12

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime12;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime12.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime12</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime13">
            <summary>Allows access to the CommandShaperTime13 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime13;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime13

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime13;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime13.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime13</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime14">
            <summary>Allows access to the CommandShaperTime14 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime14;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime14

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime14;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime14.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime14</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime15">
            <summary>Allows access to the CommandShaperTime15 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime15;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime15

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime15;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperTime15.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperTime15</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff00">
            <summary>Allows access to the CommandShaperCoeff00 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff00;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff00

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff00;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff00.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff00</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff01">
            <summary>Allows access to the CommandShaperCoeff01 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff01;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff01

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff01;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff01.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff01</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff02">
            <summary>Allows access to the CommandShaperCoeff02 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff02;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff02

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff02;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff02.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff02</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff03">
            <summary>Allows access to the CommandShaperCoeff03 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff03;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff03

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff03;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff03.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff03</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff04">
            <summary>Allows access to the CommandShaperCoeff04 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff04;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff04

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff04;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff04.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff04</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff05">
            <summary>Allows access to the CommandShaperCoeff05 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff05;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff05

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff05;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff05.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff05</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff06">
            <summary>Allows access to the CommandShaperCoeff06 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff06;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff06

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff06;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff06.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff06</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff07">
            <summary>Allows access to the CommandShaperCoeff07 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff07;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff07

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff07;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff07.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff07</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff08">
            <summary>Allows access to the CommandShaperCoeff08 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff08;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff08

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff08;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff08.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff08</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff09">
            <summary>Allows access to the CommandShaperCoeff09 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff09;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff09

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff09;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff09.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff09</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff10">
            <summary>Allows access to the CommandShaperCoeff10 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff10;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff10

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff10;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff10.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff10</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff11">
            <summary>Allows access to the CommandShaperCoeff11 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff11;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff11

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff11;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff11.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff11</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff12">
            <summary>Allows access to the CommandShaperCoeff12 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff12;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff12

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff12;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff12.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff12</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff13">
            <summary>Allows access to the CommandShaperCoeff13 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff13;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff13

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff13;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff13.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff13</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff14">
            <summary>Allows access to the CommandShaperCoeff14 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff14;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff14

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff14;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff14.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff14</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff15">
            <summary>Allows access to the CommandShaperCoeff15 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff15;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff15

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff15;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaperCoeff15.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaperCoeff15</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper0Type">
            <summary>Allows access to the CommandShaper0Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper0Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper0Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper0Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaper0Type.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaper0Type</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper0Frequency">
            <summary>Allows access to the CommandShaper0Frequency Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper0Frequency;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper0Frequency

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper0Frequency;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaper0Frequency.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaper0Frequency</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper0Damping">
            <summary>Allows access to the CommandShaper0Damping Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper0Damping;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper0Damping

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper0Damping;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaper0Damping.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaper0Damping</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper1Type">
            <summary>Allows access to the CommandShaper1Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper1Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper1Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper1Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaper1Type.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaper1Type</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper1Frequency">
            <summary>Allows access to the CommandShaper1Frequency Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper1Frequency;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper1Frequency

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper1Frequency;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaper1Frequency.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaper1Frequency</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper1Damping">
            <summary>Allows access to the CommandShaper1Damping Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper1Damping;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper1Damping

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper1Damping;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommandShaper1Damping.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommandShaper1Damping</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisEnhancedThroughputModuleParameterCategory">
            <summary>Contains the Enhanced Throughput Module Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisEnhancedThroughputModuleParameterCategory.EnhancedThroughputChannel">
            <summary>Allows access to the EnhancedThroughputChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].EnhancedThroughputModule.EnhancedThroughputChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").EnhancedThroughputModule.EnhancedThroughputChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedThroughputModule-&gt;EnhancedThroughputChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnhancedThroughputChannel.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnhancedThroughputChannel</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisEnhancedThroughputModuleParameterCategory.EnhancedThroughputGain">
            <summary>Allows access to the EnhancedThroughputGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].EnhancedThroughputModule.EnhancedThroughputGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").EnhancedThroughputModule.EnhancedThroughputGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedThroughputModule-&gt;EnhancedThroughputGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnhancedThroughputGain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnhancedThroughputGain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisEnhancedThroughputModuleParameterCategory.EnhancedThroughputCurrentClamp">
            <summary>Allows access to the EnhancedThroughputCurrentClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].EnhancedThroughputModule.EnhancedThroughputCurrentClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").EnhancedThroughputModule.EnhancedThroughputCurrentClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedThroughputModule-&gt;EnhancedThroughputCurrentClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnhancedThroughputCurrentClamp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnhancedThroughputCurrentClamp</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisEnhancedTrackingControlParameterCategory">
            <summary>Contains the Enhanced Tracking Control Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisEnhancedTrackingControlParameterCategory.EnhancedTrackingScale">
            <summary>Allows access to the EnhancedTrackingScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].EnhancedTrackingControl.EnhancedTrackingScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").EnhancedTrackingControl.EnhancedTrackingScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedTrackingControl-&gt;EnhancedTrackingScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnhancedTrackingScale.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnhancedTrackingScale</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisEnhancedTrackingControlParameterCategory.EnhancedTrackingBandwidth">
            <summary>Allows access to the EnhancedTrackingBandwidth Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].EnhancedTrackingControl.EnhancedTrackingBandwidth;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").EnhancedTrackingControl.EnhancedTrackingBandwidth

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedTrackingControl-&gt;EnhancedTrackingBandwidth;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnhancedTrackingBandwidth.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnhancedTrackingBandwidth</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisEnhancedTrackingControlParameterCategory.EnhancedTrackingSetup">
            <summary>Allows access to the EnhancedTrackingSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].EnhancedTrackingControl.EnhancedTrackingSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").EnhancedTrackingControl.EnhancedTrackingSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedTrackingControl-&gt;EnhancedTrackingSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnhancedTrackingSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnhancedTrackingSetup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory">
            <summary>Contains the Fault Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.Inputs">
            <summary>Contains the Inputs Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.Outputs">
            <summary>Contains the Outputs Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.Thresholds">
            <summary>Contains the Thresholds Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.FaultMask">
            <summary>Allows access to the FaultMask Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMask;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMask

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMask;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultMask.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultMask</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.FaultMaskDisable">
            <summary>Allows access to the FaultMaskDisable Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMaskDisable;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMaskDisable

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMaskDisable;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultMaskDisable.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultMaskDisable</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.FaultMaskDecel">
            <summary>Allows access to the FaultMaskDecel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMaskDecel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMaskDecel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMaskDecel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultMaskDecel.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultMaskDecel</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.FaultMaskDisableDelay">
            <summary>Allows access to the FaultMaskDisableDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMaskDisableDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMaskDisableDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMaskDisableDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultMaskDisableDelay.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultMaskDisableDelay</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.FaultAbortAxes">
            <summary>Allows access to the FaultAbortAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultAbortAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultAbortAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultAbortAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultAbortAxes.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultAbortAxes</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultParameterCategory.FaultSetup">
            <summary>Allows access to the FaultSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultSetup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFaultInputsParameterCategory">
            <summary>Contains the Inputs Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultInputsParameterCategory.ESTOPFaultInput">
            <summary>Allows access to the ESTOPFaultInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Inputs.ESTOPFaultInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Inputs.ESTOPFaultInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Inputs-&gt;ESTOPFaultInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ESTOPFaultInput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ESTOPFaultInput</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultInputsParameterCategory.ExternalFaultDigitalInput">
            <summary>Allows access to the ExternalFaultDigitalInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Inputs.ExternalFaultDigitalInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Inputs.ExternalFaultDigitalInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Inputs-&gt;ExternalFaultDigitalInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ExternalFaultDigitalInput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ExternalFaultDigitalInput</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultInputsParameterCategory.ExternalFaultAnalogInput">
            <summary>Allows access to the ExternalFaultAnalogInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Inputs.ExternalFaultAnalogInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Inputs.ExternalFaultAnalogInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Inputs-&gt;ExternalFaultAnalogInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ExternalFaultAnalogInput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ExternalFaultAnalogInput</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFaultOutputsParameterCategory">
            <summary>Contains the Outputs Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultOutputsParameterCategory.FaultMaskOutput">
            <summary>Allows access to the FaultMaskOutput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Outputs.FaultMaskOutput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Outputs.FaultMaskOutput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Outputs-&gt;FaultMaskOutput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultMaskOutput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultMaskOutput</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultOutputsParameterCategory.FaultOutputSetup">
            <summary>Allows access to the FaultOutputSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Outputs.FaultOutputSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Outputs.FaultOutputSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Outputs-&gt;FaultOutputSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultOutputSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultOutputSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultOutputsParameterCategory.FaultOutputState">
            <summary>Allows access to the FaultOutputState Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Outputs.FaultOutputState;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Outputs.FaultOutputState

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Outputs-&gt;FaultOutputState;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FaultOutputState.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FaultOutputState</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory">
            <summary>Contains the Thresholds Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.PositionErrorThreshold">
            <summary>Allows access to the PositionErrorThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.PositionErrorThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;PositionErrorThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/PositionErrorThreshold.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">PositionErrorThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.AverageCurrentThreshold">
            <summary>Allows access to the AverageCurrentThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Fault.Thresholds.AverageCurrentThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AverageCurrentThreshold.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AverageCurrentThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.AverageCurrentTime">
            <summary>Allows access to the AverageCurrentTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.AverageCurrentTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Thresholds.AverageCurrentTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AverageCurrentTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AverageCurrentTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.VelocityCommandThreshold">
            <summary>Allows access to the VelocityCommandThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.VelocityCommandThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.VelocityCommandThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;VelocityCommandThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/VelocityCommandThreshold.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">VelocityCommandThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.VelocityErrorThreshold">
            <summary>Allows access to the VelocityErrorThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.VelocityErrorThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.VelocityErrorThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;VelocityErrorThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/VelocityErrorThreshold.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">VelocityErrorThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.ExternalFaultThreshold">
            <summary>Allows access to the ExternalFaultThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.ExternalFaultThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Fault.Thresholds.ExternalFaultThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;ExternalFaultThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ExternalFaultThreshold.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ExternalFaultThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.MarkerSearchThreshold">
            <summary>Allows access to the MarkerSearchThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.MarkerSearchThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.MarkerSearchThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;MarkerSearchThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/MarkerSearchThreshold.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">MarkerSearchThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFaultThresholdsParameterCategory.VelocityCommandThresholdBeforeHome">
            <summary>Allows access to the VelocityCommandThresholdBeforeHome Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.VelocityCommandThresholdBeforeHome;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.VelocityCommandThresholdBeforeHome

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;VelocityCommandThresholdBeforeHome;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/VelocityCommandThresholdBeforeHome.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">VelocityCommandThresholdBeforeHome</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory">
            <summary>Contains the Feedback Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.EnDatEncoder">
            <summary>Contains the EnDat Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.Multiplier">
            <summary>Contains the Multiplier Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.ResoluteEncoder">
            <summary>Contains the Resolute Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.Resolver">
            <summary>Contains the Resolver Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.PositionFeedbackType">
            <summary>Allows access to the PositionFeedbackType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.PositionFeedbackType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.PositionFeedbackType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/PositionFeedbackType.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">PositionFeedbackType</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.PositionFeedbackChannel">
            <summary>Allows access to the PositionFeedbackChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.PositionFeedbackChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.PositionFeedbackChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/PositionFeedbackChannel.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">PositionFeedbackChannel</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.VelocityFeedbackType">
            <summary>Allows access to the VelocityFeedbackType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.VelocityFeedbackType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.VelocityFeedbackType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;VelocityFeedbackType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/VelocityFeedbackType.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">VelocityFeedbackType</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.VelocityFeedbackChannel">
            <summary>Allows access to the VelocityFeedbackChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.VelocityFeedbackChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.VelocityFeedbackChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;VelocityFeedbackChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/VelocityFeedbackChannel.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">VelocityFeedbackChannel</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.FeedbackSetup">
            <summary>Allows access to the FeedbackSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.FeedbackSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.FeedbackSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;FeedbackSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/FeedbackSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">FeedbackSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.ExternalVelocityAverageTime">
            <summary>Allows access to the ExternalVelocityAverageTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.ExternalVelocityAverageTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.ExternalVelocityAverageTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;ExternalVelocityAverageTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ExternalVelocityAverageTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ExternalVelocityAverageTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.AbsoluteFeedbackOffset">
            <summary>Allows access to the AbsoluteFeedbackOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Feedback.AbsoluteFeedbackOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Feedback.AbsoluteFeedbackOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;AbsoluteFeedbackOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AbsoluteFeedbackOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AbsoluteFeedbackOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackParameterCategory.CapSensorFilterLength">
            <summary>Allows access to the CapSensorFilterLength Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.CapSensorFilterLength;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.CapSensorFilterLength

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;CapSensorFilterLength;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CapSensorFilterLength.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CapSensorFilterLength</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFeedbackEnDatEncoderParameterCategory">
            <summary>Contains the EnDat Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderSetup">
            <summary>Allows access to the EnDatEncoderSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnDatEncoderSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnDatEncoderSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderResolution">
            <summary>Allows access to the EnDatEncoderResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnDatEncoderResolution.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnDatEncoderResolution</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderTurns">
            <summary>Allows access to the EnDatEncoderTurns Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderTurns;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderTurns

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderTurns;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnDatEncoderTurns.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnDatEncoderTurns</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderIncrementalResolution">
            <summary>Allows access to the EnDatEncoderIncrementalResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderIncrementalResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderIncrementalResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderIncrementalResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnDatEncoderIncrementalResolution.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnDatEncoderIncrementalResolution</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory">
            <summary>Contains the Multiplier Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderMultiplicationFactor">
            <summary>Allows access to the EncoderMultiplicationFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderMultiplicationFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderMultiplicationFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderMultiplicationFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderMultiplicationFactor.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderMultiplicationFactor</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderSineGain">
            <summary>Allows access to the EncoderSineGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderSineGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderSineGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderSineGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderSineGain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderSineGain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderSineOffset">
            <summary>Allows access to the EncoderSineOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderSineOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderSineOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderSineOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderSineOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderSineOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderCosineGain">
            <summary>Allows access to the EncoderCosineGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderCosineGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderCosineGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderCosineGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderCosineGain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderCosineGain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderCosineOffset">
            <summary>Allows access to the EncoderCosineOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderCosineOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderCosineOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderCosineOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderCosineOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderCosineOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderPhase">
            <summary>Allows access to the EncoderPhase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderPhase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderPhase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderPhase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderPhase.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderPhase</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EmulatedQuadratureDivider">
            <summary>Allows access to the EmulatedQuadratureDivider Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EmulatedQuadratureDivider;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Multiplier.EmulatedQuadratureDivider

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EmulatedQuadratureDivider;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EmulatedQuadratureDivider.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EmulatedQuadratureDivider</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderMultiplierSetup">
            <summary>Allows access to the EncoderMultiplierSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderMultiplierSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderMultiplierSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderMultiplierSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderMultiplierSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderMultiplierSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EmulatedQuadratureChannel">
            <summary>Allows access to the EmulatedQuadratureChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EmulatedQuadratureChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EmulatedQuadratureChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EmulatedQuadratureChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EmulatedQuadratureChannel.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EmulatedQuadratureChannel</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderMarkerAlignment">
            <summary>Allows access to the EncoderMarkerAlignment Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderMarkerAlignment;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderMarkerAlignment

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderMarkerAlignment;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderMarkerAlignment.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderMarkerAlignment</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFeedbackResoluteEncoderParameterCategory">
            <summary>Contains the Resolute Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResoluteEncoderParameterCategory.ResoluteEncoderSetup">
            <summary>Allows access to the ResoluteEncoderSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.ResoluteEncoder.ResoluteEncoderSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.ResoluteEncoder.ResoluteEncoderSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;ResoluteEncoder-&gt;ResoluteEncoderSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResoluteEncoderSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResoluteEncoderSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResoluteEncoderParameterCategory.ResoluteEncoderResolution">
            <summary>Allows access to the ResoluteEncoderResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.ResoluteEncoder.ResoluteEncoderResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.ResoluteEncoder.ResoluteEncoderResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;ResoluteEncoder-&gt;ResoluteEncoderResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResoluteEncoderResolution.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResoluteEncoderResolution</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResoluteEncoderParameterCategory.ResoluteEncoderUserResolution">
            <summary>Allows access to the ResoluteEncoderUserResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.ResoluteEncoder.ResoluteEncoderUserResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.ResoluteEncoder.ResoluteEncoderUserResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;ResoluteEncoder-&gt;ResoluteEncoderUserResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResoluteEncoderUserResolution.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResoluteEncoderUserResolution</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisFeedbackResolverParameterCategory">
            <summary>Contains the Resolver Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResolverParameterCategory.ResolverReferenceGain">
            <summary>Allows access to the ResolverReferenceGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverReferenceGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverReferenceGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverReferenceGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResolverReferenceGain.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResolverReferenceGain</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResolverParameterCategory.ResolverSetup">
            <summary>Allows access to the ResolverSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResolverSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResolverSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResolverParameterCategory.ResolverReferencePhase">
            <summary>Allows access to the ResolverReferencePhase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverReferencePhase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverReferencePhase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverReferencePhase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResolverReferencePhase.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResolverReferencePhase</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResolverParameterCategory.ResolverCoarseChannel">
            <summary>Allows access to the ResolverCoarseChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverCoarseChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverCoarseChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverCoarseChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResolverCoarseChannel.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResolverCoarseChannel</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResolverParameterCategory.ResolverFeedbackRatio">
            <summary>Allows access to the ResolverFeedbackRatio Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverFeedbackRatio;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverFeedbackRatio

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverFeedbackRatio;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResolverFeedbackRatio.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResolverFeedbackRatio</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisFeedbackResolverParameterCategory.ResolverFeedbackOffset">
            <summary>Allows access to the ResolverFeedbackOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverFeedbackOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverFeedbackOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverFeedbackOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ResolverFeedbackOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ResolverFeedbackOffset</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisIOParameterCategory">
            <summary>Contains the I/O Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.AnalogFilters">
            <summary>Contains the Analog Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.Brake">
            <summary>Contains the Brake Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.IOSetup">
            <summary>Allows access to the IOSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.IOSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.IOSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;IOSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/IOSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">IOSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.EncoderDivider">
            <summary>Allows access to the EncoderDivider Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.EncoderDivider;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.EncoderDivider

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;EncoderDivider;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EncoderDivider.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EncoderDivider</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.SSINet1Setup">
            <summary>Allows access to the SSINet1Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.SSINet1Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.SSINet1Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;SSINet1Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SSINet1Setup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SSINet1Setup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.SSINet2Setup">
            <summary>Allows access to the SSINet2Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.SSINet2Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.SSINet2Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;SSINet2Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SSINet2Setup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SSINet2Setup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.Analog0InputOffset">
            <summary>Allows access to the Analog0InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog0InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog0InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog0InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0InputOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0InputOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.Analog1InputOffset">
            <summary>Allows access to the Analog1InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog1InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog1InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog1InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1InputOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1InputOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.Analog2InputOffset">
            <summary>Allows access to the Analog2InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog2InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog2InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog2InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog2InputOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog2InputOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOParameterCategory.Analog3InputOffset">
            <summary>Allows access to the Analog3InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog3InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog3InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog3InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog3InputOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog3InputOffset</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory">
            <summary>Contains the Analog Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffN0">
            <summary>Allows access to the Analog0Filter0CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter0CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter0CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffN1">
            <summary>Allows access to the Analog0Filter0CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter0CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter0CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffN2">
            <summary>Allows access to the Analog0Filter0CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter0CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter0CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffD1">
            <summary>Allows access to the Analog0Filter0CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter0CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter0CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffD2">
            <summary>Allows access to the Analog0Filter0CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter0CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter0CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffN0">
            <summary>Allows access to the Analog0Filter1CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter1CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter1CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffN1">
            <summary>Allows access to the Analog0Filter1CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter1CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter1CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffN2">
            <summary>Allows access to the Analog0Filter1CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter1CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter1CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffD1">
            <summary>Allows access to the Analog0Filter1CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter1CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter1CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffD2">
            <summary>Allows access to the Analog0Filter1CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog0Filter1CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog0Filter1CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffN0">
            <summary>Allows access to the Analog1Filter0CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter0CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter0CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffN1">
            <summary>Allows access to the Analog1Filter0CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter0CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter0CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffN2">
            <summary>Allows access to the Analog1Filter0CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter0CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter0CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffD1">
            <summary>Allows access to the Analog1Filter0CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter0CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter0CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffD2">
            <summary>Allows access to the Analog1Filter0CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter0CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter0CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffN0">
            <summary>Allows access to the Analog1Filter1CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter1CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter1CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffN1">
            <summary>Allows access to the Analog1Filter1CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter1CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter1CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffN2">
            <summary>Allows access to the Analog1Filter1CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter1CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter1CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffD1">
            <summary>Allows access to the Analog1Filter1CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter1CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter1CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffD2">
            <summary>Allows access to the Analog1Filter1CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/Analog1Filter1CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">Analog1Filter1CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOAnalogFiltersParameterCategory.AnalogFilterSetup">
            <summary>Allows access to the AnalogFilterSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.AnalogFilterSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.AnalogFilters.AnalogFilterSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;AnalogFilterSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AnalogFilterSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AnalogFilterSetup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisIOBrakeParameterCategory">
            <summary>Contains the Brake Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOBrakeParameterCategory.EnableBrakeControl">
            <summary>Allows access to the EnableBrakeControl Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.EnableBrakeControl;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.EnableBrakeControl

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;EnableBrakeControl;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EnableBrakeControl.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EnableBrakeControl</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOBrakeParameterCategory.BrakeOutput">
            <summary>Allows access to the BrakeOutput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.BrakeOutput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.BrakeOutput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;BrakeOutput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/BrakeOutput.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">BrakeOutput</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOBrakeParameterCategory.BrakeDisableDelay">
            <summary>Allows access to the BrakeDisableDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.BrakeDisableDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.BrakeDisableDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;BrakeDisableDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/BrakeDisableDelay.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">BrakeDisableDelay</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisIOBrakeParameterCategory.BrakeEnableDelay">
            <summary>Allows access to the BrakeEnableDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.BrakeEnableDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.BrakeEnableDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;BrakeEnableDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/BrakeEnableDelay.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">BrakeEnableDelay</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory">
            <summary>Contains the Limits Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory.SoftwareLimitLow">
            <summary>Allows access to the SoftwareLimitLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.SoftwareLimitLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.SoftwareLimitLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SoftwareLimitLow.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SoftwareLimitLow</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory.SoftwareLimitHigh">
            <summary>Allows access to the SoftwareLimitHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.SoftwareLimitHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.SoftwareLimitHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SoftwareLimitHigh.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SoftwareLimitHigh</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory.LimitDecelDistance">
            <summary>Allows access to the LimitDecelDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.LimitDecelDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.LimitDecelDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;LimitDecelDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/LimitDecelDistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">LimitDecelDistance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory.LimitDebounceTime">
            <summary>Allows access to the LimitDebounceTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Limits.LimitDebounceTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Limits.LimitDebounceTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;LimitDebounceTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/LimitDebounceTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">LimitDebounceTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory.EndOfTravelLimitSetup">
            <summary>Allows access to the EndOfTravelLimitSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Limits.EndOfTravelLimitSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Limits.EndOfTravelLimitSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;EndOfTravelLimitSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/EndOfTravelLimitSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">EndOfTravelLimitSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory.LimitDebounceDistance">
            <summary>Allows access to the LimitDebounceDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.LimitDebounceDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.LimitDebounceDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;LimitDebounceDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/LimitDebounceDistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">LimitDebounceDistance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisLimitsParameterCategory.SoftwareLimitSetup">
            <summary>Allows access to the SoftwareLimitSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Limits.SoftwareLimitSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Limits.SoftwareLimitSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/SoftwareLimitSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">SoftwareLimitSetup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.GearCam">
            <summary>Contains the Gear/Cam Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.Home">
            <summary>Contains the Home Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.InPosition">
            <summary>Contains the In Position Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.ReverseMotionDirection">
            <summary>Allows access to the ReverseMotionDirection Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.ReverseMotionDirection;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.ReverseMotionDirection

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;ReverseMotionDirection;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ReverseMotionDirection.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ReverseMotionDirection</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.MaxJogDistance">
            <summary>Allows access to the MaxJogDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.MaxJogDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.MaxJogDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;MaxJogDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/MaxJogDistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">MaxJogDistance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.DefaultSpeed">
            <summary>Allows access to the DefaultSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.DefaultSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.DefaultRampRate">
            <summary>Allows access to the DefaultRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.DefaultRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultRampRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.AbortDecelRate">
            <summary>Allows access to the AbortDecelRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.AbortDecelRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.AbortDecelRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;AbortDecelRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AbortDecelRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AbortDecelRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.MaxJogSpeed">
            <summary>Allows access to the MaxJogSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.MaxJogSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.MaxJogSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;MaxJogSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/MaxJogSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">MaxJogSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.JoystickLowSpeed">
            <summary>Allows access to the JoystickLowSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.JoystickLowSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.JoystickLowSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;JoystickLowSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickLowSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickLowSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.JoystickHighSpeed">
            <summary>Allows access to the JoystickHighSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.JoystickHighSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.JoystickHighSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;JoystickHighSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/JoystickHighSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">JoystickHighSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.DefaultRampMode">
            <summary>Allows access to the DefaultRampMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.DefaultRampMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultRampMode.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultRampMode</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.DefaultRampTime">
            <summary>Allows access to the DefaultRampTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.DefaultRampTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultRampTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultRampTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionParameterCategory.DefaultRampDistance">
            <summary>Allows access to the DefaultRampDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.DefaultRampDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultRampDistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultRampDistance</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisMotionGearCamParameterCategory">
            <summary>Contains the Gear/Cam Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionGearCamParameterCategory.GearCamSource">
            <summary>Allows access to the GearCamSource Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.GearCam.GearCamSource;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.GearCam.GearCamSource

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;GearCam-&gt;GearCamSource;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GearCamSource.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GearCamSource</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionGearCamParameterCategory.GearCamIndex">
            <summary>Allows access to the GearCamIndex Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.GearCam.GearCamIndex;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.GearCam.GearCamIndex

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;GearCam-&gt;GearCamIndex;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GearCamIndex.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GearCamIndex</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionGearCamParameterCategory.GearCamScaleFactor">
            <summary>Allows access to the GearCamScaleFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.GearCam.GearCamScaleFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.GearCam.GearCamScaleFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;GearCam-&gt;GearCamScaleFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GearCamScaleFactor.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GearCamScaleFactor</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionGearCamParameterCategory.GearCamAnalogDeadband">
            <summary>Allows access to the GearCamAnalogDeadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motion.GearCam.GearCamAnalogDeadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motion.GearCam.GearCamAnalogDeadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;GearCam-&gt;GearCamAnalogDeadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GearCamAnalogDeadband.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GearCamAnalogDeadband</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisMotionHomeParameterCategory">
            <summary>Contains the Home Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionHomeParameterCategory.HomeType">
            <summary>Allows access to the HomeType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Home.HomeType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HomeType.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HomeType</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionHomeParameterCategory.HomeSetup">
            <summary>Allows access to the HomeSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Home.HomeSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HomeSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HomeSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionHomeParameterCategory.HomeSpeed">
            <summary>Allows access to the HomeSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomeSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HomeSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HomeSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionHomeParameterCategory.HomeOffset">
            <summary>Allows access to the HomeOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomeOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HomeOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HomeOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionHomeParameterCategory.HomeRampRate">
            <summary>Allows access to the HomeRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomeRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HomeRampRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HomeRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionHomeParameterCategory.HomePositionSet">
            <summary>Allows access to the HomePositionSet Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomePositionSet;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomePositionSet

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomePositionSet;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/HomePositionSet.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">HomePositionSet</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisMotionInPositionParameterCategory">
            <summary>Contains the In Position Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionInPositionParameterCategory.InPositionDistance">
            <summary>Allows access to the InPositionDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPositionDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.InPosition.InPositionDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPositionDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/InPositionDistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">InPositionDistance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionInPositionParameterCategory.InPositionTime">
            <summary>Allows access to the InPositionTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPositionTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.InPosition.InPositionTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPositionTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/InPositionTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">InPositionTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionInPositionParameterCategory.InPosition2Distance">
            <summary>Allows access to the InPosition2Distance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPosition2Distance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.InPosition.InPosition2Distance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPosition2Distance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/InPosition2Distance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">InPosition2Distance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotionInPositionParameterCategory.InPosition2Time">
            <summary>Allows access to the InPosition2Time Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPosition2Time;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.InPosition.InPosition2Time

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPosition2Time;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/InPosition2Time.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">InPosition2Time</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory">
            <summary>Contains the Motor Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.Stepper">
            <summary>Contains the Stepper Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.MaxCurrentClamp">
            <summary>Allows access to the MaxCurrentClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.MaxCurrentClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.MaxCurrentClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;MaxCurrentClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/MaxCurrentClamp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">MaxCurrentClamp</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.MotorType">
            <summary>Allows access to the MotorType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.MotorType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.MotorType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/MotorType.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">MotorType</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.CyclesPerRev">
            <summary>Allows access to the CyclesPerRev Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.CyclesPerRev;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.CyclesPerRev

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;CyclesPerRev;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CyclesPerRev.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CyclesPerRev</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.CountsPerRev">
            <summary>Allows access to the CountsPerRev Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motor.CountsPerRev;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motor.CountsPerRev

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;CountsPerRev;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CountsPerRev.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CountsPerRev</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.CommutationOffset">
            <summary>Allows access to the CommutationOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.CommutationOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.CommutationOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;CommutationOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CommutationOffset.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CommutationOffset</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.AutoMsetTime">
            <summary>Allows access to the AutoMsetTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.AutoMsetTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.AutoMsetTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;AutoMsetTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutoMsetTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutoMsetTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorParameterCategory.AutoMsetCurrent">
            <summary>Allows access to the AutoMsetCurrent Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.AutoMsetCurrent;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.AutoMsetCurrent

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;AutoMsetCurrent;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutoMsetCurrent.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutoMsetCurrent</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisMotorStepperParameterCategory">
            <summary>Contains the Stepper Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorStepperParameterCategory.StepperResolution">
            <summary>Allows access to the StepperResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.Stepper.StepperResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/StepperResolution.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">StepperResolution</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorStepperParameterCategory.StepperRunningCurrent">
            <summary>Allows access to the StepperRunningCurrent Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperRunningCurrent;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Stepper.StepperRunningCurrent

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperRunningCurrent;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/StepperRunningCurrent.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">StepperRunningCurrent</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorStepperParameterCategory.StepperHoldingCurrent">
            <summary>Allows access to the StepperHoldingCurrent Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperHoldingCurrent;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Stepper.StepperHoldingCurrent

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperHoldingCurrent;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/StepperHoldingCurrent.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">StepperHoldingCurrent</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorStepperParameterCategory.StepperVerificationSpeed">
            <summary>Allows access to the StepperVerificationSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperVerificationSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motor.Stepper.StepperVerificationSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperVerificationSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/StepperVerificationSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">StepperVerificationSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisMotorStepperParameterCategory.StepperRunningCurrentDelay">
            <summary>Allows access to the StepperRunningCurrentDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperRunningCurrentDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.Stepper.StepperRunningCurrentDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperRunningCurrentDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/StepperRunningCurrentDelay.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">StepperRunningCurrentDelay</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisServoLoopParameterCategory">
            <summary>Contains the Servo Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopParameterCategory.AmpProtection">
            <summary>Contains the Amp Protection Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopParameterCategory.Gains">
            <summary>Contains the Gains Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopParameterCategory.Filters">
            <summary>Contains the Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopParameterCategory.ServoRate">
            <summary>Allows access to the ServoRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.ServoRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").ServoLoop.ServoRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;ServoRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopParameterCategory.ServoSetup">
            <summary>Allows access to the ServoSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.ServoSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").ServoLoop.ServoSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;ServoSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoSetup</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisServoLoopAmpProtectionParameterCategory">
            <summary>Contains the Amp Protection Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopAmpProtectionParameterCategory.LinearAmpMaxPower">
            <summary>Allows access to the LinearAmpMaxPower Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.LinearAmpMaxPower;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.LinearAmpMaxPower

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;LinearAmpMaxPower;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/LinearAmpMaxPower.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">LinearAmpMaxPower</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopAmpProtectionParameterCategory.LinearAmpDeratingFactor">
            <summary>Allows access to the LinearAmpDeratingFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.LinearAmpDeratingFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.LinearAmpDeratingFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;LinearAmpDeratingFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/LinearAmpDeratingFactor.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">LinearAmpDeratingFactor</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopAmpProtectionParameterCategory.LinearAmpBusVoltage">
            <summary>Allows access to the LinearAmpBusVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.LinearAmpBusVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.LinearAmpBusVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;LinearAmpBusVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/LinearAmpBusVoltage.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">LinearAmpBusVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopAmpProtectionParameterCategory.MotorResistance">
            <summary>Allows access to the MotorResistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.MotorResistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.MotorResistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;MotorResistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/MotorResistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">MotorResistance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopAmpProtectionParameterCategory.MotorBackEMFConstant">
            <summary>Allows access to the MotorBackEMFConstant Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.MotorBackEMFConstant;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.MotorBackEMFConstant

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;MotorBackEMFConstant;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/MotorBackEMFConstant.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">MotorBackEMFConstant</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory">
            <summary>Contains the Gains Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainKpos">
            <summary>Allows access to the GainKpos Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKpos;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKpos

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKpos;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainKpos.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainKpos</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainKi">
            <summary>Allows access to the GainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainKi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainKi</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainKp">
            <summary>Allows access to the GainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainKp.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainKp</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainVff">
            <summary>Allows access to the GainVff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainVff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.GainVff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainVff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainVff.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainVff</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainAff">
            <summary>Allows access to the GainAff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainAff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.GainAff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainAff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainAff.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainAff</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainKv">
            <summary>Allows access to the GainKv Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKv;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKv

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKv;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainKv.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainKv</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainKpi">
            <summary>Allows access to the GainKpi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKpi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKpi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKpi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainKpi.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainKpi</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.StaticFrictionCompensation">
            <summary>Allows access to the StaticFrictionCompensation Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.StaticFrictionCompensation;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.StaticFrictionCompensation

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;StaticFrictionCompensation;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/StaticFrictionCompensation.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">StaticFrictionCompensation</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainPff">
            <summary>Allows access to the GainPff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainPff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainPff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainPff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainPff.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainPff</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainKd1">
            <summary>Allows access to the GainKd1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKd1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKd1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKd1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainKd1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainKd1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopGainsParameterCategory.GainKp1">
            <summary>Allows access to the GainKp1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKp1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKp1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKp1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/GainKp1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">GainKp1</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory">
            <summary>Contains the Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffN0">
            <summary>Allows access to the ServoFilter0CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter0CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter0CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffN1">
            <summary>Allows access to the ServoFilter0CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter0CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter0CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffN2">
            <summary>Allows access to the ServoFilter0CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter0CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter0CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffD1">
            <summary>Allows access to the ServoFilter0CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter0CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter0CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffD2">
            <summary>Allows access to the ServoFilter0CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter0CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter0CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffN0">
            <summary>Allows access to the ServoFilter1CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter1CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter1CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffN1">
            <summary>Allows access to the ServoFilter1CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter1CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter1CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffN2">
            <summary>Allows access to the ServoFilter1CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter1CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter1CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffD1">
            <summary>Allows access to the ServoFilter1CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter1CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter1CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffD2">
            <summary>Allows access to the ServoFilter1CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter1CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter1CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffN0">
            <summary>Allows access to the ServoFilter2CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter2CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter2CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffN1">
            <summary>Allows access to the ServoFilter2CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter2CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter2CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffN2">
            <summary>Allows access to the ServoFilter2CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter2CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter2CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffD1">
            <summary>Allows access to the ServoFilter2CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter2CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter2CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffD2">
            <summary>Allows access to the ServoFilter2CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter2CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter2CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffN0">
            <summary>Allows access to the ServoFilter3CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter3CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter3CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffN1">
            <summary>Allows access to the ServoFilter3CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter3CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter3CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffN2">
            <summary>Allows access to the ServoFilter3CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter3CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter3CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffD1">
            <summary>Allows access to the ServoFilter3CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter3CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter3CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffD2">
            <summary>Allows access to the ServoFilter3CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter3CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter3CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilterSetup">
            <summary>Allows access to the ServoFilterSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilterSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilterSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilterSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilterSetup.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilterSetup</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffN0">
            <summary>Allows access to the ServoFilter4CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter4CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter4CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffN1">
            <summary>Allows access to the ServoFilter4CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter4CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter4CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffN2">
            <summary>Allows access to the ServoFilter4CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter4CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter4CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffD1">
            <summary>Allows access to the ServoFilter4CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter4CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter4CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffD2">
            <summary>Allows access to the ServoFilter4CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter4CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter4CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffN0">
            <summary>Allows access to the ServoFilter5CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter5CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter5CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffN1">
            <summary>Allows access to the ServoFilter5CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter5CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter5CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffN2">
            <summary>Allows access to the ServoFilter5CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter5CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter5CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffD1">
            <summary>Allows access to the ServoFilter5CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter5CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter5CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffD2">
            <summary>Allows access to the ServoFilter5CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter5CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter5CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffN0">
            <summary>Allows access to the ServoFilter6CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter6CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter6CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffN1">
            <summary>Allows access to the ServoFilter6CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter6CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter6CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffN2">
            <summary>Allows access to the ServoFilter6CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter6CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter6CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffD1">
            <summary>Allows access to the ServoFilter6CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter6CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter6CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffD2">
            <summary>Allows access to the ServoFilter6CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter6CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter6CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffN0">
            <summary>Allows access to the ServoFilter7CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter7CoeffN0.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter7CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffN1">
            <summary>Allows access to the ServoFilter7CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter7CoeffN1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter7CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffN2">
            <summary>Allows access to the ServoFilter7CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter7CoeffN2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter7CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffD1">
            <summary>Allows access to the ServoFilter7CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter7CoeffD1.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter7CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffD2">
            <summary>Allows access to the ServoFilter7CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/ServoFilter7CoeffD2.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">ServoFilter7CoeffD2</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.AxisUnitsParameterCategory">
            <summary>Contains the Units Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisUnitsParameterCategory.CountsPerUnit">
            <summary>Allows access to the CountsPerUnit Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Units.CountsPerUnit;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Units.CountsPerUnit

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Units-&gt;CountsPerUnit;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CountsPerUnit.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CountsPerUnit</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisUnitsParameterCategory.DecimalPlaces">
            <summary>Allows access to the DecimalPlaces Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Units.DecimalPlaces;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Units.DecimalPlaces

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Units-&gt;DecimalPlaces;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DecimalPlaces.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DecimalPlaces</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.AxisUnitsParameterCategory.UnitsName">
            <summary>Allows access to the UnitsName Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;string&gt; parameter = myController.Parameters.Axes["X"].Units.UnitsName;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of String) = myController.Parameters.Axes("X").Units.UnitsName

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Units-&gt;UnitsName;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/UnitsName.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">UnitsName</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.TaskParameterCategory">
            <summary>Contains the Task Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.MemoryAllocation">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.Motion">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.AutoRunProgram">
            <summary>Allows access to the AutoRunProgram Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;string&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].AutoRunProgram;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of String) = myController.Parameters.Tasks(TaskId.TLibrary).AutoRunProgram

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;AutoRunProgram;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/AutoRunProgram.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">AutoRunProgram</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.TaskErrorAbortAxes">
            <summary>Allows access to the TaskErrorAbortAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].TaskErrorAbortAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).TaskErrorAbortAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;TaskErrorAbortAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/TaskErrorAbortAxes.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">TaskErrorAbortAxes</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.TaskTerminationAxes">
            <summary>Allows access to the TaskTerminationAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].TaskTerminationAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).TaskTerminationAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;TaskTerminationAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/TaskTerminationAxes.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">TaskTerminationAxes</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.TaskStopAbortAxes">
            <summary>Allows access to the TaskStopAbortAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].TaskStopAbortAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).TaskStopAbortAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;TaskStopAbortAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/TaskStopAbortAxes.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">TaskStopAbortAxes</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.Aerotech#Common#INamed{Aerotech#Ensemble#TaskId}#Name">
            <summary>The task for which this category is for</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskParameterCategory.TaskId">
            <summary>The task for which this category is for</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.TaskMemoryAllocationParameterCategory">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMemoryAllocationParameterCategory.CodeSize">
            <summary>Allows access to the CodeSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.CodeSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.CodeSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;CodeSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/CodeSize.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">CodeSize</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMemoryAllocationParameterCategory.DataSize">
            <summary>Allows access to the DataSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.DataSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.DataSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;DataSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DataSize.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DataSize</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMemoryAllocationParameterCategory.StackSize">
            <summary>Allows access to the StackSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.StackSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.StackSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;StackSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/StackSize.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">StackSize</a></remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultWaitMode">
            <summary>Allows access to the DefaultWaitMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultWaitMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultWaitMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultWaitMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultWaitMode.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultWaitMode</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultSCurve">
            <summary>Allows access to the DefaultSCurve Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultSCurve;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultSCurve

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultSCurve;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultSCurve.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultSCurve</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultCoordinatedSpeed">
            <summary>Allows access to the DefaultCoordinatedSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultCoordinatedSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultCoordinatedSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampRate">
            <summary>Allows access to the DefaultCoordinatedRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultCoordinatedRampRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultCoordinatedRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultDependentCoordinatedRampRate">
            <summary>Allows access to the DefaultDependentCoordinatedRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultDependentCoordinatedRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultDependentCoordinatedRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultDependentCoordinatedRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultDependentCoordinatedRampRate.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultDependentCoordinatedRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampMode">
            <summary>Allows access to the DefaultCoordinatedRampMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultCoordinatedRampMode.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultCoordinatedRampMode</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampTime">
            <summary>Allows access to the DefaultCoordinatedRampTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultCoordinatedRampTime.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultCoordinatedRampTime</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampDistance">
            <summary>Allows access to the DefaultCoordinatedRampDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultCoordinatedRampDistance.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultCoordinatedRampDistance</a></remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TaskMotionParameterCategory.DefaultDependentCoordinatedSpeed">
            <summary>Allows access to the DefaultDependentCoordinatedSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.Ensemble</li><li>
						Aerotech.Ensemble.Parameters
					</li></ul><code lang="C#">Controller myController = Controller.Connect()["ControllerName"];

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultDependentCoordinatedSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resseting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code lang="VB.NET">Dim myController As Controller = Controller.Connect()("ControllerName")

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultDependentCoordinatedSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code lang="C++">Controller^ myController = Controller::Connect()[L"ControllerName"];

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultDependentCoordinatedSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mk:@MSITStore:Ensemble.chm::/Parameters/DefaultDependentCoordinatedSpeed.html&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;">DefaultDependentCoordinatedSpeed</a></remarks>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Variable">
            <summary>Represents a variable</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Variable.#ctor(System.String,Aerotech.AeroBasic.Coff.AerobasicType,Aerotech.Ensemble.Tasks.VariableScope)">
            <summary>Create a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Variable.Name">
            <summary>The name of the variable</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Variable.Type">
            <summary>The type of the variable</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Variable.ScopeType">
            <summary>The scope of the variable</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Variable.DebugPath">
            <summary>The debug path of the variable</summary>
            <remarks>Used for underlying coff name</remarks>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.TypedVariable`1">
            <summary>Represents a variable (with more type information than <see cref="T:Aerotech.AeroBasic.Coff.Variable"></see>)</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.TypedVariable`1.#ctor(System.String,Aerotech.AeroBasic.Coff.AerobasicType,Aerotech.Ensemble.Tasks.VariableScope,Aerotech.AeroBasic.Coff.Scope{`0})">
            <summary>Create a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.TypedVariable`1.Scope">
            <summary>The scope of the variable</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.TypedVariable`1.DebugPath">
            <summary>The debug path of the variable</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Global">
            <summary>A global variable</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Global.#ctor(System.String,Aerotech.AeroBasic.Coff.AerobasicType,Aerotech.AeroBasic.Coff.Library)">
            <summary>Create a new instance</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Argument">
            <summary>A function argument</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Local">
            <summary>A function local</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.VariableNavigator">
            <summary>Allows navigation of a variable</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.VariableNavigator.#ctor(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType)">
            <summary>Create a new instance</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.VariableNavigator.Create(Aerotech.AeroBasic.Coff.Variable)">
            <summary>Create a new navigator</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.VariableNavigator.Create(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType)">
            <summary>Figures out which type to start</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.VariableNavigator.Create(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType,System.String,System.String)">
            <summary>Create a new navigator with specified paths</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.LocalDebugPath">
            <summary>The local debug path</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.LocalAerobasicPath">
            <summary>The local aerobasic path</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.Variable">
            <summary>The variable that is being navigated</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.Type">
            <summary>The type of the current point in navigation</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.DebugPath">
            <summary>The full debug path of the current navigation point</summary>
            <remarks>Used for underlying coff name</remarks>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.AerobasicPath">
            <summary>The full path in Aerobasic format of the current navigation point</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.DebugScopePath">
            <summary>The debug path of the current navigation point from the scope</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.VariableNavigator.AerobasicScopePath">
            <summary>The path of the current navigation point in Aerobasic format from the scope</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.FundamentalNavigator">
            <summary>A fundamental navigation point</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.FundamentalNavigator.#ctor(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType)">
            <summary>Creates a new instance</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.FundamentalNavigator.#ctor(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType,System.String,System.String)">
            <summary>Creates a new instance</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.StructureNavigator">
            <summary>A structure navigation point</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.StructureNavigator.#ctor(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType)">
            <summary>Creates a new instance</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.StructureNavigator.#ctor(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType,System.String,System.String)">
            <summary>Creates a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.StructureNavigator.Type">
            <summary>More type specific <see cref="P:Aerotech.AeroBasic.Coff.VariableNavigator.Type"></see></summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.StructureNavigator.Item(System.String)">
            <summary>Creates a navigator for a given field</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.StructureNavigator.Item(System.Int32)">
            <summary>Creates a navigator for a given field</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.ArrayNavigator">
            <summary>An array navigation point</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.ArrayNavigator.#ctor(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType)">
            <summary>Creates a new instance</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.ArrayNavigator.#ctor(Aerotech.AeroBasic.Coff.Variable,Aerotech.AeroBasic.Coff.AerobasicType,System.String,System.String)">
            <summary>Creates a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.ArrayNavigator.Type">
            <summary>More type specific <see cref="P:Aerotech.AeroBasic.Coff.VariableNavigator.Type"></see></summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.ArrayNavigator.Item(System.Int32)">
            <summary>Creates a navigator for a given entry</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Scope`1">
            <summary>Represents a scope for variable declaration</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Scope`1.AddVariable(`0)">
            <summary>Adds a variable to this scope</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Scope`1.Variables">
            <summary>The variables declared in this scope</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Scope`1.DebugPath">
            <summary>The debug path of this scope</summary>
            <remarks>Used for underlying coff name</remarks>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Library">
            <summary>Represents a library</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Library.#ctor(System.String,System.Int32)">
            <summary>Constructs a new instance</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Library.AddFile(Aerotech.AeroBasic.Coff.AerobasicFile)">
            <summary>Adds a file to this library</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Library.AddType(Aerotech.AeroBasic.Coff.AerobasicType)">
            <summary>Adds a type to this library</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Library.ResolveTypeName(System.String)">
            <summary>Resolves a type name in this library</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Library.Path">
            <summary>The path of this library</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Library.Number">
            <summary>The number of this library</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Library.Types">
            <summary>Types declared in this library</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Library.Files">
            <summary>The file composing this library</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Library.DebugPath">
            <summary>The debug path of this library</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Function">
            <summary>Represents a function</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Function.#ctor(System.String,Aerotech.AeroBasic.Coff.AerobasicFile)">
            <summary>Constructs a new instance</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Function.AddStatement(System.Int32)">
            <summary>Adds a statement to this function</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Function.Body">
            <summary>The contents of the function</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Function.Name">
            <summary>The name of the function</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Function.File">
            <summary>The file in which this function was declared</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Function.Statements">
            <summary>The statements comprising this function</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Function.ReturnType">
            <summary>The return type of this function (if any)</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Function.DebugPath">
            <summary>The debug path of this function</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Block">
            <summary>Represents the body of a function</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Block.#ctor(Aerotech.AeroBasic.Coff.Function)">
            <summary>Constructs a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Block.Function">
            <summary>The function which this body is for</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Block.DebugPath">
            <summary>The debug path of this block</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.AerobasicFile">
            <summary>Represents a source file that is part of the binary's source</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicFile.#ctor(Aerotech.AeroBasic.Coff.Library,System.Int32,System.String)">
            <summary>Constructs a new object</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicFile.ResolveStatement(System.Int32)">
            <summary>Resolves statement to line number</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicFile.ResolveLine(System.Int32)">
            <summary>Resolves line number to statement</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicFile.AddStatement(System.Int32,System.Int32)">
            <summary>Add a statement to this file</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicFile.AddFunction(Aerotech.AeroBasic.Coff.Function)">
            <summary>Adds a function to this file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFile.Library">
            <summary>The library that this file is a part of</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFile.Number">
            <summary>The number of this source file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFile.Path">
            <summary>The path of this source file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFile.Functions">
            <summary>Functions declared in this source file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFile.Statements">
            <summary>The statements in this file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFile.Lines">
            <summary>The lines in this file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFile.DebugPath">
            <summary>The debug path</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Symbols">
            <summary>Contains all the symbols data</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.Coff.Symbols.fundamentalTypes">
            <summary>Contains all fundamental types, so they can be reused</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Symbols.AddLibrary(Aerotech.AeroBasic.Coff.Library)">
            <summary>Adds the library to the symbols</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Symbols.ResolveTypeName(System.Collections.Generic.KeyValuePair{System.String,System.Int32})">
            <summary>Resolves a type name to a definition</summary>
            <param name="typeName">The type name and library it belongs to</param>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Symbols.ResolveFundamental(Aerotech.Ensemble.Tasks.VariableType)">
            <summary>Resolves a type to a fundamental type</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Symbols.Libraries">
            <summary>The libraries that comprize this binary</summary>
            <remarks>The main file is library #0</remarks>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.Symbols.Optimizer">
            <summary>Class for faster accessing of data</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.SymbolsOptimizer">
            <summary>Allows for faster access to data in <see cref="T:Aerotech.AeroBasic.Coff.Symbols"></see></summary>
            <remarks>Optimization is done on demand the first time it is necessary</remarks>
        </member>
        <member name="F:Aerotech.AeroBasic.Coff.SymbolsOptimizer.symbols">
            <summary>The symbols to optimize</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.Coff.SymbolsOptimizer.optimized">
            <summary>Whether optimization has been constructed</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.Coff.SymbolsOptimizer.statement2scope">
            <summary>statement-&gt;Scope Location</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.Coff.SymbolsOptimizer.path2file">
            <summary>Path-&gt;file definition</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.SymbolsOptimizer.#ctor(Aerotech.AeroBasic.Coff.Symbols)">
            <summary>Constructs a new instance</summary>
            <remarks>Lightweight construction (very little code in constructor)</remarks>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.SymbolsOptimizer.ResolveStatement(System.Int32)">
            <summary>Get the scope representing a given statement</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.SymbolsOptimizer.ResolveFilePoint(Aerotech.Common.FilePoint)">
            <summary>Resolve a file point to a statement</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.SymbolsOptimizer.ResolvePath(System.String)">
            <summary>Resolve a path to a class representing that path</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.SymbolsOptimizer.Location">
            <summary>Represents a scope of a statement</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.SymbolsOptimizer.Location.#ctor(Aerotech.Common.FilePoint,Aerotech.AeroBasic.Coff.Library,Aerotech.AeroBasic.Coff.Function)">
            <summary>Constructs a new scope object</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.SymbolsOptimizer.Location.FilePoint">
            <summary>The location of the scope</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.SymbolsOptimizer.Location.Library">
            <summary>The library in which the scope is</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.SymbolsOptimizer.Location.Function">
            <summary>The function (if any) in which the scope is</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.AerobasicType">
            <summary>An aerobasic type</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicType.#ctor(Aerotech.AeroBasic.Coff.Library,System.String)">
            <summary>Constructs a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicType.Name">
            <summary>The name of the type</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicType.Library">
            <summary>The library in which this type is declared</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.AerobasicStructure">
            <summary>An aerobasic structure (type)</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicStructure.#ctor(Aerotech.AeroBasic.Coff.Library,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Aerotech.AeroBasic.Coff.AerobasicType}})">
            <summary>Constructs a new instance</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.Coff.AerobasicStructure.fields">
            <summary>Contains the data about the fields</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicStructure.Item(System.String)">
            <summary>Gets the type of a field</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicStructure.Fields">
            <summary>Gets all the fields (in order)</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.AerobasicFundamental">
            <summary>Represents a fundamental (simple) type</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicFundamental.#ctor(Aerotech.Ensemble.Tasks.VariableType)">
            <summary>Constructs a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicFundamental.Type">
            <summary>The kind of type this is</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.AerobasicArray">
            <summary>Represents an array</summary>
            <remarks>Multi dimensional arrays are represented as arrays of array</remarks>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.AerobasicArray.#ctor(System.Int32[],Aerotech.AeroBasic.Coff.AerobasicType)">
            <summary>Constructs a new instance</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicArray.Size">
            <summary>The size of the array</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.Coff.AerobasicArray.ElementType">
            <summary>The type of the elements of the array</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Parser">
            <summary>Parses the coff xml data into the <see cref="T:Aerotech.AeroBasic.Coff.Symbols"></see> structure</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.Coff.Parser.fundamentalType2variableType">
            <summary>Look-Up-Table</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.LoadSymbols(System.String)">
            <summary>Loads the coff symbols into <see cref="T:Aerotech.AeroBasic.Coff.Symbols"></see></summary>
            <param name="xmlDataSource">The coff data</param>
            <returns>The processed symbols</returns>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.LoadLibraries(Aerotech.AeroBasic.Coff.Symbols,System.Xml.XmlDocument)">
            <summary>Initializes <see cref="P:Aerotech.AeroBasic.Coff.Symbols.Libraries"></see></summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.LoadFiles(Aerotech.AeroBasic.Coff.Symbols,System.Xml.XmlDocument)">
            <summary>Initializes <see cref="P:Aerotech.AeroBasic.Coff.Library.Files"></see></summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.LoadLines(Aerotech.AeroBasic.Coff.Symbols,System.Xml.XmlDocument)">
            <summary>Initializes <see cref="P:Aerotech.AeroBasic.Coff.AerobasicFile.Statements"></see> and <see cref="P:Aerotech.AeroBasic.Coff.AerobasicFile.Lines"></see></summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.LoadTypes(Aerotech.AeroBasic.Coff.Symbols,System.Xml.XmlDocument)">
            <summary>Initializes <see cref="P:Aerotech.AeroBasic.Coff.Library.Types"></see></summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.LoadGlobals(Aerotech.AeroBasic.Coff.Symbols,System.Xml.XmlDocument)">
            <summary>Initializes <see cref="P:Aerotech.AeroBasic.Coff.Scope`1.Variables"></see> for <see cref="T:Aerotech.AeroBasic.Coff.Library"></see></summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.LoadFunctions(Aerotech.AeroBasic.Coff.Symbols,System.Xml.XmlDocument)">
            <summary>Initializes <see cref="P:Aerotech.AeroBasic.Coff.AerobasicFile.Functions"></see></summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.SplitEntityName(System.String)">
            <summary>Splits a complex entity name into parts</summary>
            <param name="name">The name to split</param>
            <returns>The entity name and the library number</returns>
        </member>
        <member name="M:Aerotech.AeroBasic.Coff.Parser.GetVariableType(Aerotech.AeroBasic.Coff.Symbols,System.Xml.XmlElement)">
            <summary>Gets the type represented by current variable declaration</summary>
            <param name="symbols">The symbols in which to resolve the type</param>
            <param name="variableDeclaration">The type declaration to resolve</param>
            <returns>The type represented by <paramref name="variableDeclaration"></paramref></returns>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Parser.DerivedType">
            <summary>coff e_type[4:5]</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Parser.FundamentalType">
            <summary>coff e_type[0:3]</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Coff.Parser.StorageType">
            <summary>coff e_sclass</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Commands.AxesSelectionCommands">
            <summary>Allows the selection of axes to execute commands on</summary>
            <remarks>
            	See <see cref="M:Aerotech.Ensemble.Commands.AxesSelectionCommands.Select(System.String[])"></see> for more information
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesSelectionCommands.Select(Aerotech.Ensemble.AxisMask[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisMasks">The masks of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesSelectionCommands.Select(System.String[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNames">The names of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Commands.AxesSelectionCommands.Select(System.Int32[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNumbers">The axis numbers of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.AxesSelectionCommands.Item(Aerotech.Ensemble.AxisMask[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisMasks">The masks of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.AxesSelectionCommands.Item(System.String[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNames">The names of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Commands.AxesSelectionCommands.Item(System.Int32[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNumbers">The axis numbers of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="T:Aerotech.Ensemble.Controller">
            <summary>
            Allows to communicate with controllers on the network
            </summary>
            <remarks>
            	<para>
            		You can connect to the mapped controllers by calling the <see cref="M:Aerotech.Ensemble.Controller.Connect"></see>
            		method, and then access the controllers from <see cref="P:Aerotech.Ensemble.Controller.ConnectedControllers"></see>.
            	</para>
            	<para>
            		To find out what controllers are available to be connected (all that are on the network),
            		call the <see cref="M:Aerotech.Ensemble.Controller.Identify"></see>.  To configure which controllers are mapped
            		use the <see cref="P:Aerotech.Ensemble.Controller.Configuration"></see>.
            	</para>
            </remarks>
            <summary>
            Represents a controller
            </summary>
            <remarks>
            	<para>
            		This class represents one controller to which this machine is connected.  It allows all
            		the access and functionality that is available throught its members.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.Connect">
            <summary>
            Connect to active controllers
            </summary>
            <remarks>
            For a list of active controllers see <see cref="P:Aerotech.Ensemble.Controller.Configuration"></see>
            </remarks>
            <returns>The controllers one connected to</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Print out the name of the controller.
        Console::WriteLine("Controller Name: {0}", myController-&gt;Information-&gt;Name);
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Print out the name of the controller.
        Console.WriteLine("Controller Name: {0}", myController.Information.Name);
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Print out the name of the controller.
        Console.WriteLine("Controller Name: {0}", myController.Information.Name)
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.Disconnect">
            <summary>
            Disconnect from active controllers
            </summary>
            <remarks>
            This stops any <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>s running
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Print out the name of the controller.
        Console::WriteLine("Controller Name: {0}", myController-&gt;Information-&gt;Name);
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Print out the name of the controller.
        Console.WriteLine("Controller Name: {0}", myController.Information.Name);
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Print out the name of the controller.
        Console.WriteLine("Controller Name: {0}", myController.Information.Name)
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.Identify">
            <summary>
            Identifies the controllers on the network
            </summary>
            <returns>A set of <see cref="T:Aerotech.Ensemble.Communication.NetworkNode"></see>s for controller setup and basic identification</returns>
            <remarks>
            This returns all available controllers, whether or not they are active.
            This does not create a connection to the controllers.
            These could be passed to <see cref="P:Aerotech.Ensemble.Controller.Configuration"></see> to configure active controllers.
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller found and its communication type.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("		Communication Type: {0}", networkNode-&gt;CommunicationType);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\t\tCommunication Type: {0}", networkNode.CommunicationType);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.#ctor(Aerotech.Ensemble.Communication.ConnectionInfo)">
            <summary>
            Instantiates a new instance of the <see cref="T:Aerotech.Ensemble.Controller"></see>
            </summary>
            <param name="connInfo">The connection information of the controller</param>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.Disconnect(System.Boolean)">
            <summary>
            Disconnects the controller from the network
            </summary>
            <param name="noCommunications">Whether or not to do any communications to the controller</param>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.Reset">
            <summary>
            Resets the controller
            </summary>
            <remarks>
            	<note>
            		Resetting the controller can result in unexpected behavior.
            	</note>
            	<para>
            		Resetting the controller without calling the <see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.Commit"></see> can
            		result in parameter values being lost.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.Reset(System.Boolean)">
            <summary>
            Resets the controller
            </summary>
            <param name="restartPrograms">Whether or not to restart the autorunned programs</param>
            <remarks>
            	<note>
            		Resetting the controller can result in unexpected behavior.
            	</note>
            	<para>
            		Resetting the controller without calling the <see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.Commit"></see> can
            		result in parameter values being lost.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.ChangePassword(System.String,System.String)">
            <summary>
            Changes the password on the controller
            </summary>
            <param name="oldPassword">The old password</param>
            <param name="newPassword">The new password</param>
            <remarks>
            	<para>
            		This password is used with the <c>CHECKPASSWORD</c> command.
            	</para>
            	<note>
            		This is <strong>not</strong> the password for changing the name,
            		<see cref="M:Aerotech.Ensemble.Communication.NetworkNode.LockName(System.String)"></see> for the controller name locking.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Controller.EnumerateAxes">
            <summary>
            Enumerates the axes
            </summary>
            <remarks>
            	<para>
            		This call tells the Controller to reenumerate the axes that it has so
            		that any modifications to the chain or the axis numbers will be reloaded.
            	</para>
            	<note>
            		<strong>This results in the <see cref="T:Aerotech.Ensemble.Controller"></see> becoming disconnected</strong>
            	</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.Configuration">
            <summary>
            Provides functionality for selecting active controllers
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.ConnectedControllers">
            <summary>
            The controllers the network is connected to
            </summary>
            <remarks>
            To initialize this list, call <see cref="M:Aerotech.Ensemble.Controller.Connect"></see>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Print out the name of the controller.
        Console::WriteLine("Controller Name: {0}", myController-&gt;Information-&gt;Name);
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Print out the name of the controller.
        Console.WriteLine("Controller Name: {0}", myController.Information.Name);
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Print out the name of the controller.
        Console.WriteLine("Controller Name: {0}", myController.Information.Name)
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.EthernetSettings">
            <summary>
            Provides access to the ethernet settings
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.ConnectionInfo">
            <summary>The connection information of this controller</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.Information">
            <summary>
            Provides access to information about the controller
            </summary>
            <remarks>
            	<para>
            		This collection can be used to find out which axes are available, what are their names,
            		numbers, etc. and the communication type, etc. about the controller.
            		See <see cref="T:Aerotech.Ensemble.Information.AxisInfo"></see> for more information.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.IsConnected">
            <summary>
            Specifies whether or not this controller is connected
            </summary>
            <remarks>
                <para>
                    If true, the controller is connected, false otherwise.
                </para>
            	<para>
            		A controller can become disconnected if there happen to be communication errors
            		while communicating with it.  A controller can be programatically disconnected by
            		calling the <see cref="M:Aerotech.Ensemble.Controller.Disconnect"></see>
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.Number">
            <summary>
            The number of the controller in the core
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.Parameters">
            <summary>
            Provides access to the parameters
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.DataCollection">
            <summary>
            Provides access to diagnostics and data collection
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.DataCollection</li>
<li>Aerotech.Ensemble.Information</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController-&gt;Information-&gt;Axes-&gt;Count;
        int pointsToCollect = 1000;
        // Tell the controller to collect the specified points of data for all axes.
        myController-&gt;DataCollection-&gt;PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController-&gt;DataCollection-&gt;StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData^&gt;^ axesPositionCommand = myController-&gt;DataCollection-&gt;Command-&gt;Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData^&gt;^ axesPositionFeedback = myController-&gt;DataCollection-&gt;Feedback-&gt;Retrieve(pointsToCollect);
        // Loop over each axis.
        for each (AxisInfo^ axisInfo in myController-&gt;Information-&gt;Axes)
        {
            for (int i = 0 ; (i &lt; pointsToCollect); i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console::WriteLine("Axis {0}, Point {1}", axisInfo-&gt;Name, i);
                Console::WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Error:    {0}", (axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i] - axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]));
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController.Information.Axes.Count;
        int pointsToCollect = 0x3e8;
        // Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData&gt; axesPositionCommand = myController.DataCollection.Command.Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData&gt; axesPositionFeedback = myController.DataCollection.Feedback.Retrieve(pointsToCollect);
        // Loop over each axis.
        foreach (AxisInfo axisInfo in myController.Information.Axes)
        {
            for (int i = 0; i &lt; pointsToCollect; i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i);
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Error:    {0}", axesPositionCommand[axisInfo.Name].Position[i] - axesPositionFeedback[axisInfo.Name].Position[i]);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Declare number of axes to collect from and the number of data points to collect.
        Dim numAxes As Integer = myController.Information.Axes.Count
        Dim pointsToCollect As Integer = &amp;H3E8
        ' Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect
        ' Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005)
        ' Retrieve the position command and position feedback data.
        Dim axesPositionCommand As AxesDataContainer(Of AxisCommandData) = myController.DataCollection.Command.Retrieve(pointsToCollect)
        Dim axesPositionFeedback As AxesDataContainer(Of AxisFeedbackData) = myController.DataCollection.Feedback.Retrieve(pointsToCollect)
        ' Loop over each axis.
        Dim axisInfo As AxisInfo
        For Each axisInfo In myController.Information.Axes
            Dim i As Integer
            For i = 0 To pointsToCollect - 1
                ' Print out the collected data, and compute position error based on the data by subtracting
                ' the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i)
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Error:    {0}", (axesPositionCommand.Item(axisInfo.Name).Position(i) - axesPositionFeedback.Item(axisInfo.Name).Position(i)))
            Next i
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.Commands">
            <summary>
            Provides access to execute immediate commands on the controller
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.Tasks">
            <summary>
            Provides access to handling of the tasks and programs running in them
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.ControlCenter">
            <summary>
            Provides access to polling of data and control of the controller
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Controller.FileManager">
            <summary>
            Provides access to the file system on the controller
            </summary>
        </member>
        <member name="E:Aerotech.Ensemble.Controller.IsConnectedChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Controller.IsConnected"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Communication.NetworkNode">
            <summary>
            Represents a controller node on the network
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Communication.NetworkNodeAddress">
            <summary>
            Represents an address of a controller
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkNodeAddress.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:Aerotech.Ensemble.Communication.NetworkNodeAddress"></see> to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if both <see cref="P:Aerotech.Ensemble.Communication.NetworkNodeAddress.Name"></see> and <see cref="P:Aerotech.Ensemble.Communication.NetworkNodeAddress.CommunicationType"></see> are the same</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkNodeAddress.GetHashCode">
            <summary>
            Provides a hash function for this type
            </summary>
            <returns>The hash code for this class</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNodeAddress.Name">
            <summary>The name of the controller</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller found and its communication type.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("		Communication Type: {0}", networkNode-&gt;CommunicationType);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\t\tCommunication Type: {0}", networkNode.CommunicationType);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNodeAddress.CommunicationType">
            <summary>The communication type that is being used</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller found and its communication type.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("		Communication Type: {0}", networkNode-&gt;CommunicationType);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\t\tCommunication Type: {0}", networkNode.CommunicationType);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkNode.ChangeEthernet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Changes the ethernet settings of the controller
            </summary>
            <param name="ipAddress">The new IP address to use</param>
            <param name="subnetMask">The new subnet mask to use</param>
            <param name="gateway">The new gateway to use</param>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkNode.LockName(System.String)">
            <summary>
            Locks the name of the controller
            </summary>
            <param name="lockCode">The password to lock the name with</param>
            <remarks>
            This will prevent a person not knowing the <paramref name="lockCode"></paramref> from changing the name of the controller.
            See <see cref="M:Aerotech.Ensemble.Communication.NetworkNode.UnLockName(System.String)"></see> for unlocking the name so it can be changed.
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkNode.UnLockName(System.String)">
            <summary>
            Unlocks the name of a controller
            </summary>
            <param name="unLockCode">The password to unlock the name with</param>
            <remarks>
            This will allow any person to change the name of the controller.
            See <see cref="M:Aerotech.Ensemble.Communication.NetworkNode.LockName(System.String)"></see> for locking the name so it cannot be changed.
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.Name">
            <summary>The name of the controller</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller found and its communication type.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("		Communication Type: {0}", networkNode-&gt;CommunicationType);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\t\tCommunication Type: {0}", networkNode.CommunicationType);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Communication.NetworkNode.NameChanged">
            <summary>
            Raised whenever <see cref="P:Aerotech.Ensemble.Communication.NetworkNode.Name"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.MACAddress">
            <summary>
            The MAC address of the controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.IPAddress">
            <summary>
            The IP address of the controller
            </summary>
            <remarks>
            To modify, call <see cref="M:Aerotech.Ensemble.Communication.NetworkNode.ChangeEthernet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)"></see>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Communication.NetworkNode.IPAddressChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Communication.NetworkNode.IPAddress"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.SubnetAddress">
            <summary>
            The subnet mask of the controller
            </summary>
            <remarks>
            To modify, call <see cref="M:Aerotech.Ensemble.Communication.NetworkNode.ChangeEthernet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)"></see>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Communication.NetworkNode.SubnetAddressChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Communication.NetworkNode.SubnetAddress"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.GatewayAddress">
            <summary>
            The gateway address of the controller
            </summary>
            <remarks>
            To modify, call <see cref="M:Aerotech.Ensemble.Communication.NetworkNode.ChangeEthernet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)"></see>
            </remarks>
            <include file="examples.xml" path="/*/NetworkNode/Example[@name=&quot;IdentifyAdvanced&quot;]/*"></include>
        </member>
        <member name="E:Aerotech.Ensemble.Communication.NetworkNode.GatewayAddressChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Communication.NetworkNode.GatewayAddress"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.Version">
            <summary>
            The version information of the controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.UsbId">
            <summary>
            The USB Id of the controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.DHCPActive">
            <summary>
            Whether or not the DHCP is active on the controller
            </summary>
            <remarks>
                If true, DHCP is active, false otherwise.
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Communication.NetworkNode.DHCPActiveChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Communication.NetworkNode.DHCPActive"></see> changes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.LEDToggle">
            <summary>
            Whether or not the LED is blinking (toggling)
            </summary>
            <remarks>
                If true, the LED is blinking (toggling), false otherwise.
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Communication.NetworkNode.LEDToggleChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Communication.NetworkNode.LEDToggle"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.IsNameLocked">
            <summary>
            Whether or not the name of the controller is locked
            </summary>
            <remarks>
            	<para>
            		If true, the controller is locked, otherwise false.
            	</para>
            	<para>
            		To lock or unlock the name, see <see cref="M:Aerotech.Ensemble.Communication.NetworkNode.LockName(System.String)"></see> and <see cref="M:Aerotech.Ensemble.Communication.NetworkNode.UnLockName(System.String)"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Communication.NetworkNode.IsNamedLockedChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Communication.NetworkNode.IsNameLocked"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.MasterType">
            <summary>
            The type of the board that is functioning as the master for the controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkNode.IsEpaq">
            <summary>
            Whether or not the controller is an Epaq
            </summary>
            <remarks>
                If true, the controller is an Epaq, false otherwise.
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller and diagnostic information.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("\n	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("	Versions:");
            Console::WriteLine("		Firmware: {0}", networkNode-&gt;Version-&gt;FirmwareVersion);
            Console::WriteLine("		Hardware: {0}", networkNode-&gt;Version-&gt;HardwareVersion);
            Console::WriteLine("		FPGA: {0}", networkNode-&gt;Version-&gt;FPGAVersion);
            Console::WriteLine("	Master Type: {0}", networkNode-&gt;MasterType);
            Console::WriteLine("	Is Controller an Epaq: {0}", networkNode-&gt;IsEpaq);
            Console::WriteLine("	Is name locked: {0}", networkNode-&gt;IsNameLocked);
            Console::WriteLine("	Communication Type: {0}", networkNode-&gt;CommunicationType);
            if ((networkNode-&gt;CommunicationType == CommunicationType::Ethernet))
            {
                Console::WriteLine("		Is DHCP active: {0}", networkNode-&gt;DHCPActive);
                Console::WriteLine("		IP Address: {0}", networkNode-&gt;IPAddress);
                Console::WriteLine("		Subnet Address: {0}", networkNode-&gt;SubnetAddress);
                Console::WriteLine("		Gateway Address: {0}", networkNode-&gt;GatewayAddress);
                Console::WriteLine("		MAC Address: {0}", networkNode-&gt;MACAddress);
            }
            if ((networkNode-&gt;CommunicationType == CommunicationType::Usb))
            {
                Console::WriteLine("		USB ID: {0}", networkNode-&gt;UsbId);
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\n\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\tVersions:");
            Console.WriteLine("\t\tFirmware: {0}", networkNode.Version.FirmwareVersion);
            Console.WriteLine("\t\tHardware: {0}", networkNode.Version.HardwareVersion);
            Console.WriteLine("\t\tFPGA: {0}", networkNode.Version.FPGAVersion);
            Console.WriteLine("\tMaster Type: {0}", networkNode.MasterType);
            Console.WriteLine("\tIs Controller an Epaq: {0}", networkNode.IsEpaq);
            Console.WriteLine("\tIs name locked: {0}", networkNode.IsNameLocked);
            Console.WriteLine("\tCommunication Type: {0}", networkNode.CommunicationType);
            if (networkNode.CommunicationType == CommunicationType.Ethernet)
            {
                Console.WriteLine("\t\tIs DHCP active: {0}", networkNode.DHCPActive);
                Console.WriteLine("\t\tIP Address: {0}", networkNode.IPAddress);
                Console.WriteLine("\t\tSubnet Address: {0}", networkNode.SubnetAddress);
                Console.WriteLine("\t\tGateway Address: {0}", networkNode.GatewayAddress);
                Console.WriteLine("\t\tMAC Address: {0}", networkNode.MACAddress);
            }
            if (networkNode.CommunicationType == CommunicationType.Usb)
            {
                Console.WriteLine("\t\tUSB ID: {0}", networkNode.UsbId);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller and diagnostic information.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(10) &amp; ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; "Versions:")
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Firmware: {0}", networkNode.Version.FirmwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Hardware: {0}", networkNode.Version.HardwareVersion)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "FPGA: {0}", networkNode.Version.FPGAVersion)
            Console.WriteLine(ChrW(9) &amp; "Master Type: {0}", networkNode.MasterType)
            Console.WriteLine(ChrW(9) &amp; "Is Controller an Epaq: {0}", networkNode.IsEpaq)
            Console.WriteLine(ChrW(9) &amp; "Is name locked: {0}", networkNode.IsNameLocked)
            Console.WriteLine(ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
            If (networkNode.CommunicationType = CommunicationType.Ethernet) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Is DHCP active: {0}", networkNode.DHCPActive)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "IP Address: {0}", networkNode.IPAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Subnet Address: {0}", networkNode.SubnetAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Gateway Address: {0}", networkNode.GatewayAddress)
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "MAC Address: {0}", networkNode.MACAddress)
            End If
            If (networkNode.CommunicationType = CommunicationType.Usb) Then
                Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "USB ID: {0}", networkNode.UsbId)
            End If
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Communication.EthernetSettings">
            <summary>
            Allows to change the settings used for ethernet communications
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.EthernetSettings.Timeout">
            <summary>
            The timeout in milliseconds to use for communicating with controllers
            </summary>
            <remarks>
            Use this method to set the amount of time that Ethernet communications wait for a response from the 
            controller before trying again. Set the value between 50 and 5000 milliseconds. The default value 
            is 500 milliseconds, which is sufficient for most applications.
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.EthernetSettings.MaximumRetrys">
            <summary>
            The maximum number of retrys for communicating with a controller
            </summary>
            <remarks>
            This specifies the number of times to try to communicate with a controller if
            it fails to respond in <see cref="P:Aerotech.Ensemble.Communication.EthernetSettings.Timeout"></see>.
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Status.DelegateSpooler">
            <summary>
            Provides ability to spool (as in printer) delegates
            </summary>
            <remarks>
            This class is used when one needs to call delegates, but they want them to be called
            in a separate thread and also want only one be called at a time, so that if it takes
            a while for one to finish, subsequent ones for the same destionation will not be called.
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Status.DelegateSpooler.worker">
            <summary>
            The background thread that is doing the work
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.DelegateSpooler.delegates">
            <summary>
            The delegates that are the next in line to be executed
            </summary>
            <remarks>
            The index into this list is the pipe (destination number).
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DelegateSpooler.#ctor(System.String)">
            <summary>
            Starts the background thread
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DelegateSpooler.Set(System.Int32,System.Threading.ThreadStart)">
            <summary>
            Sets the delegate to be called for a specific pipe (destination)
            </summary>
            <param name="pipe">The pipe to use</param>
            <param name="del">The delegate to call</param>
            <remarks>
            This overwrites any previous delegates, unless they have been called already
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DelegateSpooler.ClearQueue">
            <summary>
            Clears the queue of delegates
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DelegateSpooler.InitQueue(System.Int32)">
            <summary>
            Initializes the queue to a specific set of pipes (destinations)
            </summary>
            <param name="pipes">The number of pipes (destinations) to have</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DelegateSpooler.IsPipeExecuting(System.Int32)">
            <summary>
            Whether there is currently a delegate in a pipe being executed
            </summary>
            <param name="pipe">The pipe number</param>
            <returns>If there is something executing</returns>
        </member>
        <member name="F:Aerotech.Ensemble.Status.DelegateSpooler.execed">
            <summary>
            DO NOT MODIFY/LOCK, ONLY READS ALLOWED
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DelegateSpooler.bgWorker">
            <summary>
            Does the actual work
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.Threader`1">
            <summary>
            Executes a specific command on an object every so often
            </summary>
            <typeparam name="TObject">The type of object on which to execute the command</typeparam>
        </member>
        <member name="F:Aerotech.Ensemble.Status.Threader`1.toPoll">
            <summary>
            The objects to poll
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.Threader`1.worker">
            <summary>
            The background thread that does the updating
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.Threader`1.threadPriority">
            <summary>
            The priority to use on the background thread
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.Threader`1.keepRunning">
            <summary>
            Tells the background thread whether it should keep running
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.Threader`1.threadMutex">
            <summary>
            The mutex to lock when accessing the thread (<see cref="F:Aerotech.Ensemble.Status.Threader`1.worker"></see>)
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.Threader`1.subscriptionMutex">
            <summary>
            The mutex to lock when accessing the subscriptions (events)
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.Threader`1.caller">
            <summary>
            The function on call (to execute on the object)
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.Threader`1.#ctor(Aerotech.Ensemble.Status.Threader{`0}.Caller,System.String)">
            <summary>
            Initializes this class
            </summary>
            <param name="caller">The delegate to call on the objects</param>
            <param name="name">The name for the background thread to use</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.Threader`1.AddSubscriber(`0)">
            <summary>
            Adds an object to be updated
            </summary>
            <param name="controller">The objec to add</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.Threader`1.RemoveSubscriber(`0,System.Int32)">
            <summary>
            Removes an object from updated ones
            </summary>
            <param name="controller">The object to remove</param>
            <param name="number">The number of the object to remove (pipe, destination)</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.Threader`1.StopAll">
            <summary>
            Stops the background thread
            </summary>
            <remarks>
            This call is blocking
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.Threader`1.bgWorker">
            <summary>
            The function that does the actual work
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.Threader`1.Spooler">
            <summary>
            Provides access to the delegate spooler
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.Threader`1.Interval">
            <summary>
            The interval at which the updates are done
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.Threader`1.Caller">
            <summary>
            The delegate that does the operation on the object
            </summary>
            <param name="obj">The object on which to operate</param>
            <param name="spooler">The spooler to whom to pass the events</param>
        </member>
        <member name="T:Aerotech.Ensemble.Status.ControllerEventArgs">
            <summary>
            The base class for classes containing event data related to controllers.
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.ControllerEventArgs.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.ControllerEventArgs"></see>
            </summary>
            <param name="controller">The controller with which the event data is associated</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControllerEventArgs.Controller">
            <summary>
            The controller associated with the event
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Status.ErrorEventArgs">
            <summary>
            Provides data for the error events
            </summary>
            <remarks>
            	<para>
            		This class provides data for the error handling events in the <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>;
            		an example is <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.ErrorOccurred"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.ErrorEventArgs.#ctor(Aerotech.Ensemble.Controller,System.Exception)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.ErrorEventArgs"></see>
            </summary>
            <param name="controller">The controller associated with the error</param>
            <param name="exception">The exception that occured</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ErrorEventArgs.Exception">
            <summary>
            The exception that caused the error to happen
            </summary>
            <remarks>
            	<para>
            		To figure out the exact error inspect the specific type of the exception.
            	</para>
            </remarks>
            <include file="examples.xml" path="/*/DiagPacketPoller/Example[@name=&quot;DiagPktPoller&quot;]/*"></include>
        </member>
        <member name="T:Aerotech.Ensemble.Status.NewDiagPacketArrivedEventArgs">
            <summary>
            Provides data for <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see>
            </summary>
            <remarks>
            	<para>
            		This class provides data for when the <see cref="T:Aerotech.Ensemble.Status.DiagPacketPoller"></see> retrieves
            		new diagnostic information from a controller.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.NewDiagPacketArrivedEventArgs.#ctor(Aerotech.Ensemble.Controller,Aerotech.Ensemble.Status.ControllerDiagPacket)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.NewDiagPacketArrivedEventArgs"></see>
            </summary>
            <param name="controller">The controller from which the data was retrieved</param>
            <param name="data">The diagnostic information</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.NewDiagPacketArrivedEventArgs.Data">
            <summary>
            The most recent diagnostics retrieved from the controller
            </summary>
            <include file="examples.xml" path="/*/DiagPacketPoller/Example[@name=&quot;DiagPktPoller&quot;]/*"></include> 
        </member>
        <member name="T:Aerotech.Ensemble.Status.NewTaskStatesArrivedEventArgs">
            <summary>
            Provides data for <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see>
            </summary>
            <remarks>
            	<para>
            		This class provides data for when the <see cref="T:Aerotech.Ensemble.Status.TaskStatesPoller"></see> retrieves
            		new task state information from a controller.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.NewTaskStatesArrivedEventArgs.#ctor(Aerotech.Ensemble.Controller,Aerotech.Common.Collections.INamedConstantCollection{Aerotech.Ensemble.Tasks.TaskState,Aerotech.Ensemble.TaskId})">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.NewTaskStatesArrivedEventArgs"></see>
            </summary>
            <param name="controller">The controller from which the data was retreived</param>
            <param name="taskStates">The task states</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.NewTaskStatesArrivedEventArgs.TaskStates">
            <summary>
            The most recent task state information retrieved from the controller
            </summary>
            <include file="examples.xml" path="/*/TaskStatesPoller/Example[@name=&quot;TaskStatesPoller&quot;]/*"></include>
        </member>
        <member name="T:Aerotech.Ensemble.Status.DiagPacketPoller">
            <summary>
            Allows to poll for diagnostic information from a controller in the background
            </summary>
            <remarks>
            	<para>
            		This class can be configured to retrieve <see cref="T:Aerotech.Ensemble.Status.ControllerDiagPacket"></see> from the controller
            		at a specified rate in a background thread (referred to as polling).  Each time a new 
            		<see cref="T:Aerotech.Ensemble.Status.ControllerDiagPacket"></see> is retrieved, an event is raised that contains the most up to date data.
            		If there are any errors during the retrieval of the data, the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.ErrorOccurred"></see> event will be raised.
            	</para>
            	<para>
            		To setup the polling of the data, register for the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see>, this will automatically start
            		the polling of the diagnostic information from the controller.  If you do not want the polling to start right away
            		set the <see cref="P:Aerotech.Ensemble.Status.DiagPacketPoller.AutoStart"></see> property.
            	</para>
            	<para>
            		The polling of the data can be suspended and resumed using <see cref="M:Aerotech.Ensemble.Status.DiagPacketPoller.Suspend"></see> and <see cref="M:Aerotech.Ensemble.Status.DiagPacketPoller.Resume"></see>.
            	</para>
            	<para>
            		The interval at which the data is updated is global for all the instances of <see cref="T:Aerotech.Ensemble.Status.DiagPacketPoller"></see> and
            		can be set by <see cref="P:Aerotech.Ensemble.Status.DiagPacketPoller.RefreshInterval"></see> property.  The background thread that does the polling does not need to
            		be shut down when exiting the application, and will automatically shut itself down when exiting the application.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Status.DiagPacketPoller.Threader">
            <summary>
            The threader that handles the executing of the events in a separate thread
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.DiagPacketPoller.subscriptionMutex">
            <summary>
            The object to lock on when adding/removing subscribers (events)
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.DiagPacketPoller.controller">
            <summary>
            The controller with which this class is associated
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.DiagPacketPoller.controllerResetting">
            <summary>
            Whether the controller is actively being reset
            </summary>
            <remarks>
            	Suspending on a Resetting, and resuming on a Reset is not sufficient because one could suspend between 
            	Resetting and Reset, and we would end up resuming when we should not have.
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DiagPacketPoller.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.DiagPacketPoller"></see>
            </summary>
            <param name="controller">The controller with which to associate this poller</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DiagPacketPoller.Suspend">
            <summary>
            Suspends the polling for diagnostic information
            </summary>
            <remarks>
            	<para>
            		Calling this method will suspend the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To resume the polling after it has been suspended, call the <see cref="M:Aerotech.Ensemble.Status.DiagPacketPoller.Resume"></see>.
            		To check the whether the polling is suspended or not, see <see cref="P:Aerotech.Ensemble.Status.DiagPacketPoller.IsSuspended"></see> property.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DiagPacketPoller.Resume">
            <summary>
            Resumes the polling for diagnostic information
            </summary>
            <remarks>
            	<para>
            		Calling this method will resume the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To suspend the polling, call the <see cref="M:Aerotech.Ensemble.Status.DiagPacketPoller.Suspend"></see> method.  It is possible to
            		register for the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see> event without starting the polling,
            		thus causing the polling to be suspended.  To acheive this, see <see cref="P:Aerotech.Ensemble.Status.DiagPacketPoller.AutoStart"></see>.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DiagPacketPoller.RaiseNewDiagPacketArrived(Aerotech.Ensemble.Status.ControllerDiagPacket)">
            <summary>
            Raises the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see>
            </summary>
            <param name="diagPacket">The diagnostic packet to pass to the event</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DiagPacketPoller.Aerotech#Ensemble#Status#IDataPoller#UnsubscribeAll">
            <summary>
            Unsubscribes everyone who is subscribed in the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see> and <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.ErrorOccurred"></see>
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DiagPacketPoller.RaiseErrorOccurred(System.Exception)">
            <summary>
            Raises the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.ErrorOccurred"></see>
            </summary>
            <param name="e">The exception to pass to the event</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.DiagPacketPoller.Update(Aerotech.Ensemble.Status.DelegateSpooler)">
            <summary>
            Does a retrieve from the controller
            </summary>
            <param name="spooler">The spooler to use to raise events</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DiagPacketPoller.IsSuspended">
            <summary>
            Whether the polling is suspended
            </summary>
            <remarks>
            	<para>
            		Polling can be suspended by calling the <see cref="M:Aerotech.Ensemble.Status.DiagPacketPoller.Suspend"></see>, and resumed by calling the
            		<see cref="M:Aerotech.Ensemble.Status.DiagPacketPoller.Resume"></see>.  If the polling is suspended, the background thread will not be
            		retrieving data from the controller, until it is resumed.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DiagPacketPoller.AutoStart">
            <summary>
            Whether to start polling when someone subscribes to the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see>
            </summary>
            <remarks>
            	<para>
            		The default is <c>true</c>.
            	</para>
            	<para>
            		When someone registers for the <see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see>
            		and this property is set to <c>true</c>, the polling will start automatically.
            		If, on the other hand, this property is set to <c>false</c>, when someone registers for the
            		<see cref="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived"></see> event, the polling will start in suspended mode.  To
            		start the polling after this, call the <see cref="M:Aerotech.Ensemble.Status.DiagPacketPoller.Resume"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DiagPacketPoller.Latest">
            <summary>
            The latest diagnostic packet that was retrieved from the controller
            </summary>
            <remarks>
            	<para>
            		This property is <c>null</c> when a diagnostic packet has not been retrieved from
            		the controller yet.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DiagPacketPoller.IsExecutingEvent">
            <summary>
            Tells whether there is currently an event being executed
            </summary>
        </member>
        <member name="E:Aerotech.Ensemble.Status.DiagPacketPoller.ErrorOccurred">
            <summary>
            Raised when an error occurs during retrieval of data from the controller
            </summary>
            <include file="examples.xml" path="/*/DiagPacketPoller/Example[@name=&quot;DiagPktPoller&quot;]/*"></include>
        </member>
        <member name="E:Aerotech.Ensemble.Status.DiagPacketPoller.NewDiagPacketArrived">
            <summary>
            Event that gets called when a new diagnostic packet has been retrieved
            </summary>
            <remarks>
            	<para>
            		Registering for this event, automatically starts the polling for new
            		diagnostic information.  To change this behavior see the <see cref="P:Aerotech.Ensemble.Status.DiagPacketPoller.AutoStart"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">

// This example shows how to connect to a controller and retrieve diagnostic packets via callback

ref class DiagPacketPoller
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
	        myController-&gt;ControlCenter-&gt;Diagnostics-&gt;NewDiagPacketArrived +=
	            gcnew EventHandler&lt;NewDiagPacketArrivedEventArgs^&gt;(NewDiagnosticPacketArrived);
	
	        // Register for the ErrorOccurred event to process any occurs that may occur during polling.
	        myController-&gt;ControlCenter-&gt;Diagnostics-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console::ReadLine();
    }
    public:
    static void NewDiagnosticPacketArrived(Object^ sender, NewDiagPacketArrivedEventArgs^ diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        for each (AxisDiagPacket^ axisDiagPacket in diagPacket-&gt;Data)
        {
            if (!axisDiagPacket-&gt;AxisFault-&gt;None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket-&gt;AxisFault-&gt;PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console::WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket-&gt;AxisName);
                }
                // To show all faults, do this:
                Console::WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket-&gt;AxisName, axisDiagPacket-&gt;AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
};


</code>
<code lang="C#">

// This example shows how to connect to a controller and retrieve diagnostic packets via callback

public class DiagPacketPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.Diagnostics.NewDiagPacketArrived += new EventHandler&lt;NewDiagPacketArrivedEventArgs&gt;(DiagPacketPoller.NewDiagnosticPacketArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.Diagnostics.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(DiagPacketPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console.ReadLine();
    }

    public static void NewDiagnosticPacketArrived(object sender, NewDiagPacketArrivedEventArgs diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        foreach (AxisDiagPacket axisDiagPacket in diagPacket.Data)
        {
            if (!axisDiagPacket.AxisFault.None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket.AxisFault.PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName);
                }
                // To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }
}


</code>
<code lang="VB.NET">

' This example shows how to connect to a controller and retrieve diagnostic packets via callback

Public Class DiagPacketPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.Diagnostics.NewDiagPacketArrived, New EventHandler(Of NewDiagPacketArrivedEventArgs)(AddressOf DiagPacketPoller.NewDiagnosticPacketArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.Diagnostics.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf DiagPacketPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a fault.
        Console.ReadLine
    End Sub

    Public Shared Sub NewDiagnosticPacketArrived(ByVal sender As Object, ByVal diagPacket As NewDiagPacketArrivedEventArgs)
        ' For each axis, check if faults exist, and then check for specific and generic faults.
        Dim axisDiagPacket As AxisDiagPacket
        For Each axisDiagPacket In diagPacket.Data
            If Not axisDiagPacket.AxisFault.None Then
                ' To check for a specific fault, you can do this:
                If axisDiagPacket.AxisFault.PositionErrorFault Then
                    ' Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName)
                End If
                ' To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault)
                ' From here, you can choose to clear the fault or take some action based on the fault.
            End If
        Next
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

End Class


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.DiagPacketPoller.RefreshInterval">
            <summary>
            The interval of retrieving of data
            </summary>
            <remarks>
            	<para>
            		The value is given in milliseconds.
            	</para>
            	<para>
            		This property specifies the interval at which the background thread polls for new
            		diagnostic information.  This value is global for all the <see cref="T:Aerotech.Ensemble.Status.DiagPacketPoller"></see> classes.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Status.TaskStatesPoller">
            <summary>
            Allows to poll for task state information from a controller in the background
            </summary>
            <remarks>
            	<para>
            		This class can be configured to retrieve task state information from the controller at a specified rate in a
            		background thread (referred to as polling).  Each time new task information is retrieved, an event is raised that contains
            		the most up to date data.  If there are any errors during the retrieval of the data, the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.ErrorOccurred"></see> event
            		will be raised.
            	</para>
            	<para>
            		To setup the polling of the data, register for the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see>, this will automatically start
            		the polling of the task state information from the controller.  If you do not want the polling to start right away,
            		set the <see cref="P:Aerotech.Ensemble.Status.TaskStatesPoller.AutoStart"></see> property.
            	</para>
            	<para>
            		The polling of the data can be suspended and resumed using <see cref="M:Aerotech.Ensemble.Status.TaskStatesPoller.Suspend"></see> and <see cref="M:Aerotech.Ensemble.Status.TaskStatesPoller.Resume"></see>.
            	</para>
            	<para>
            		The interval at which the data is updated is global for all the instances of <see cref="T:Aerotech.Ensemble.Status.TaskStatesPoller"></see> and
            		can be set by <see cref="P:Aerotech.Ensemble.Status.TaskStatesPoller.RefreshInterval"></see> property.  The background thread that does the polling does not need to
            		be shut down when exiting the application, and will automatically shut itself down when exiting the application.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Status.TaskStatesPoller.controller">
            <summary>
            The controller with which this class is associated
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.TaskStatesPoller.Threader">
            <summary>
            The threader that handles the executing of the events in a separate thread
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.TaskStatesPoller.subscriptionMutex">
            <summary>
            The object to lock on when adding/removing subscribers (events)
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.TaskStatesPoller.controllerResetting">
            <summary>
            Whether the controller is actively being reset
            </summary>
            <remarks>
            	Suspending on a Resetting, and resuming on a Reset is not sufficient because one could suspend between 
            	Resetting and Reset, and we would end up resuming when we should not have.
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.TaskStatesPoller.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.TaskStatesPoller"></see>
            </summary>
            <param name="controller">The controller with which to associate this poller</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.TaskStatesPoller.Suspend">
            <summary>
            Suspends the polling for task state information
            </summary>
            <remarks>
            	<para>
            		Calling this method will suspend the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To resume the polling after it has been suspended, call the <see cref="M:Aerotech.Ensemble.Status.TaskStatesPoller.Resume"></see>.
            		To check whether the polling is suspended or not, see <see cref="P:Aerotech.Ensemble.Status.TaskStatesPoller.IsSuspended"></see> property.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.TaskStatesPoller.Resume">
            <summary>
            Resumes the polling for task state information
            </summary>
            <remarks>
            	<para>
            		Calling this method will resume the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To suspend the polling, call the <see cref="M:Aerotech.Ensemble.Status.TaskStatesPoller.Suspend"></see> method.  It is possible to
            		register for the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see> event without starting the polling,
            		thus causing the polling to be suspended.  To acheive this, see <see cref="P:Aerotech.Ensemble.Status.TaskStatesPoller.AutoStart"></see>.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.TaskStatesPoller.Aerotech#Ensemble#Status#IDataPoller#UnsubscribeAll">
            <summary>
            Unsubscribes everyone who is subscribed in the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see> and <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.ErrorOccurred"></see>
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.TaskStatesPoller.RaiseErrorOccurred(System.Exception)">
            <summary>
            Raises the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.ErrorOccurred"></see>
            </summary>
            <param name="e">The exception to pass to the event</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.TaskStatesPoller.RaiseNewTaskStatesArrived(Aerotech.Common.Collections.INamedConstantCollection{Aerotech.Ensemble.Tasks.TaskState,Aerotech.Ensemble.TaskId})">
            <summary>
            Raises the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see>
            </summary>
            <param name="taskStates">The task states to pass to the event</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.TaskStatesPoller.Update(Aerotech.Ensemble.Status.DelegateSpooler)">
            <summary>
            Does a retrieve from the controller
            </summary>
            <param name="spooler">The spooler to use to raise events</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.TaskStatesPoller.IsSuspended">
            <summary>
            Whether the polling is suspended
            </summary>
            <remarks>
            	<para>
            		Polling can be supsended by calling <see cref="M:Aerotech.Ensemble.Status.TaskStatesPoller.Suspend"></see>, and resumed by calling the
            		<see cref="M:Aerotech.Ensemble.Status.TaskStatesPoller.Resume"></see>.  If the polling is suspended, the background thread will not be
            		retrieving data from the controller, until it is resumed.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.TaskStatesPoller.AutoStart">
            <summary>
            Whether to start polling when someone subscribes to the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see>
            </summary>
            <remarks>
            	<para>
            		The default is <c>true</c>.
            	</para>
            	<para>
            		When someone registers for the <see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see>
            		and this property is set to <c>true</c>, the polling will start automatically.
            		If, on the other hand, this property is set to <c>false</c>, when someone registers for the
            		<see cref="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived"></see> event, the polling will start in suspended mode.  To
            		start the polling after this, call the <see cref="M:Aerotech.Ensemble.Status.TaskStatesPoller.Resume"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.TaskStatesPoller.IsExecutingEvent">
            <summary>
            Tells whether there is currenty an event being executed
            </summary>
        </member>
        <member name="E:Aerotech.Ensemble.Status.TaskStatesPoller.NewTaskStatesArrived">
            <summary>
            Event that gets called when new task states has been retrieved
            </summary>
            <remarks>
            	<para>
            		Registering for this event, automatically starts the polling for new
            		diagnostic information.  To change this behavior, see the <see cref="P:Aerotech.Ensemble.Status.TaskStatesPoller.AutoStart"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">

ref class TaskStatesPoller abstract sealed
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
	        myController-&gt;ControlCenter-&gt;TaskStates-&gt;NewTaskStatesArrived +=
	            gcnew EventHandler&lt;NewTaskStatesArrivedEventArgs^&gt;(NewTaskStatesArrived);
	        // Register for the ErrorOccurred event to process any occurs that may occur during polling.
	        myController-&gt;ControlCenter-&gt;TaskStates-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
	    }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console::ReadLine();
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
    public:
    static void NewTaskStatesArrived(Object^ sender, NewTaskStatesArrivedEventArgs^ taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console::WriteLine("Task 1's State: {0}", taskStates-&gt;TaskStates[TaskId::T01]);
        Console::WriteLine("Task 2's State: {0}", taskStates-&gt;TaskStates[TaskId::T02]);
    }
};


</code>
<code lang="C#">

public static class TaskStatesPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.TaskStates.NewTaskStatesArrived += new EventHandler&lt;NewTaskStatesArrivedEventArgs&gt;(TaskStatesPoller.NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.TaskStates.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(TaskStatesPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine();
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewTaskStatesArrived(object sender, NewTaskStatesArrivedEventArgs taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates[TaskId.T01]);
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates[TaskId.T02]);
    }
}


</code>
<code lang="VB.NET">

Friend Class TaskStatesPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.TaskStates.NewTaskStatesArrived, New EventHandler(Of NewTaskStatesArrivedEventArgs)(AddressOf TaskStatesPoller.NewTaskStatesArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.TaskStates.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf TaskStatesPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewTaskStatesArrived(ByVal sender As Object, ByVal taskStates As NewTaskStatesArrivedEventArgs)
        ' Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates.Item(TaskId.T01))
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates.Item(TaskId.T02))
    End Sub

End Class


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Status.TaskStatesPoller.ErrorOccurred">
            <summary>
            Raised when an error occurs during retrieval of data from the controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">

ref class TaskStatesPoller abstract sealed
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
	        myController-&gt;ControlCenter-&gt;TaskStates-&gt;NewTaskStatesArrived +=
	            gcnew EventHandler&lt;NewTaskStatesArrivedEventArgs^&gt;(NewTaskStatesArrived);
	        // Register for the ErrorOccurred event to process any occurs that may occur during polling.
	        myController-&gt;ControlCenter-&gt;TaskStates-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
	    }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console::ReadLine();
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
    public:
    static void NewTaskStatesArrived(Object^ sender, NewTaskStatesArrivedEventArgs^ taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console::WriteLine("Task 1's State: {0}", taskStates-&gt;TaskStates[TaskId::T01]);
        Console::WriteLine("Task 2's State: {0}", taskStates-&gt;TaskStates[TaskId::T02]);
    }
};


</code>
<code lang="C#">

public static class TaskStatesPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.TaskStates.NewTaskStatesArrived += new EventHandler&lt;NewTaskStatesArrivedEventArgs&gt;(TaskStatesPoller.NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.TaskStates.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(TaskStatesPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine();
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewTaskStatesArrived(object sender, NewTaskStatesArrivedEventArgs taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates[TaskId.T01]);
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates[TaskId.T02]);
    }
}


</code>
<code lang="VB.NET">

Friend Class TaskStatesPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.TaskStates.NewTaskStatesArrived, New EventHandler(Of NewTaskStatesArrivedEventArgs)(AddressOf TaskStatesPoller.NewTaskStatesArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.TaskStates.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf TaskStatesPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewTaskStatesArrived(ByVal sender As Object, ByVal taskStates As NewTaskStatesArrivedEventArgs)
        ' Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates.Item(TaskId.T01))
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates.Item(TaskId.T02))
    End Sub

End Class


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.TaskStatesPoller.RefreshInterval">
            <summary>
            The interval of retrieving of data
            </summary>
            <remarks>
            	<para>
            		The value is given in milliseconds.
            	</para>
            	<para>
            		This property specifies the interval at which the background thread polls for new
            		diagnostic information.  This value is global for all the <see cref="T:Aerotech.Ensemble.Status.TaskStatesPoller"></see> classes.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Status.ControlCenter">
            <summary>
            Retrieves diagnostic data, callbacks, and task states in the background from a controller
            </summary>
            <remarks>
            	<para>
            		This class and its members can be setup to continuously poll the controller for
            		diagnostic data, callbacks information, and/or task states and raise events when
            		new data arrived.
            	</para>
            	<para>
            		The different data can be retrieved independently of each other, see
            		<see cref="P:Aerotech.Ensemble.Status.ControlCenter.Diagnostics"></see>, <see cref="P:Aerotech.Ensemble.Status.ControlCenter.Callbacks"></see>, and <see cref="P:Aerotech.Ensemble.Status.ControlCenter.TaskStates"></see> for
            		instructions on retrieving the specific data.  All of them architected the same way
            		and operate very similarly.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.ControlCenter.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Instantiates a new <see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>
            </summary>
            <param name="controller">The controller with which this class is associated</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.ControlCenter.UnsubscribeAll">
            <summary>
            Unsubscribes everyone from this class or any of its members
            </summary>
            <remarks>
            	<para>
            		This should not be used for normal operation, and is
            		designed to be used under extreme circumstances in which every one
            		who has registered for any events needs to be forcibly unsubscribed.
            	</para>
            	<para>
            		When using this method, anyone who is subscribed to any events will not be
            		notified, and therefore this operation could potentially cause invalid operation
            		of the program.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.ControlCenter.Disable">
            <summary>
            Disables all polling of this class and any of its members
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControlCenter.Diagnostics">
            <summary>
            Allows to setup polling for diagnostic information
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">

// This example shows how to connect to a controller and retrieve diagnostic packets via callback

ref class DiagPacketPoller
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
	        myController-&gt;ControlCenter-&gt;Diagnostics-&gt;NewDiagPacketArrived +=
	            gcnew EventHandler&lt;NewDiagPacketArrivedEventArgs^&gt;(NewDiagnosticPacketArrived);
	
	        // Register for the ErrorOccurred event to process any occurs that may occur during polling.
	        myController-&gt;ControlCenter-&gt;Diagnostics-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console::ReadLine();
    }
    public:
    static void NewDiagnosticPacketArrived(Object^ sender, NewDiagPacketArrivedEventArgs^ diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        for each (AxisDiagPacket^ axisDiagPacket in diagPacket-&gt;Data)
        {
            if (!axisDiagPacket-&gt;AxisFault-&gt;None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket-&gt;AxisFault-&gt;PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console::WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket-&gt;AxisName);
                }
                // To show all faults, do this:
                Console::WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket-&gt;AxisName, axisDiagPacket-&gt;AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
};


</code>
<code lang="C#">

// This example shows how to connect to a controller and retrieve diagnostic packets via callback

public class DiagPacketPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.Diagnostics.NewDiagPacketArrived += new EventHandler&lt;NewDiagPacketArrivedEventArgs&gt;(DiagPacketPoller.NewDiagnosticPacketArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.Diagnostics.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(DiagPacketPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console.ReadLine();
    }

    public static void NewDiagnosticPacketArrived(object sender, NewDiagPacketArrivedEventArgs diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        foreach (AxisDiagPacket axisDiagPacket in diagPacket.Data)
        {
            if (!axisDiagPacket.AxisFault.None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket.AxisFault.PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName);
                }
                // To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }
}


</code>
<code lang="VB.NET">

' This example shows how to connect to a controller and retrieve diagnostic packets via callback

Public Class DiagPacketPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.Diagnostics.NewDiagPacketArrived, New EventHandler(Of NewDiagPacketArrivedEventArgs)(AddressOf DiagPacketPoller.NewDiagnosticPacketArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.Diagnostics.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf DiagPacketPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a fault.
        Console.ReadLine
    End Sub

    Public Shared Sub NewDiagnosticPacketArrived(ByVal sender As Object, ByVal diagPacket As NewDiagPacketArrivedEventArgs)
        ' For each axis, check if faults exist, and then check for specific and generic faults.
        Dim axisDiagPacket As AxisDiagPacket
        For Each axisDiagPacket In diagPacket.Data
            If Not axisDiagPacket.AxisFault.None Then
                ' To check for a specific fault, you can do this:
                If axisDiagPacket.AxisFault.PositionErrorFault Then
                    ' Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName)
                End If
                ' To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault)
                ' From here, you can choose to clear the fault or take some action based on the fault.
            End If
        Next
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

End Class


</code>

</example> 
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControlCenter.TaskStates">
            <summary>
            Allows to setup polling for task state information
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">

ref class TaskStatesPoller abstract sealed
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
	        myController-&gt;ControlCenter-&gt;TaskStates-&gt;NewTaskStatesArrived +=
	            gcnew EventHandler&lt;NewTaskStatesArrivedEventArgs^&gt;(NewTaskStatesArrived);
	        // Register for the ErrorOccurred event to process any occurs that may occur during polling.
	        myController-&gt;ControlCenter-&gt;TaskStates-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
	    }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console::ReadLine();
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
    public:
    static void NewTaskStatesArrived(Object^ sender, NewTaskStatesArrivedEventArgs^ taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console::WriteLine("Task 1's State: {0}", taskStates-&gt;TaskStates[TaskId::T01]);
        Console::WriteLine("Task 2's State: {0}", taskStates-&gt;TaskStates[TaskId::T02]);
    }
};


</code>
<code lang="C#">

public static class TaskStatesPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.TaskStates.NewTaskStatesArrived += new EventHandler&lt;NewTaskStatesArrivedEventArgs&gt;(TaskStatesPoller.NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.TaskStates.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(TaskStatesPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine();
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewTaskStatesArrived(object sender, NewTaskStatesArrivedEventArgs taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates[TaskId.T01]);
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates[TaskId.T02]);
    }
}


</code>
<code lang="VB.NET">

Friend Class TaskStatesPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.TaskStates.NewTaskStatesArrived, New EventHandler(Of NewTaskStatesArrivedEventArgs)(AddressOf TaskStatesPoller.NewTaskStatesArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.TaskStates.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf TaskStatesPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewTaskStatesArrived(ByVal sender As Object, ByVal taskStates As NewTaskStatesArrivedEventArgs)
        ' Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates.Item(TaskId.T01))
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates.Item(TaskId.T02))
    End Sub

End Class


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Status.ControlCenter.Callbacks">
            <summary>
            Allows to setup polling for the different callbacks
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">

ref class CallbackPoller abstract sealed
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
        	// Register for the InputBoxCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;InputBoxCallback +=
	            gcnew EventHandler&lt;InputBoxCallbackEventArgs^&gt;(NewInputBoxCallback);
	
	        // Register for the PrintCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;PrintCallback +=
	            gcnew EventHandler&lt;PrintCallbackEventArgs^&gt;(NewPrintCallback);
	
	        // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread::Sleep(30000);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console::WriteLine("Error occurred while polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
    public:
    static void NewInputBoxCallback(Object^ sender, InputBoxCallbackEventArgs^ inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console::WriteLine("{0} (Default Value: {1}):", inputBoxCallback-&gt;Prompt, inputBoxCallback-&gt;DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback-&gt;ReturnValue = Console::ReadLine();
    }
    public:
    static void NewPrintCallback(Object^ sender, PrintCallbackEventArgs^ printCallback)
    {
        // Output the print string to the console.
        Console::WriteLine(printCallback-&gt;Message);
    }
};


</code>
<code lang="C#">

public static class CallbackPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the InputBoxCallback event.
            myController.ControlCenter.Callbacks.InputBoxCallback += new EventHandler&lt;InputBoxCallbackEventArgs&gt;(CallbackPoller.NewInputBoxCallback);
            // Register for the PrintCallback event.
            myController.ControlCenter.Callbacks.PrintCallback += new EventHandler&lt;PrintCallbackEventArgs&gt;(CallbackPoller.NewPrintCallback);
            // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            myController.ControlCenter.Callbacks.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(CallbackPoller.NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(0x7530);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewInputBoxCallback(object sender, InputBoxCallbackEventArgs inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine();
    }

    public static void NewPrintCallback(object sender, PrintCallbackEventArgs printCallback)
    {
        // Output the print string to the console.
        Console.WriteLine(printCallback.Message);
    }
}


</code>
<code lang="VB.NET">

Public Class CallbackPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the InputBoxCallback event.
            AddHandler myController.ControlCenter.Callbacks.InputBoxCallback, New EventHandler(Of InputBoxCallbackEventArgs)(AddressOf CallbackPoller.NewInputBoxCallback)
            ' Register for the PrintCallback event.
            AddHandler myController.ControlCenter.Callbacks.PrintCallback, New EventHandler(Of PrintCallbackEventArgs)(AddressOf CallbackPoller.NewPrintCallback)
            ' Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            AddHandler myController.ControlCenter.Callbacks.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf CallbackPoller.NewErrorOccurred)
            ' Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT ""Sample print callback event handled!""")
            ' Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)" &amp; ChrW(10) &amp; "INPUTBOX ""Enter a String"", MyInputString, ""Default Text""")
            ' Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(&amp;H7530)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewInputBoxCallback(ByVal sender As Object, ByVal inputBoxCallback As InputBoxCallbackEventArgs)
        ' Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue)
        ' Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine
    End Sub

    Public Shared Sub NewPrintCallback(ByVal sender As Object, ByVal printCallback As PrintCallbackEventArgs)
        ' Output the print string to the console.
        Console.WriteLine(printCallback.Message)
    End Sub

End Class


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Status.PrintCallbackEventArgs">
            <summary>
            Provides data for <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see>
            </summary>
            <remarks>
            	<para>
            		This class provides data for when the print
            		callback occurs and the <see cref="T:Aerotech.Ensemble.Status.CallbacksPoller"></see> retrieves the
            		<see cref="P:Aerotech.Ensemble.Status.PrintCallbackEventArgs.Message"></see>.
            	</para>
            	<para>
            		This callback is the result of executing a <c>PRINT</c> command.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.PrintCallbackEventArgs.#ctor(Aerotech.Ensemble.Controller,System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.PrintCallbackEventArgs"></see>
            </summary>
            <param name="controller">The controller that caused the callback</param>
            <param name="message">The message specified in the <c>PRINT</c> command</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.PrintCallbackEventArgs.Message">
            <summary>
            The message to show
            </summary>
            <remarks>
            	<para>
            		This gets specified using the AeroBasic <c>PRINT</c> command.
            	</para>
            </remarks>
            <include file="examples.xml" path="/*/CallbacksPoller/Example[@name=&quot;CallbackPoller&quot;]/*"></include>
        </member>
        <member name="T:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs">
            <summary>
            Provides data for <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>
            </summary>
            <remarks>
            	<para>
            		This class provides data for when the input
            		callback occurs and the <see cref="T:Aerotech.Ensemble.Status.CallbacksPoller"></see> retrieves the
            		<see cref="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.Prompt"></see> and
            		<see cref="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.DefaultValue"></see>.  To set the
            		value that will be returned by this callback set the
            		<see cref="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.ReturnValue"></see> property.
            	</para>
            	<para>
            		If you want to see if the given INPUTBOX callback has been handled, you
            		can inspect the <see cref="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.Handled"></see> property.
            	</para>
            	<para>
            		This callback is the result of executing a <c>INPUTBOX</c> command.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.#ctor(Aerotech.Ensemble.Controller,System.String,System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs"></see>
            </summary>
            <param name="controller">The controller that causes the callback</param>
            <param name="prompt">The prompt to ask the user</param>
            <param name="default">The default value associated with the prompt</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.Prompt">
            <summary>
            The prompt to ask the user
            </summary>
            <remarks>
            	<para>
            		This gets specified using the AeroBasic <c>INPUTBOX</c> command.
            	</para>
            </remarks>
            <include file="examples.xml" path="/*/CallbacksPoller/Example[@name=&quot;CallbackPoller&quot;]/*"></include>
        </member>
        <member name="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.DefaultValue">
            <summary>
            The default value to return by the command
            </summary>
            <remarks>
            	<para>
            		This gets specified using the AeroBasic <c>INPUTBOX</c> command.
            	</para>
            </remarks>
            <include file="examples.xml" path="/*/CallbacksPoller/Example[@name=&quot;CallbackPoller&quot;]/*"></include>
        </member>
        <member name="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.ReturnValue">
            <summary>
            The value to return to the callback
            </summary>
            <remarks>
            	<para>
            		The value to return to the <c>INPUTBOX</c> callback.
            	</para>
            	<para>
            		This value gets initialized to the <see cref="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.DefaultValue"></see>.
            		When this value is changed, <see cref="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.Handled"></see> is set to <c>true</c>.
            	</para>
            </remarks>
            <include file="examples.xml" path="/*/CallbacksPoller/Example[@name=&quot;CallbackPoller&quot;]/*"></include>
        </member>
        <member name="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.Handled">
            <summary>
            Whether this callback has already been handled by another event handler
            </summary>
            <remarks>
            	<para>
            		This property gets initialized to <c>false</c> and then can either be
            		set to <c>true</c> explicitly or it is set to <c>true</c> automatically by
            		modifying the <see cref="P:Aerotech.Ensemble.Status.InputBoxCallbackEventArgs.ReturnValue"></see>.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Status.CallbacksPoller">
            <summary>
            Allows to poll for callback information from a controller in the background
            </summary>
            <remarks>
            	<para>
            		This class can be configured to retrieve task state information from the controller at a specified rate in a
            		background thread (referred to as polling).  Each time callback information is retrieved, the event is raised that contains
            		the callback information.  If there are any errors during the retrieval of the data, the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.ErrorOccurred"></see> event
            		will be raised.
            	</para>
            	<para>
            		To setup polling of the data, register for either the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see> or <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>,
            		this will automatically start the polling for callback information from the controller.  If any of the callbacks have been
            		issued, the appropriate event will be raised.  If you do not want the polling to start right away, set the
            		<see cref="P:Aerotech.Ensemble.Status.CallbacksPoller.AutoStart"></see> property.
            	</para>
            	<para>
            		The polling for the data can be suspended and resumed using <see cref="M:Aerotech.Ensemble.Status.CallbacksPoller.Suspend"></see> and <see cref="M:Aerotech.Ensemble.Status.CallbacksPoller.Resume"></see>.
            	</para>
            	<para>
            		The interval at which the data is updated is global for all the instances of <see cref="T:Aerotech.Ensemble.Status.CallbacksPoller"></see> and
            		can be set by <see cref="P:Aerotech.Ensemble.Status.CallbacksPoller.RefreshInterval"></see> property.  The background thread that does the polling does not need to
            		be shut down when exiting the application, and will automatically shut itself down when exiting the application.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Status.CallbacksPoller.controller">
            <summary>
            The controller with which this class is associated
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.CallbacksPoller.subscriptionMutex">
            <summary>
            The objec to lock on when adding/removing subscribers (events)
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.CallbacksPoller.Threader">
            <summary>
            The threader that handles the executing of the events in a separate thread
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Status.CallbacksPoller.controllerResetting">
            <summary>
            Whether the controller is actively being reset
            </summary>
            <remarks>
            	Suspending on a Resetting, and resuming on a Reset is not sufficient because one could suspend between 
            	Resetting and Reset, and we would end up resuming when we should not have.
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Status.CallbacksPoller"></see>
            </summary>
            <param name="controller">The controller with which to associate this poller</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.Suspend">
            <summary>
            Supsends the polling for callback information
            </summary>
            <remarks>
            	<para>
            		Calling this method will suspend the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To resume the polling after it has been suspended, call the <see cref="M:Aerotech.Ensemble.Status.CallbacksPoller.Resume"></see>.
            		To check whether the polling is suspended or not, see <see cref="P:Aerotech.Ensemble.Status.CallbacksPoller.IsSuspended"></see> property.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see> and <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.Resume">
            <summary>
            Resumes the polling for callback information
            </summary>
            <remarks>
            	<para>
            		Calling this method will resume the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To suspend the polling, call the <see cref="M:Aerotech.Ensemble.Status.CallbacksPoller.Suspend"></see> method.  It is possible to
            		register for the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see> and <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see> events without
            		starting the polling, thus causing the polling to be suspended.  To acheive this, see <see cref="P:Aerotech.Ensemble.Status.CallbacksPoller.AutoStart"></see>.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see> and <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.CheckUnregisterControlCenter">
            <summary>
            Check whether this poller needs to be unregistered, and do so
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.Update(Aerotech.Ensemble.Status.DelegateSpooler)">
            <summary>
            Does a retrieve from the controller
            </summary>
            <param name="spooler">The spooler to use to raise events</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.Aerotech#Ensemble#Status#IDataPoller#UnsubscribeAll">
            <summary>
            Unsubscribes everyone who is subscribed ni the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see>, <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>, and <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.ErrorOccurred"></see>
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.RaisePrintCallbackEvent(System.String)">
            <summary>
            Raises the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see>
            </summary>
            <param name="message">The message to pass to the event</param>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.RaiseInputBoxCallbackEvent(System.String,System.String)">
            <summary>
            Raises the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>
            </summary>
            <param name="prompt">The prompt to pass to the event</param>
            <param name="default">The default to pass to the event</param>
            <returns>The returned value from the event</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Status.CallbacksPoller.RaiseErrorOccurred(System.Exception)">
            <summary>
            Raises the <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.ErrorOccurred"></see>
            </summary>
            <param name="e">The error to pass to the event</param>
        </member>
        <member name="P:Aerotech.Ensemble.Status.CallbacksPoller.IsSuspended">
            <summary>
            Whether the polling is suspended
            </summary>
            <remarks>
            	<para>
            		Polling can be suspended by calling <see cref="M:Aerotech.Ensemble.Status.CallbacksPoller.Suspend"></see>, and resumed by calling the
            		<see cref="M:Aerotech.Ensemble.Status.CallbacksPoller.Resume"></see>.  if the polling is suspended, the background thread will not be
            		retrieving data from the controller, until it is resumed.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.CallbacksPoller.AutoStart">
            <summary>
            Whether to start polling when someone subscribes to either <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see> or <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>
            </summary>
            <remarks>
            	<para>
            		The default is <c>true</c>.
            	</para>
            	<para>
            		When someone registers for either <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see> or <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see> and this
            		property is set to <c>true</c>, the polling will start automatically.  If, on the other hand, this property
            		is set to <c>false</c>, when someone registers for either <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback"></see> or <see cref="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback"></see>
            		events, the polling will start in suspended mode.  To start the polling after this, call the <see cref="M:Aerotech.Ensemble.Status.CallbacksPoller.Resume"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.CallbacksPoller.RefreshInterval">
            <summary>
            The interval of retrieving of data
            </summary>
            <remarks>
            	<para>
            		The value is given in milliseconds.
            	</para>
            	<para>
            		This property specifies the interval at which the background thread polls for new
            		callback information.  This value is global for all the <see cref="T:Aerotech.Ensemble.Status.CallbacksPoller"></see> calsses.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Status.CallbacksPoller.IsExecutingEvent">
            <summary>
            Tells whether there is currently an event being executed
            </summary>
        </member>
        <member name="E:Aerotech.Ensemble.Status.CallbacksPoller.ErrorOccurred">
            <summary>
            Raised when an error occurs during retrieval of data from the controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">

ref class CallbackPoller abstract sealed
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
        	// Register for the InputBoxCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;InputBoxCallback +=
	            gcnew EventHandler&lt;InputBoxCallbackEventArgs^&gt;(NewInputBoxCallback);
	
	        // Register for the PrintCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;PrintCallback +=
	            gcnew EventHandler&lt;PrintCallbackEventArgs^&gt;(NewPrintCallback);
	
	        // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread::Sleep(30000);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console::WriteLine("Error occurred while polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
    public:
    static void NewInputBoxCallback(Object^ sender, InputBoxCallbackEventArgs^ inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console::WriteLine("{0} (Default Value: {1}):", inputBoxCallback-&gt;Prompt, inputBoxCallback-&gt;DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback-&gt;ReturnValue = Console::ReadLine();
    }
    public:
    static void NewPrintCallback(Object^ sender, PrintCallbackEventArgs^ printCallback)
    {
        // Output the print string to the console.
        Console::WriteLine(printCallback-&gt;Message);
    }
};


</code>
<code lang="C#">

public static class CallbackPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the InputBoxCallback event.
            myController.ControlCenter.Callbacks.InputBoxCallback += new EventHandler&lt;InputBoxCallbackEventArgs&gt;(CallbackPoller.NewInputBoxCallback);
            // Register for the PrintCallback event.
            myController.ControlCenter.Callbacks.PrintCallback += new EventHandler&lt;PrintCallbackEventArgs&gt;(CallbackPoller.NewPrintCallback);
            // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            myController.ControlCenter.Callbacks.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(CallbackPoller.NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(0x7530);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewInputBoxCallback(object sender, InputBoxCallbackEventArgs inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine();
    }

    public static void NewPrintCallback(object sender, PrintCallbackEventArgs printCallback)
    {
        // Output the print string to the console.
        Console.WriteLine(printCallback.Message);
    }
}


</code>
<code lang="VB.NET">

Public Class CallbackPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the InputBoxCallback event.
            AddHandler myController.ControlCenter.Callbacks.InputBoxCallback, New EventHandler(Of InputBoxCallbackEventArgs)(AddressOf CallbackPoller.NewInputBoxCallback)
            ' Register for the PrintCallback event.
            AddHandler myController.ControlCenter.Callbacks.PrintCallback, New EventHandler(Of PrintCallbackEventArgs)(AddressOf CallbackPoller.NewPrintCallback)
            ' Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            AddHandler myController.ControlCenter.Callbacks.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf CallbackPoller.NewErrorOccurred)
            ' Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT ""Sample print callback event handled!""")
            ' Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)" &amp; ChrW(10) &amp; "INPUTBOX ""Enter a String"", MyInputString, ""Default Text""")
            ' Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(&amp;H7530)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewInputBoxCallback(ByVal sender As Object, ByVal inputBoxCallback As InputBoxCallbackEventArgs)
        ' Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue)
        ' Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine
    End Sub

    Public Shared Sub NewPrintCallback(ByVal sender As Object, ByVal printCallback As PrintCallbackEventArgs)
        ' Output the print string to the console.
        Console.WriteLine(printCallback.Message)
    End Sub

End Class


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Status.CallbacksPoller.PrintCallback">
            <summary>
            Event that gets called when a print callback has been issued
            </summary>
            <remarks>
            	<para>
            		The event gets fired whenever there is a print callback waiting to be processed on the controller.
            	</para>
            	<para>
            		Registering for this event, automatically starts the polling for new
            		callback information.  To change this behavior, see the <see cref="P:Aerotech.Ensemble.Status.CallbacksPoller.AutoStart"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">

ref class CallbackPoller abstract sealed
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
        	// Register for the InputBoxCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;InputBoxCallback +=
	            gcnew EventHandler&lt;InputBoxCallbackEventArgs^&gt;(NewInputBoxCallback);
	
	        // Register for the PrintCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;PrintCallback +=
	            gcnew EventHandler&lt;PrintCallbackEventArgs^&gt;(NewPrintCallback);
	
	        // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread::Sleep(30000);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console::WriteLine("Error occurred while polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
    public:
    static void NewInputBoxCallback(Object^ sender, InputBoxCallbackEventArgs^ inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console::WriteLine("{0} (Default Value: {1}):", inputBoxCallback-&gt;Prompt, inputBoxCallback-&gt;DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback-&gt;ReturnValue = Console::ReadLine();
    }
    public:
    static void NewPrintCallback(Object^ sender, PrintCallbackEventArgs^ printCallback)
    {
        // Output the print string to the console.
        Console::WriteLine(printCallback-&gt;Message);
    }
};


</code>
<code lang="C#">

public static class CallbackPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the InputBoxCallback event.
            myController.ControlCenter.Callbacks.InputBoxCallback += new EventHandler&lt;InputBoxCallbackEventArgs&gt;(CallbackPoller.NewInputBoxCallback);
            // Register for the PrintCallback event.
            myController.ControlCenter.Callbacks.PrintCallback += new EventHandler&lt;PrintCallbackEventArgs&gt;(CallbackPoller.NewPrintCallback);
            // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            myController.ControlCenter.Callbacks.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(CallbackPoller.NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(0x7530);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewInputBoxCallback(object sender, InputBoxCallbackEventArgs inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine();
    }

    public static void NewPrintCallback(object sender, PrintCallbackEventArgs printCallback)
    {
        // Output the print string to the console.
        Console.WriteLine(printCallback.Message);
    }
}


</code>
<code lang="VB.NET">

Public Class CallbackPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the InputBoxCallback event.
            AddHandler myController.ControlCenter.Callbacks.InputBoxCallback, New EventHandler(Of InputBoxCallbackEventArgs)(AddressOf CallbackPoller.NewInputBoxCallback)
            ' Register for the PrintCallback event.
            AddHandler myController.ControlCenter.Callbacks.PrintCallback, New EventHandler(Of PrintCallbackEventArgs)(AddressOf CallbackPoller.NewPrintCallback)
            ' Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            AddHandler myController.ControlCenter.Callbacks.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf CallbackPoller.NewErrorOccurred)
            ' Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT ""Sample print callback event handled!""")
            ' Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)" &amp; ChrW(10) &amp; "INPUTBOX ""Enter a String"", MyInputString, ""Default Text""")
            ' Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(&amp;H7530)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewInputBoxCallback(ByVal sender As Object, ByVal inputBoxCallback As InputBoxCallbackEventArgs)
        ' Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue)
        ' Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine
    End Sub

    Public Shared Sub NewPrintCallback(ByVal sender As Object, ByVal printCallback As PrintCallbackEventArgs)
        ' Output the print string to the console.
        Console.WriteLine(printCallback.Message)
    End Sub

End Class


</code>

</example>
        </member>
        <member name="E:Aerotech.Ensemble.Status.CallbacksPoller.InputBoxCallback">
            <summary>
            Event that gets called when an input box callback has been issued
            </summary>
            <remarks>
            	<para>
            		The event gets fired whenever there is a inputbox callback waiting to be processed on the controller.
            	</para> 
            	<para>
            		Registering for this event, automatically starts the polling for new
            		callback information.  To change this behavior, see the <see cref="P:Aerotech.Ensemble.Status.CallbacksPoller.AutoStart"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code lang="C++">

ref class CallbackPoller abstract sealed
{
    // Methods
    public:
    static void Main(array&lt;String^&gt;^ args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller::Connect();
            Controller^ myController = Controller::ConnectedControllers[0];
        	// Register for the InputBoxCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;InputBoxCallback +=
	            gcnew EventHandler&lt;InputBoxCallbackEventArgs^&gt;(NewInputBoxCallback);
	
	        // Register for the PrintCallback event.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;PrintCallback +=
	            gcnew EventHandler&lt;PrintCallbackEventArgs^&gt;(NewPrintCallback);
	
	        // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
	        myController-&gt;ControlCenter-&gt;Callbacks-&gt;ErrorOccurred +=
	            gcnew EventHandler&lt;ErrorEventArgs^&gt;(NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController-&gt;Commands-&gt;Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread::Sleep(30000);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console::WriteLine("Error occurred while polling data: {0}", errorEventArgs-&gt;Exception-&gt;Message);
    }
    public:
    static void NewInputBoxCallback(Object^ sender, InputBoxCallbackEventArgs^ inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console::WriteLine("{0} (Default Value: {1}):", inputBoxCallback-&gt;Prompt, inputBoxCallback-&gt;DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback-&gt;ReturnValue = Console::ReadLine();
    }
    public:
    static void NewPrintCallback(Object^ sender, PrintCallbackEventArgs^ printCallback)
    {
        // Output the print string to the console.
        Console::WriteLine(printCallback-&gt;Message);
    }
};


</code>
<code lang="C#">

public static class CallbackPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the network and use the first active controller.
            Controller.Connect();
            Controller myController = Controller.ConnectedControllers[0];
            // Register for the InputBoxCallback event.
            myController.ControlCenter.Callbacks.InputBoxCallback += new EventHandler&lt;InputBoxCallbackEventArgs&gt;(CallbackPoller.NewInputBoxCallback);
            // Register for the PrintCallback event.
            myController.ControlCenter.Callbacks.PrintCallback += new EventHandler&lt;PrintCallbackEventArgs&gt;(CallbackPoller.NewPrintCallback);
            // Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            myController.ControlCenter.Callbacks.ErrorOccurred += new EventHandler&lt;ErrorEventArgs&gt;(CallbackPoller.NewErrorOccurred);
            // Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT \"Sample print callback event handled!\"");
            // Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)\nINPUTBOX \"Enter a String\", MyInputString, \"Default Text\"");
            // Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(0x7530);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewInputBoxCallback(object sender, InputBoxCallbackEventArgs inputBoxCallback)
    {
        // Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue);
        // Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine();
    }

    public static void NewPrintCallback(object sender, PrintCallbackEventArgs printCallback)
    {
        // Output the print string to the console.
        Console.WriteLine(printCallback.Message);
    }
}


</code>
<code lang="VB.NET">

Public Class CallbackPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the network and use the first active controller.
            Controller.Connect
            Dim myController As Controller = Controller.ConnectedControllers.Item(0)
            ' Register for the InputBoxCallback event.
            AddHandler myController.ControlCenter.Callbacks.InputBoxCallback, New EventHandler(Of InputBoxCallbackEventArgs)(AddressOf CallbackPoller.NewInputBoxCallback)
            ' Register for the PrintCallback event.
            AddHandler myController.ControlCenter.Callbacks.PrintCallback, New EventHandler(Of PrintCallbackEventArgs)(AddressOf CallbackPoller.NewPrintCallback)
            ' Register for the ErrorOccurred event to process any occurs that may occur during the callback.
            AddHandler myController.ControlCenter.Callbacks.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf CallbackPoller.NewErrorOccurred)
            ' Create a Print callback so our event can handle it.
            myController.Commands.Execute("PRINT ""Sample print callback event handled!""")
            ' Create a InputBox callback so our event can handle it.
            myController.Commands.Execute("DIM MyInputString AS STRING(96)" &amp; ChrW(10) &amp; "INPUTBOX ""Enter a String"", MyInputString, ""Default Text""")
            ' Make sure the thread doesn't die before the callback actually occurs.
            Thread.Sleep(&amp;H7530)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred during the callback.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewInputBoxCallback(ByVal sender As Object, ByVal inputBoxCallback As InputBoxCallbackEventArgs)
        ' Print the prompt string and default string.
        Console.WriteLine("{0} (Default Value: {1}):", inputBoxCallback.Prompt, inputBoxCallback.DefaultValue)
        ' Set the return value to the user input from the console.
        inputBoxCallback.ReturnValue = Console.ReadLine
    End Sub

    Public Shared Sub NewPrintCallback(ByVal sender As Object, ByVal printCallback As PrintCallbackEventArgs)
        ' Output the print string to the console.
        Console.WriteLine(printCallback.Message)
    End Sub

End Class


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Information.AxisInfo">
            <summary>
            Contains information about an axis
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.AxisInfo.controller">
            <summary>
            The controller on which the axis is located
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Information.AxisInfo.controllerInfo">
            <summary>
            The information about the axis
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Information.AxisInfo.#ctor(Aerotech.Ensemble.Controller,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Aerotech.Ensemble.Information.AxisInfo"></see>
            </summary>
            <param name="controller">The controller on which this axis is</param>
            <param name="axisNumber">The number of the axis</param>
        </member>
        <member name="M:Aerotech.Ensemble.Information.AxisInfo.getData">
            <summary>
            Loads the axis information if needed (cached)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.IOBoardPresent">
            <summary>
            If the IO board is connected.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.MaximumAmperage">
            <summary>
            The axis maximum amperage
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.BusVoltage">
            <summary>The bus voltage</summary>
            <remarks>
            The bus voltage might not be available on all components
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.AxisType">
            <summary>
            The type of axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.Number">
            <summary>
            The axis number
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.LEDToggle">
            <summary>
            Whether the LED is brinking (toggling) on the given Axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.AnalogInputScaling">
            <summary>
            The analog input scaling (cached)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.AnalogOutputScaling">
            <summary>
            The analog output scaling (cached)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.Name">
            <summary>The axis name.</summary>
            <remarks>
            	<para>
            		To change the name of the axis, see <see cref="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.AxisName"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.Drive">
            <summary>Returns information about the physical drive on which the axis resides.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.AxisInfo.FlashConfigStatus">
            <summary>Information about FlashConfig status.</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Information.ControllerVersion">
            <summary>
            Specifies the versions of the controller
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Information.ControllerVersion.#ctor(Aerotech.Ensemble.Information.ControllerInfo,System.Int32)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Information.ControllerVersion"></see>
            </summary>
            <param name="controllerInfo">The controller information</param>
            <param name="buildNumber">The build # of the controller</param>
        </member>
        <member name="M:Aerotech.Ensemble.Information.ControllerVersion.#ctor(Aerotech.Ensemble.Information.IdentifyNetworkInfo)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Information.ControllerVersion"></see>
            </summary>
            <param name="networkInfo">The identify network information</param>
        </member>
        <member name="M:Aerotech.Ensemble.Information.ControllerVersion.ToVersion(System.Int32,System.Int32)">
            <summary>
            Converts from the hex encoded version to a <see cref="T:System.Version"></see>
            </summary>
            <param name="version">The hex encoded version</param>
            <param name="buildNumber">The build number</param>
            <returns>The version</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerVersion.FPGAVersion">
            <summary>
            Specifies the FPGA version
            </summary>
            <remarks>
            	<para>
            		This is the Field-Programmable-Gate-Array version.  It is not the
            		main version, and could be updated as part of new firmware.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerVersion.HardwareVersion">
            <summary>
            Specifies the hardware version
            </summary>
            <remarks>
            	<para>
            		This is the version of the board.  It is not the
            		main version, and is constant based on the board in the controller.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerVersion.FirmwareVersion">
            <summary>
            Specifies the firmware version
            </summary>
            <remarks>
            	<para>
            		This is the version of the firmware.  This changes with
            		every new version of the firmware.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Information.ControllerInformation">
            <summary>Contains auxiliary controller information</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.Name">
            <summary>The name of the controller</summary>
            <remarks>
            	<para>
            		The name of the controller cannot be changed once you are connected to it.
            		If you want to change the name of a controller, see <see cref="M:Aerotech.Ensemble.Controller.Identify"></see>
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller found and its communication type.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("		Communication Type: {0}", networkNode-&gt;CommunicationType);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\t\tCommunication Type: {0}", networkNode.CommunicationType);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.CommunicationType">
            <summary>The communication type that is being used</summary>
            <remarks>
            	<para>
            		The communication medium is selected during setup.  See <see cref="P:Aerotech.Ensemble.Controller.Configuration"></see>
            		for more information.
            	</para>
            </remarks> 
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Communication</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode^,String^&gt;^ controllers = Controller::Identify();
        // Print out the name of each controller found and its communication type.
        Console::WriteLine("Controllers Found:");
        for each (NetworkNode^ networkNode in controllers)
        {
            Console::WriteLine("	Controller Name: {0}", networkNode-&gt;Name);
            Console::WriteLine("		Communication Type: {0}", networkNode-&gt;CommunicationType);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Identify all the controllers (network nodes) on the network.
        INamedConstantCollection&lt;NetworkNode, string&gt; controllers = Controller.Identify();
        // Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:");
        foreach (NetworkNode networkNode in controllers)
        {
            Console.WriteLine("\tController Name: {0}", networkNode.Name);
            Console.WriteLine("\t\tCommunication Type: {0}", networkNode.CommunicationType);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Identify all the controllers (network nodes) on the network.
        Dim controllers As INamedConstantCollection(Of NetworkNode, String) = Controller.Identify
        ' Print out the name of each controller found and its communication type.
        Console.WriteLine("Controllers Found:")
        Dim networkNode As NetworkNode
        For Each networkNode In controllers
            Console.WriteLine(ChrW(9) &amp; "Controller Name: {0}", networkNode.Name)
            Console.WriteLine(ChrW(9) &amp; ChrW(9) &amp; "Communication Type: {0}", networkNode.CommunicationType)
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.Version">
            <summary>
            Specifies the versions of the controller
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.Initialization">
            <summary>Provies information about initialization</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.MasterType">
            <summary>
            Specifies the component type of the controller
            </summary>
            <remarks>
            	<para>
            		This can be used to differentiate between controller components.
            	</para>
            </remarks>
        </member>
        <member name="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerResettingPre">
            <summary>Raised right before <see cref="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerResetting"></see></summary>
        </member>
        <member name="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerResetting">
            <summary>Event that is raised when the controller is about to be reset</summary>
        </member>
        <member name="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerResettingPost">
            <summary>Raised right after <see cref="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerResetting"></see></summary>
        </member>
        <member name="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerResetPre">
            <summary>Raised right before <see cref="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerReset"></see></summary>
        </member>
        <member name="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerReset">
            <summary>Event that is raised when the controller is finished being reset</summary>
        </member>
        <member name="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerResetPost">
            <summary>Raised right after <see cref="E:Aerotech.Ensemble.Information.ControllerInformation.ControllerReset"></see></summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.Axes">
            <summary>
            Provides access to information about axes
            </summary>
            <remarks>
            	<para>
            		This collection can be used to find out which axes are available, what are their names,
            		numbers, etc.  See <see cref="T:Aerotech.Ensemble.Information.AxisInfo"></see> for more information.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.Drives">
            <summary>Provides information about connected drives.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.IsEpaq">
            <summary>
            Whether the controller is an Epaq
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.ControllerInformation.AxisMismatch">
            <summary>
            Indicates a configuration error on the controller
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Information.InitializationInformation">
            <summary>Provides information about initialization</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.InitializationInformation.Warning">
            <summary>Any warnings that happend during initialization</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Information.DriveInformation">
            <summary>Represents a physical drive</summary>
            <remarks>
            	<para>
            		Please note that this does represent an axis, but a physical drive:
            		a <see cref="F:Aerotech.Ensemble.Information.ComponentType.Lab"></see> will be represented by one of these.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Information.DriveInformation.Axes">
            <summary>
            Returns information about the axes that are present on the drive.
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.DriveInformation.Type">
            <summary>What type the drive is</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.DriveInformation.Version">
            <summary>Specifies the version of the drive.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Information.DriveInformation.IOBoardPresent">
            <summary>If the IO board is connected.</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Core.ErrorCode">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.NoError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.RegistryAccessError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidInstallationDirectory">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.AccessToFlashParametersDenied">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SemaphoreFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidPassedPointer">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.TooManyControllersFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.NoControllersFoundOnNetwork">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FoundDuplicateControllerNumbers">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.DuplicateControllerFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.LoaderIsCurrentlyRunning">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.EthernetConnectionFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.USBConnectionFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerNotFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InterDrvNoComm">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InterDrvSlaveConnectionAttempt">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InterDrvCmdResetError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.VersionIncompatible">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.USBSetupFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.USBBroadcastFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.EthernetSocketSetupFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.EthernetBroadcastFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidValueForEthernetSettings">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidNetworkSetupArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerNameIsTooLong">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerNameInvalid">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerNameIsLocked">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerNameLockFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerSetupVersionMismatch">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.IdentifyNotIssued">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CannotOpenFile">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CannotCreateFile">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidFileExtension">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.Start2DLine">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingStartArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingEndArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingSampleDistValue">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidColumnData">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCalKeyword">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCalValue">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MixedCalFileFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.IncorrectNumberOfPoints">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingSlaveValue">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingMasterValue">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.IncorrectPointsSequence">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidMasterUnit">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidDirectionReversal">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.PointDataBeforeNumPoints">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.PointDataBeforeMasterUnit">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.PointDataBeforeSlaveUnit">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SlaveUnitBeforeMasterUnit">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SlaveUnitBeforeNumPoints">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCamKeyword">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CorruptFileFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CorruptMemoryFileFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidProfileFormat">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidParameterFileFormat">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCustomerPluginImageFileFormat">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InterfaceNotEnabled">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ReceiveHeaderMismatch">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ReceiveTimeout">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.PCDeviceFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SendTimeout">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.EthernetCommunicationReset">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.USBCommunicationReset">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.EthernetCommunicationBusy">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerIsDisconnected">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidControllerNumber">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InterDrvNoAxis">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidAxisNumber">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ParameterValueTooSmall">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ParameterValueTooLarge">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.NoParameterTypeSpecified">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ParameterNotIdentified">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ParameterMismatch">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ParameterAccessDenied">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidParameterInfo">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.HeapAllocationFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CodeSectionIsTooSmall">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.DataSectionIsTooSmall">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.TaskNotRunningInMonitor">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.VersionMismatch">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.TaskNotReadyForImmediate">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.TaskNotActiveForImmediate">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.TaskErrorFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ProgramReachedCompletion">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidVariableLookupArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingVariableLookupArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ReferenceTypeNotFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ReferenceIsAnArray">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.UnknownReferenceType">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ProgramEndedIncorrectly">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ImmediateCommandAborted">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidSymbolsFileGiven">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ProgramCounterNotFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.LineNumberNotFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ProgramFileNotFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.UsageStatisticsFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.NoProgramLoaded">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MaximumCollectionExceeded">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidOptionalDataNumber">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CollectionActive">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MemoryAllocationRequestTooLarge">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.RegisterAccessOutOfBounds">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.BufferSizeTooLarge">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CollectionAborted">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.DataCollectionConfiguration">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InsufficientFileSystemMemory">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FileTransferFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FailureRetrievingFileSystemDirectory">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FileSystemOptimizationFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.UnableToEraseFileSystem">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidFileSystemOption">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FileDoesNotExist">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FileCurrentlyExists">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FileNameIsTooLarge">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.OptimizationInProgress">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CallbacksNotRegistered">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCallbackType">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.UnableToRegisterCallback">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.UnableToReleaseCallback">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ExecuteCmdParameterOutOfRange">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CommandParameterSizeNotFound">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidReturnValue">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ResultingTaskError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCommand">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CustomerPluginImageLoadError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CustomerDebugImageConfigError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CustomerDebugImageDataRetrieveError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.PasswordFoundOnControllerIsInvalid">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerNumberOutOfRange">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.TaskNumberOutOfRangeOrProtected">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.FirmwareLoadError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.AxisNameInvalid">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.TimeSlotResetError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.DemoUnlockFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.DemoRenewFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidAerobasicDirective">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.BuildErrorsFoundInCompiler">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.AssemblerSystemErrorDetected">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.EmptyCommandLine">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCommandLine">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerBootHasNotBeenIssued">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ControllerResetHasNotBeenIssued">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingEndQuoteInStringArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.UnexpectedCommandArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCommandArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.ErrorProcessingStringElement">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidReturnTypeSpecified">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.StringToTypeConversionError">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MissingConsoleArgument">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidCommandUsage">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.StringParameterIsTooLong">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidIntegerValueEntered">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.OutOfMemory">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.InvalidArgumentPassed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SemaphoreOpenFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.MemoryAllocationFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SharedMemoryOpenFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SemaphoreLockFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SemaphoreTimedOut">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.SemaphoreUnlockFailed">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ErrorCode.CommandTooLong">
            <exclude></exclude>
        </member>
        <member name="T:Aerotech.Ensemble.Core.ExceptionCategory">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Root">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.SoftwareEnvironment">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Network">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Connection">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Setup">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.IO">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.FileIO">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.AccessFailure">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.InvalidFormat">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.CalFile">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.CamFile">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Controller">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Communication">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.LostCommunications">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Parameter">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.InvalidValue">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Task">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Load">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Debug">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Step">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Variables">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.DataCollection">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.FileSystem">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Callbacks">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.ExecuteCommand">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.CustomerPluginImage">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.AeroBasic">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.Console">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.CoreLibrary">
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Core.ExceptionCategory.CommLibrary">
            <exclude></exclude>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.Criticality">
            <summary>
			The criticality of an exception
		</summary><remarks>
			<para>
				This can be used to determine the gravity of an exception.
			</para>
		</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Exceptions.Criticality.FatalError">
            <summary>
			Error grave enough that the system cannot carry on operations
		</summary><remarks>
			<para>
				An error of this sort usually means that the installation is corrupted, or
				the process is corrupted beyond repair.  The application should be restarted
				or if the problem persists, reinstalled.
			</para>
		</remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Exceptions.Criticality.Error">
            <summary>
			The exception was caused by an error, the process failed
		</summary>
        </member>
        <member name="F:Aerotech.Ensemble.Exceptions.Criticality.Message">
            <summary>
			The exception was caused by a message, the process succeeded but not fully
		</summary>
        </member>
        <member name="T:Aerotech.Ensemble.InternalUtilities">
            <summary>
            Utilities internal to this assembly
            </summary>
            <summary>
            Utilities internal to this assembly
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets a part of an array
            </summary>
            <typeparam name="T">The type of elements of the array</typeparam>
            <param name="data">The array from which to extract elements</param>
            <param name="start">The starting index to extract from</param>
            <param name="end">The last index to extract</param>
            <returns>An array of size <paramref name="end"></paramref>-<paramref name="start"></paramref> containing
            the specified elements on the <paramref name="data"></paramref>.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.FillArray``1(``0[],``0)">
            <summary>
            Populates every element of an array with a specified value
            </summary>
            <typeparam name="T">The type of elements of the array</typeparam>
            <param name="data">The array to populate</param>
            <param name="value">The value to set each element of the array</param>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.Flip``1(``0[])">
            <summary>
            Flips a given array
            </summary>
            <typeparam name="T">The type of elements of the array</typeparam>
            <param name="data">The array which to flip</param>
            <returns>The new array with ith element in (<paramref name="data"></paramref>.Length-i)th position</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.EnsureCapacity``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Ensures that the <paramref name="list"></paramref> has enough elements
            </summary>
            <typeparam name="T">The type of elements</typeparam>
            <param name="list">The list in which to ensure the size</param>
            <param name="capacity">The capacity to ensure</param>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.OutputMyInfo(System.Object)">
            <summary>
            Outputs properties/fields of an object to the console
            </summary>
            <param name="o">The object whose data to output</param>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.DoubleAsIntOrUIntToInt(System.Double)">
            <summary>Converts a double that stores an <see cref="T:System.Int32"></see> or <see cref="T:System.UInt32"></see> value into an <see cref="T:System.Int32"></see></summary>
            <param name="value">The value to convert</param>
            <returns><see cref="T:System.Int32"></see> representation of <paramref name="value"></paramref></returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.MaskCount(System.Int32)">
            <summary>
            Counts the number of set bits
            </summary>
            <param name="mask">The mask to check</param>
            <returns>The number of bits set in <paramref name="mask"></paramref></returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.MaskCount(System.Int32,System.Int32)">
            <summary>
            Counts the number of set bits
            </summary>
            <param name="mask">The mask to check</param>
            <param name="max">The number of bits to check</param>
            <returns>The number of bits set in <paramref name="mask"></paramref></returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.GetTypeObjectFromPrimitiveType(Aerotech.Ensemble.Parameters.PrimitiveType)">
            <summary>
            Returns a Type object which maps to the PrimitiveType argument
            </summary>
            <param name="primType">The PrimitiveType value to retrieve the native type for</param>
            <returns>The Type object for the specified PrimitiveType</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.ConvertStringToPrimitive(System.String,Aerotech.Ensemble.Parameters.PrimitiveType,System.Globalization.CultureInfo)">
            <summary>
            Returns an object that is the converted numeric value of the string given the PrimitiveType argument
            </summary>
            <param name="input">The value that will be converted to the desired type</param>
            <param name="primType">The PrimitiveType value to convert the value to</param>
            <param name="culture">The CultureInfo used in determining the format of the numeric string</param>
            <returns>The converted numeric value</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.Mask2Index(System.Int32)">
            <summary>
            Figures out which bit is set
            </summary>
            <param name="mask">The mask in which to check the bit</param>
            <returns>The number of the bit that is set, or <c>-1</c> if none is set</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.Mask2Index(System.Int32,System.Int32)">
            <summary>
            Figures out which bit is set
            </summary>
            <param name="mask">The mask in which to check the bit</param>
            <param name="max">The number of bits to check</param>
            <returns>The number of the bit that is set, or <c>-1</c> if none is set</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.ArrayToPrettyString(System.Array)">
            <summary>
            Converts an array to a string representation of the array
            </summary>
            <param name="arr">The array to convert</param>
            <returns>String representation of <paramref name="arr"></paramref></returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.ArrayToString(System.Array)">
            <summary>
            Converts an array of strings to one string
            </summary>
            <param name="objects">The strings to combine</param>
            <returns>One string that contains all passed strings</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.GetEmbeddedStream(System.String)">
            <summary>
            Gets an embedded stream by name
            </summary>
            <param name="name">The name of the embedded resource</param>
            <returns>The <see cref="T:System.IO.Stream"></see> representing the embedded resource</returns>
            <remarks>
            This takes the embedded stream from this assembly
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.DeleteFiles(System.String,System.String[])">
            <summary>
            Deletes files
            </summary>
            <param name="fileNameBase">The common part of the path</param>
            <param name="endings">The endings of the path that are different</param>
            <remarks>
            This uses <see cref="M:Aerotech.Ensemble.InternalUtilities.DeleteFile(System.String)"></see>, check it for specifics on file deletion.
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.DeleteFile(System.String)">
            <summary>
            Deletes the file
            </summary>
            <param name="fileName">The file to delete</param>
            <remarks>
            Check if file exists first, if it exists, makes sure that it is not read only, and
            then deletes it.
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.FindNextElement(System.Xml.XmlNode)">
            <summary>
            Finds the next Element node after the current node
            </summary>
            <param name="xnCurr">The node from which to start</param>
            <returns>The next element node, or <c>null</c> if none found</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.CreateAttributeWithValue(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlAttribute"></see> with the specific name and value.
            </summary>
            <param name="xmlDoc">The <see cref="T:System.Xml.XmlDocument"></see> that will be used to create the attribute.</param>
            <param name="qualifiedName">The name of the new attribute.</param>
            <param name="value">The value of the new attribute.</param>
            <returns>An <see cref="T:System.Xml.XmlAttribute"></see> with its name and value set to the specified parameter values.</returns>
        </member>
        <member name="M:Aerotech.Ensemble.InternalUtilities.ExecuteAsynch``1(System.Object,Aerotech.Ensemble.InternalUtilities.ValueDelegate{``0},Aerotech.Ensemble.ProgressType,System.Object,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Executes a delegate asynchronously, providing progress
            </summary>
            <typeparam name="T">The type of data returned</typeparam>
            <param name="sender">The sender to report in the progress</param>
            <param name="operation">The actual operation to do</param>
            <param name="wantedProgressType">What kind of progress to look for</param>
            <param name="semaphore">The semaphore to lock on</param>
            <param name="progressChangedEventHandler">The event to fire</param>
            <returns>Data returned from the <paramref name="operation"></paramref></returns>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.ControllerDataResults">
            <summary>
            Contains collected data for the controller
            </summary>
            <remarks>
            	<para>
            		Once you get a reference to this structure, you can do operations on it, and there will
            		be no communications to the controller.  This also implies that if you disconnect from
            		the controller, this class will still operate.
            	</para>
            	<para>
				If you change the names of the axes,
				this class will contain the original axis names.
			</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.ControllerDataResults.Count">
            <summary>
            Returns the number of points collected
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.ControllerDataResults.ProgramCounter">
            <summary>
            Retreives the program counter data
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.ControllerDataResults.CollectionPeriod">
            <summary>
            Gives the collection period of the data, in seconds
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.ControllerDataResults.Axes">
            <summary>
            Contains data for the axes
            </summary>
            <remarks>
            	<para>
            		This property allows access to the data specific to the axes.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxisDataResults">
            <summary>
            Contains collected data for an axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.Command">
            <summary>
            Gets the position, velocity, and acceleration command
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.Feedback">
            <summary>
            Gets the position and velocity feedback for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.PositionErrorCounts">
            <summary>
            Gets the position error for the axis, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.PositionError">
            <summary>
            Gets the position error for the axis, in user units
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.VelocityErrorCounts">
            <summary>
            Gets the velocity error for the axis, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.VelocityError">
            <summary>
            Gets the velocity error for the axis, in user units
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.OptionalData1">
            <summary>
            Gets the optinoal data #1 for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.OptionalData2">
            <summary>
            Gets the optional data #2 for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.PositionFeedbackAuxiliary">
            <summary>
            Gets the position feedback auxiliary for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.DigitalInput">
            <summary>
            Gets the digital inputs #0, #1, and #2 for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.DigitalOutput">
            <summary>
            Gets the digital outputs #0, #1, and #2 for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.CurrentFeedback">
            <summary>
            Gets the current feedback for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.CurrentCommand">
            <summary>
            Gets the current command for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.CurrentError">
            <summary>
            Gets the current error for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.AxisStatus">
            <summary>
            Gets the status for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.AxisFault">
            <summary>
            Gets the fault for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.AnalogInput">
            <summary>
            Gets the analog input #0 and #1 for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.AnalogOutput">
            <summary>
            Gets the analog output #0 and #1 for the axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.Count">
            <summary>
            The number of points collected
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDataResults.CollectionPeriod">
            <summary>
            The collection period used to collect the data, in seconds
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.Data">
            <summary>
            Provides access to all the data of the controller
            </summary>
            <remarks>
            	<para>
            		There are two ways of getting information on the state of the controller:
            	</para>
            	<list type="bullet">
            		<item>
            			<term>Diagnostics</term>
            			<description>
            				<para>
            					The diagnostics method is simpler, but not deterministic.  To retrieve diagnostic information call 
            					the <see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics"></see> method. The method will return a snapshot of information 
            					about the controller at the time you called the method.  You can then call this method again 
            					to retrieve information at a different point in time.  The time between the different sets of 
            					diagnostic information is not fixed, as it depends entirely on when you make the calls to 
            					<see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics"></see>.
            				</para>
            				<para>
            					Note that if you call the <see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics"></see> method, some of the data
            					(namely the velocity and acceleration) will not be available.  To allow for their computation
            					you must call <see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics(Aerotech.Ensemble.Status.ControllerDiagPacket)"></see>.
            				</para>
            				<para>
            					You can do diagnostic retrieval automatically in a background thread by using the
            					<see cref="T:Aerotech.Ensemble.Status.ControlCenter"></see>.
            				</para>
            			</description>
            		</item>
            		<item>
            			<term>Data collection</term>
            			<description>
				<para>
					This method is more involved, but it is deterministic.  First start data collection
					by calling <see cref="M:Aerotech.Ensemble.DataCollection.Data.StartCollection(System.Double)"></see> method. This will tell the controller to start collecting
					data at a specified interval.  Then you must wait for a specific set of numbers to be collected by
					either explicitly checking <see cref="P:Aerotech.Ensemble.DataCollection.DataCollectionStatus.PointsCollected"></see> or calling the <see cref="M:Aerotech.Ensemble.DataCollection.Data.WaitForData(System.Int32)"></see>
					method. This ensures that the controller has collected the desired number of points.
				</para>
				<para>
					You have several options to retrieve the data.  You can either retrieve all of the data for
					all the axes by calling <see cref="M:Aerotech.Ensemble.DataCollection.AxesData.Retrieve"></see>,
					or you can retrieve a specific set of data for all of the axes by selecting the set (such 
					as <see cref="P:Aerotech.Ensemble.DataCollection.AxesData.Command"></see>) and calling <see cref="M:Aerotech.Ensemble.DataCollection.IDataRetriever`1.Retrieve"></see>.
				</para>
				<para>
					Note that if you start data collection, the controller will keep collecting the data until it
					reaches the limit of allocated memory for data collection or until the data collection is restarted
					(by calling <see cref="M:Aerotech.Ensemble.DataCollection.Data.StartCollection(System.Double)"></see>).
					If you want to limit the number of points that the controller will collect, change the
					<see cref="P:Aerotech.Ensemble.DataCollection.Data.PointsAllocated"></see> property.
				</para>
			</description>
            		</item>
            	</list>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.DataCollection</li>
<li>Aerotech.Ensemble.Information</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController-&gt;Information-&gt;Axes-&gt;Count;
        int pointsToCollect = 1000;
        // Tell the controller to collect the specified points of data for all axes.
        myController-&gt;DataCollection-&gt;PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController-&gt;DataCollection-&gt;StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData^&gt;^ axesPositionCommand = myController-&gt;DataCollection-&gt;Command-&gt;Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData^&gt;^ axesPositionFeedback = myController-&gt;DataCollection-&gt;Feedback-&gt;Retrieve(pointsToCollect);
        // Loop over each axis.
        for each (AxisInfo^ axisInfo in myController-&gt;Information-&gt;Axes)
        {
            for (int i = 0 ; (i &lt; pointsToCollect); i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console::WriteLine("Axis {0}, Point {1}", axisInfo-&gt;Name, i);
                Console::WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Error:    {0}", (axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i] - axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]));
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController.Information.Axes.Count;
        int pointsToCollect = 0x3e8;
        // Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData&gt; axesPositionCommand = myController.DataCollection.Command.Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData&gt; axesPositionFeedback = myController.DataCollection.Feedback.Retrieve(pointsToCollect);
        // Loop over each axis.
        foreach (AxisInfo axisInfo in myController.Information.Axes)
        {
            for (int i = 0; i &lt; pointsToCollect; i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i);
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Error:    {0}", axesPositionCommand[axisInfo.Name].Position[i] - axesPositionFeedback[axisInfo.Name].Position[i]);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Declare number of axes to collect from and the number of data points to collect.
        Dim numAxes As Integer = myController.Information.Axes.Count
        Dim pointsToCollect As Integer = &amp;H3E8
        ' Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect
        ' Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005)
        ' Retrieve the position command and position feedback data.
        Dim axesPositionCommand As AxesDataContainer(Of AxisCommandData) = myController.DataCollection.Command.Retrieve(pointsToCollect)
        Dim axesPositionFeedback As AxesDataContainer(Of AxisFeedbackData) = myController.DataCollection.Feedback.Retrieve(pointsToCollect)
        ' Loop over each axis.
        Dim axisInfo As AxisInfo
        For Each axisInfo In myController.Information.Axes
            Dim i As Integer
            For i = 0 To pointsToCollect - 1
                ' Print out the collected data, and compute position error based on the data by subtracting
                ' the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i)
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Error:    {0}", (axesPositionCommand.Item(axisInfo.Name).Position(i) - axesPositionFeedback.Item(axisInfo.Name).Position(i)))
            Next i
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxesData">
            <summary>
            Retrieves data for all the axes
            </summary>
            <remarks>
            	<para>
            		See <see cref="T:Aerotech.Ensemble.DataCollection.AxesData"></see> for more information.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.AxesData.controller">
            <summary>
            The controller with which this class is associated
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesData.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Insantiates a new instance of <see cref="T:Aerotech.Ensemble.DataCollection.AxesData"></see>
            </summary>
            <param name="controller">The controller with which to associate this class</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesData.Retrieve">
            <summary>
            Waits for all the data to be collected, then retrieves all data for all axes
            </summary>
            <returns>Data collection results</returns>
            <remarks>
            	<para>
            		This call blocks until all the allocated points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.DataCollection</li>
<li>Aerotech.Ensemble.Information</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController-&gt;Information-&gt;Axes-&gt;Count;
        int pointsToCollect = 1000;
        // Tell the controller to collect the specified points of data for all axes.
        myController-&gt;DataCollection-&gt;PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController-&gt;DataCollection-&gt;StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData^&gt;^ axesPositionCommand = myController-&gt;DataCollection-&gt;Command-&gt;Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData^&gt;^ axesPositionFeedback = myController-&gt;DataCollection-&gt;Feedback-&gt;Retrieve(pointsToCollect);
        // Loop over each axis.
        for each (AxisInfo^ axisInfo in myController-&gt;Information-&gt;Axes)
        {
            for (int i = 0 ; (i &lt; pointsToCollect); i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console::WriteLine("Axis {0}, Point {1}", axisInfo-&gt;Name, i);
                Console::WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Error:    {0}", (axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i] - axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]));
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController.Information.Axes.Count;
        int pointsToCollect = 0x3e8;
        // Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData&gt; axesPositionCommand = myController.DataCollection.Command.Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData&gt; axesPositionFeedback = myController.DataCollection.Feedback.Retrieve(pointsToCollect);
        // Loop over each axis.
        foreach (AxisInfo axisInfo in myController.Information.Axes)
        {
            for (int i = 0; i &lt; pointsToCollect; i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i);
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Error:    {0}", axesPositionCommand[axisInfo.Name].Position[i] - axesPositionFeedback[axisInfo.Name].Position[i]);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Declare number of axes to collect from and the number of data points to collect.
        Dim numAxes As Integer = myController.Information.Axes.Count
        Dim pointsToCollect As Integer = &amp;H3E8
        ' Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect
        ' Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005)
        ' Retrieve the position command and position feedback data.
        Dim axesPositionCommand As AxesDataContainer(Of AxisCommandData) = myController.DataCollection.Command.Retrieve(pointsToCollect)
        Dim axesPositionFeedback As AxesDataContainer(Of AxisFeedbackData) = myController.DataCollection.Feedback.Retrieve(pointsToCollect)
        ' Loop over each axis.
        Dim axisInfo As AxisInfo
        For Each axisInfo In myController.Information.Axes
            Dim i As Integer
            For i = 0 To pointsToCollect - 1
                ' Print out the collected data, and compute position error based on the data by subtracting
                ' the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i)
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Error:    {0}", (axesPositionCommand.Item(axisInfo.Name).Position(i) - axesPositionFeedback.Item(axisInfo.Name).Position(i)))
            Next i
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesData.Retrieve(System.Int32)">
            <summary>
            Waits for all the data to be collected, then retrieves all data for all axes
            </summary>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <returns>Data collection results</returns>
            <remarks>
            	<para>
            		This call blocks until the number of specified points have been collected,
            		then retrieves the number of specified points.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.DataCollection</li>
<li>Aerotech.Ensemble.Information</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController-&gt;Information-&gt;Axes-&gt;Count;
        int pointsToCollect = 1000;
        // Tell the controller to collect the specified points of data for all axes.
        myController-&gt;DataCollection-&gt;PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController-&gt;DataCollection-&gt;StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData^&gt;^ axesPositionCommand = myController-&gt;DataCollection-&gt;Command-&gt;Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData^&gt;^ axesPositionFeedback = myController-&gt;DataCollection-&gt;Feedback-&gt;Retrieve(pointsToCollect);
        // Loop over each axis.
        for each (AxisInfo^ axisInfo in myController-&gt;Information-&gt;Axes)
        {
            for (int i = 0 ; (i &lt; pointsToCollect); i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console::WriteLine("Axis {0}, Point {1}", axisInfo-&gt;Name, i);
                Console::WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Error:    {0}", (axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i] - axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]));
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController.Information.Axes.Count;
        int pointsToCollect = 0x3e8;
        // Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData&gt; axesPositionCommand = myController.DataCollection.Command.Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData&gt; axesPositionFeedback = myController.DataCollection.Feedback.Retrieve(pointsToCollect);
        // Loop over each axis.
        foreach (AxisInfo axisInfo in myController.Information.Axes)
        {
            for (int i = 0; i &lt; pointsToCollect; i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i);
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Error:    {0}", axesPositionCommand[axisInfo.Name].Position[i] - axesPositionFeedback[axisInfo.Name].Position[i]);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Declare number of axes to collect from and the number of data points to collect.
        Dim numAxes As Integer = myController.Information.Axes.Count
        Dim pointsToCollect As Integer = &amp;H3E8
        ' Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect
        ' Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005)
        ' Retrieve the position command and position feedback data.
        Dim axesPositionCommand As AxesDataContainer(Of AxisCommandData) = myController.DataCollection.Command.Retrieve(pointsToCollect)
        Dim axesPositionFeedback As AxesDataContainer(Of AxisFeedbackData) = myController.DataCollection.Feedback.Retrieve(pointsToCollect)
        ' Loop over each axis.
        Dim axisInfo As AxisInfo
        For Each axisInfo In myController.Information.Axes
            Dim i As Integer
            For i = 0 To pointsToCollect - 1
                ' Print out the collected data, and compute position error based on the data by subtracting
                ' the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i)
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Error:    {0}", (axesPositionCommand.Item(axisInfo.Name).Position(i) - axesPositionFeedback.Item(axisInfo.Name).Position(i)))
            Next i
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesData.Retrieve(System.Int32,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Waits for all the data to be collected, then retrieves all data for all axes
            </summary>
            <remarks>
            	<para>
            		This call blocks until the number of specified points have been collected,
            		then retrieves the number of specified points.
            	</para>
            </remarks>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <returns>Data collection results</returns>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.Mask">
            <summary>
            The mask representing on which axes to collect the data
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.Command">
            <summary>
            Provides access to retrieving Position, Velocity, and Acceleration Commands
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.CurrentFeedback">
            <summary>
            Provides access to retrieving Current Feedback
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.CurrentCommand">
            <summary>
            Provides access to retrieving Current Command
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.PositionFeedbackAuxiliary">
            <summary>
            Provides access to retrieving Position Feedback Auxiliary
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.AnalogInput">
            <summary>
            Provides access to retrieving Analog Input
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.AnalogOutput">
            <summary>
            Provides access to retrieving Analog Output
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.DigitalInput">
            <summary>
            Provides access to retrieving Digital Input
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.DigitalOutput">
            <summary>
            Provides access to retrieving Digital Output
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.AxisFault">
            <summary>
            Provides access to retrieving Axis Fault
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.OptionalData">
            <summary>
            Provides access to retrieving Optional Data
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.Feedback">
            <summary>
            Provides access to retrieving of Position and Velocity feedback
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.ProgramCounter">
            <summary>
            Provides access to retrieving Program Counter
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesData.AxisStatus">
            <summary>
            Provides access to retrieving Axis Status
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.Data.retrieveDataSemaphore">
            <summary>
            Object to lock on when doing a retrieve for the data
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.RetrieveData``1(Aerotech.Ensemble.Controller,System.Int32,System.Converter{System.Int32,``0},System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Utility function that allows for progress reporting of data retrieval
            </summary>
            <typeparam name="TData">The type of data to retrieve</typeparam>
            <param name="controller">The controller on which to collect the data</param>
            <param name="numberOfPoints">The number of points to collect</param>
            <param name="method">The method to call to collect the data</param>
            <param name="progressChangedEventHandler">The delegate to call to report progress</param>
            <returns>The data collected</returns>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.ScaleOptionalData(System.Double[],Aerotech.Ensemble.DataCollection.OptionalDataSource,Aerotech.Ensemble.Information.AxisInfo)">
            <summary>Utility function that scales the optional data</summary>
            <param name="data">The original data and the scaled data</param>
            <param name="source">The source name</param>
            <param name="axisInfo">The axis for which the data is retrieved</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.StartCollection(System.Double)">
            <summary>
            Starts the data collection at a specified rate
            </summary>
            <param name="period">The rate at which to start the data collection, in seconds</param>
            <remarks>
            	<para>
            		See <see cref="T:Aerotech.Ensemble.DataCollection.Data"></see> for more information on the semantics of calling this method.
            	</para>
            	<para>
            		The lowest <paramref name="period"></paramref> can be is <c>0.001</c>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.DataCollection</li>
<li>Aerotech.Ensemble.Information</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController-&gt;Information-&gt;Axes-&gt;Count;
        int pointsToCollect = 1000;
        // Tell the controller to collect the specified points of data for all axes.
        myController-&gt;DataCollection-&gt;PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController-&gt;DataCollection-&gt;StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData^&gt;^ axesPositionCommand = myController-&gt;DataCollection-&gt;Command-&gt;Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData^&gt;^ axesPositionFeedback = myController-&gt;DataCollection-&gt;Feedback-&gt;Retrieve(pointsToCollect);
        // Loop over each axis.
        for each (AxisInfo^ axisInfo in myController-&gt;Information-&gt;Axes)
        {
            for (int i = 0 ; (i &lt; pointsToCollect); i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console::WriteLine("Axis {0}, Point {1}", axisInfo-&gt;Name, i);
                Console::WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Error:    {0}", (axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i] - axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]));
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController.Information.Axes.Count;
        int pointsToCollect = 0x3e8;
        // Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData&gt; axesPositionCommand = myController.DataCollection.Command.Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData&gt; axesPositionFeedback = myController.DataCollection.Feedback.Retrieve(pointsToCollect);
        // Loop over each axis.
        foreach (AxisInfo axisInfo in myController.Information.Axes)
        {
            for (int i = 0; i &lt; pointsToCollect; i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i);
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Error:    {0}", axesPositionCommand[axisInfo.Name].Position[i] - axesPositionFeedback[axisInfo.Name].Position[i]);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Declare number of axes to collect from and the number of data points to collect.
        Dim numAxes As Integer = myController.Information.Axes.Count
        Dim pointsToCollect As Integer = &amp;H3E8
        ' Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect
        ' Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005)
        ' Retrieve the position command and position feedback data.
        Dim axesPositionCommand As AxesDataContainer(Of AxisCommandData) = myController.DataCollection.Command.Retrieve(pointsToCollect)
        Dim axesPositionFeedback As AxesDataContainer(Of AxisFeedbackData) = myController.DataCollection.Feedback.Retrieve(pointsToCollect)
        ' Loop over each axis.
        Dim axisInfo As AxisInfo
        For Each axisInfo In myController.Information.Axes
            Dim i As Integer
            For i = 0 To pointsToCollect - 1
                ' Print out the collected data, and compute position error based on the data by subtracting
                ' the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i)
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Error:    {0}", (axesPositionCommand.Item(axisInfo.Name).Position(i) - axesPositionFeedback.Item(axisInfo.Name).Position(i)))
            Next i
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.Stop">
            <summary>Stops the current data collection</summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics(Aerotech.Ensemble.Status.ControllerDiagPacket)">
            <summary>
            Retrieves diagnostic information for the controller
            </summary>
            <param name="previous">The previous diagnostics packet retrieved</param>
            <returns>The diagnostic information</returns>
            <remarks>
            	<para>
            		The <paramref name="previous"></paramref> is used to compute the velocities and accelerations between
            		the previous diagnostic information and the current one.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics">
            <summary>
            Retrieves diagnostic information for the controller
            </summary>
            <returns>The diagnostic information</returns>
            <remarks>
            	<para>
            		When calling this method some data will not be available (namely the velocities and accelerations);
            		to have this data be computed, use the <see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics(Aerotech.Ensemble.Status.ControllerDiagPacket)"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        // since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        // Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        // since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket);
        // Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the velocity information
        ' since we need to compare two packets to get velocity information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the velocity related information.
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        ' Retrieve the next ControllerDiagPacket for each axis. Doing this allows us to calculate and display the acceleration command
        ' since we need to compare two packets of velocity information to get acceleration information.
        controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(controllerDiagPacket)
        ' Print out the acceleration related information.
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics(System.Boolean)">
            <summary>
            Retrieves diagnostic information for the controller
            </summary>
            <param name="allInfo">Whether to retrieve enough diagnostics to computer all the data (velocity and acceleratioN)</param>
            <returns>The diagnostic information</returns>
            <remarks>
            	<para>
            		If <paramref name="allInfo"></paramref> is <c>true</c>, the diagnostic information will be retrieved three times, so that
            		it will be possible to compute velocity and acceleration.
            	</para>
            	<para>
            		Please note that this method retrieves three sets of diagnostics from the controller.  The preferred way of
            		getting all the information is <see cref="M:Aerotech.Ensemble.DataCollection.Data.RetrieveDiagnostics(Aerotech.Ensemble.Status.ControllerDiagPacket)"></see>
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Status</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket^ controllerDiagPacket = myController-&gt;DataCollection-&gt;RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console::WriteLine("Controller Information For Axis 0");
        Console::WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AmplifierTemperature);
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;CurrentFeedback);
        Console::WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput0);
        Console::WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput1);
        Console::WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalInput2);
        Console::WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput0);
        Console::WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput1);
        Console::WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask::A0]-&gt;DigitalOutput2);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;ProgramPositionFeedback);
        Console::WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityCommand);
        Console::WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityError);
        Console::WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask::A0]-&gt;VelocityFeedback);
        Console::WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask::A0]-&gt;AccelerationCommand);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        // acceleration without having to call RetrieveDiagnostics three times.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(true);
        // Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0");
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket[AxisMask.A0].AmplifierTemperature);
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[AxisMask.A0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[AxisMask.A0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[AxisMask.A0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[AxisMask.A0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[AxisMask.A0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[AxisMask.A0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[AxisMask.A0].CurrentFeedback);
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput0);
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput1);
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalInput2);
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput0);
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput1);
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket[AxisMask.A0].DigitalOutput2);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[AxisMask.A0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[AxisMask.A0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[AxisMask.A0].ProgramPositionFeedback);
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket[AxisMask.A0].VelocityCommand);
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket[AxisMask.A0].VelocityError);
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket[AxisMask.A0].VelocityFeedback);
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket[AxisMask.A0].AccelerationCommand);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve the three ControllerDiagPackets for each axis. This allows us to compute velocity and
        ' acceleration without having to call RetrieveDiagnostics three times.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics(True)
        ' Print out all the information we can for Axis 0 using all three ControllerDiagPackets
        Console.WriteLine("Controller Information For Axis 0")
        Console.WriteLine("  Amplifier Temperature: {0}", controllerDiagPacket.Item(AxisMask.A0).AmplifierTemperature)
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(AxisMask.A0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).CurrentFeedback)
        Console.WriteLine("  Digital Input 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput0)
        Console.WriteLine("  Digital Input 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput1)
        Console.WriteLine("  Digital Input 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalInput2)
        Console.WriteLine("  Digital Output 0: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput0)
        Console.WriteLine("  Digital Output 1: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput1)
        Console.WriteLine("  Digital Output 2: {0}", controllerDiagPacket.Item(AxisMask.A0).DigitalOutput2)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).ProgramPositionFeedback)
        Console.WriteLine("  Velocity Command: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityCommand)
        Console.WriteLine("  Velocity Error: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityError)
        Console.WriteLine("  Velocity Feedback: {0}", controllerDiagPacket.Item(AxisMask.A0).VelocityFeedback)
        Console.WriteLine("  Acceleration Command: {0}", controllerDiagPacket.Item(AxisMask.A0).AccelerationCommand)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="F:Aerotech.Ensemble.DataCollection.Data.controller">
            <summary>
            The controller with which this class is associated with
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.#ctor(Aerotech.Ensemble.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.DataCollection.Data"></see>
            </summary>
            <param name="controller">The controller with which to associate this class</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.WaitForData(System.Int32)">
            <summary>
            Waits for a specific amount of data points to be collected
            </summary>
            <param name="points">The number of points to wait for</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.Data.WaitForData(System.Int32,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Waits for a specific amount of data points to be collected
            </summary>
            <param name="points">The number of points to wait for</param>
            <param name="waiter">The delegate that will be called with updates of the progress</param>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.Data.TaskCollection">
            <summary>
            Specifies the task for which to collect the program position
            </summary>
            <remarks>
            	<para>
            		Default is <see cref="F:Aerotech.Ensemble.TaskId.TAuxiliary"></see>
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.Data.Status">
            <summary>Provides the current status of data collection</summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.Data.PointsAllocated">
            <summary>
            Specifies the maximum number of points to collect
            </summary>
            <remarks>
            	<para>
            		Setting this property is optional, the preferred way is to specify the number of points
            		to retrieve when retrieving the data.  This property affects data collection started
            		from any source, and therefore could potentially impact other applications.
            	</para>
            	<para>
            		The default value is <see cref="P:Aerotech.Ensemble.Parameters.SystemMemoryAllocationParameterCategory.DataCollectionPoints"></see>,
            		and that is also the maximum this property can be.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.DataCollection</li>
<li>Aerotech.Ensemble.Information</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController-&gt;Information-&gt;Axes-&gt;Count;
        int pointsToCollect = 1000;
        // Tell the controller to collect the specified points of data for all axes.
        myController-&gt;DataCollection-&gt;PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController-&gt;DataCollection-&gt;StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData^&gt;^ axesPositionCommand = myController-&gt;DataCollection-&gt;Command-&gt;Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData^&gt;^ axesPositionFeedback = myController-&gt;DataCollection-&gt;Feedback-&gt;Retrieve(pointsToCollect);
        // Loop over each axis.
        for each (AxisInfo^ axisInfo in myController-&gt;Information-&gt;Axes)
        {
            for (int i = 0 ; (i &lt; pointsToCollect); i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console::WriteLine("Axis {0}, Point {1}", axisInfo-&gt;Name, i);
                Console::WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]);
                Console::WriteLine("    Position Error:    {0}", (axesPositionCommand[axisInfo-&gt;Name]-&gt;Position[i] - axesPositionFeedback[axisInfo-&gt;Name]-&gt;Position[i]));
            }
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Declare number of axes to collect from and the number of data points to collect.
        int numAxes = myController.Information.Axes.Count;
        int pointsToCollect = 0x3e8;
        // Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect;
        // Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005);
        // Retrieve the position command and position feedback data.
        AxesDataContainer&lt;AxisCommandData&gt; axesPositionCommand = myController.DataCollection.Command.Retrieve(pointsToCollect);
        AxesDataContainer&lt;AxisFeedbackData&gt; axesPositionFeedback = myController.DataCollection.Feedback.Retrieve(pointsToCollect);
        // Loop over each axis.
        foreach (AxisInfo axisInfo in myController.Information.Axes)
        {
            for (int i = 0; i &lt; pointsToCollect; i++)
            {
                // Print out the collected data, and compute position error based on the data by subtracting
                // the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i);
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback[axisInfo.Name].Position[i]);
                Console.WriteLine("    Position Error:    {0}", axesPositionCommand[axisInfo.Name].Position[i] - axesPositionFeedback[axisInfo.Name].Position[i]);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Declare number of axes to collect from and the number of data points to collect.
        Dim numAxes As Integer = myController.Information.Axes.Count
        Dim pointsToCollect As Integer = &amp;H3E8
        ' Tell the controller to collect the specified points of data for all axes.
        myController.DataCollection.PointsAllocated = pointsToCollect
        ' Start the data collection at a rate of 200Hz for all axes.
        myController.DataCollection.StartCollection(0.005)
        ' Retrieve the position command and position feedback data.
        Dim axesPositionCommand As AxesDataContainer(Of AxisCommandData) = myController.DataCollection.Command.Retrieve(pointsToCollect)
        Dim axesPositionFeedback As AxesDataContainer(Of AxisFeedbackData) = myController.DataCollection.Feedback.Retrieve(pointsToCollect)
        ' Loop over each axis.
        Dim axisInfo As AxisInfo
        For Each axisInfo In myController.Information.Axes
            Dim i As Integer
            For i = 0 To pointsToCollect - 1
                ' Print out the collected data, and compute position error based on the data by subtracting
                ' the position command from the position feedback for that given point.
                Console.WriteLine("Axis {0}, Point {1}", axisInfo.Name, i)
                Console.WriteLine("    Position Command:  {0}", axesPositionCommand.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Feedback: {0}", axesPositionFeedback.Item(axisInfo.Name).Position(i))
                Console.WriteLine("    Position Error:    {0}", (axesPositionCommand.Item(axisInfo.Name).Position(i) - axesPositionFeedback.Item(axisInfo.Name).Position(i)))
            Next i
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.DataCollectionStatus">
            <summary>Contains status of data collection</summary>
            <remarks>
            	<para>This can be retrieved from <see cref="P:Aerotech.Ensemble.DataCollection.Data.Status"></see></para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.DataCollectionStatus.PointsAllocated">
            <summary>
            Specifies the maximum number of points to collect
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.DataCollectionStatus.PointsCollected">
            <summary>
            The number of points currently collected
            </summary>
            <remarks>
            	<para>
            		This property returns the number of points currently collected on the controller.  This will go
            		to a maximum of <see cref="P:Aerotech.Ensemble.DataCollection.DataCollectionStatus.PointsAllocated"></see>.
            	</para>
            	<para>
            		Instead of monitoring this property, one can use the <see cref="M:Aerotech.Ensemble.DataCollection.Data.WaitForData(System.Int32)"></see> method.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.DataCollectionStatus.IsScopeTrigInitiated">
            <summary>Whether the collection was started by a scopetrig command</summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.DataCollectionStatus.ScopeTrigId">
            <summary>The Id with which ScopeTrig was initiated</summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.ControllerProgramCounterRetriever">
            <summary>
            Allows retrieval of Program Counter for the master
            </summary>
            <remarks>
            	<para>
            		To specify for which task to collect the data, see <see cref="P:Aerotech.Ensemble.DataCollection.Data.TaskCollection"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.ControllerProgramCounterRetriever.Retrieve">
            <summary>
            Waits for all the Program Counter data to be collected, then retrieves it
            </summary>
            <returns>The Program Counter</returns>
            <remarks>
            	<para>
            		This call blocks until all the allocated points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.ControllerProgramCounterRetriever.Retrieve(System.Int32)">
            <summary>
            Waits for the specified number of Program Counter data points to be collected, then retrieves it
            </summary>
            <param name="pointsToRetrieve">Number of points to retrieve</param>
            <returns>The Program Counter</returns>
            <remarks>
            	<para>
            		This call blocks until the specified number of points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.ControllerProgramCounterRetriever.Retrieve(System.Int32,System.Double@)">
            <summary>
            Waits for the specified number of Program Counter data points to be collected, then retrieves it
            </summary>
            <param name="pointsToRetrieve">Number of points to retrieve</param>
            <param name="collectionPeriod">Collection period</param>
            <returns>The Program Counter</returns>
            <remarks>
            	<para>
            		This call blocks until the specified number of points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.ControllerProgramCounterRetriever.Retrieve(System.Int32,System.Double@,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Waits for the specified number of Program Counter data points to be collected, then retrieves it
            </summary>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <param name="collectionPeriod">Collection period</param>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <returns>The Program Counter</returns>
            <remarks>
            	<para>
            		This call blocks until the specified number of points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxisCommandData">
            <summary>
            Contains position, velocity, and acceleration command data
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisCommandData.#ctor(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Instantiates a new instance
            </summary>
            <param name="position">The position data</param>
            <param name="posCmd1">The t=-1 point of position</param>
            <param name="posCmd2">The t=-2 point of position</param>
            <param name="inverseInterval">The inverse of the interval (the scale to use)</param>
            <param name="scaleFactor">The scaling factor</param>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisCommandData.PositionCounts">
            <summary>
            The position command of the axis, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisCommandData.Position">
            <summary>
            The position command of the axis, in user units
            </summary>
            <include file="examples.xml" path="/*/DataCollection/Example[@name=&quot;DataCollection1&quot;]/*"></include>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisCommandData.VelocityCounts">
            <summary>
            The velocity command of the axis, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisCommandData.Velocity">
            <summary>
            The velocity command of the axis, in user units
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisCommandData.AccelerationCounts">
            <summary>
            The acceleration command of the axis, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisCommandData.Acceleration">
            <summary>
            The acceleration command of the axis, in user units
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxisAnalogInputData">
            <summary>
            Stores analog input #0 and #1 data
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisAnalogInputData.#ctor(System.Int32[],System.Double)">
            <summary>
            Instantiates a new instance
            </summary>
            <param name="data">The data to use</param>
            <param name="scaling">The scaling to use (dependent on max amp output)</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisAnalogInputData.#ctor(System.UInt16[],System.UInt16[],System.Double)">
            <summary>
            Instantiates a new instance
            </summary>
            <param name="analogInput0">The analog input #0 data</param>
            <param name="analogInput1">The analog input #1 data</param>
            <param name="scaling">The scaling to use (dependent on max amp output)</param>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisAnalogInputData.Input0">
            <summary>
            Analog Input #0
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisAnalogInputData.Input1">
            <summary>
            Analog Input #1
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxisAnalogOutputData">
            <summary>
            Stores analog output #0 and #1 data
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisAnalogOutputData.#ctor(System.Int32[],System.Double)">
            <summary>
            Instantiates a new instance
            </summary>
            <param name="data">The data to use</param>
            <param name="scaling">The scaling to use (dependent on max amps)</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisAnalogOutputData.#ctor(System.UInt16[],System.UInt16[],System.Double)">
            <summary>
            Insantiates a new instance
            </summary>
            <param name="analogOutput0">The analog output #0 data</param>
            <param name="analogOutput1">The analog output #1 data</param>
            <param name="scaling">The scaling to use (dependent on max amps)</param>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisAnalogOutputData.Output0">
            <summary>
            Analog Output #0
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisAnalogOutputData.Output1">
            <summary>
            Analog Output #1
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxisDigitalInputData">
            <summary>
            Stores digital input #0, #1, and #2 data
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisDigitalInputData.#ctor(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Instantiates a new instance
            </summary>
            <param name="input0">The data of input #0</param>
            <param name="input1">The data of input #1</param>
            <param name="input2">The data of input #2</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisDigitalInputData.#ctor(System.Int32[])">
            <summary>
            Insantiates a new instance
            </summary>
            <param name="input">The input data to use</param>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDigitalInputData.Input0">
            <summary>
            Digital Input #0
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDigitalInputData.Input1">
            <summary>
            Digital Input #1
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDigitalInputData.Input2">
            <summary>
            Digital Input #2
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxisDigitalOutputData">
            <summary>
            Stores digital output #0, #1, and #2 data
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisDigitalOutputData.#ctor(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Insantiates a new instance
            </summary>
            <param name="output0">The output #0 data</param>
            <param name="output1">The output #1 data</param>
            <param name="output2">The output #2 data</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisDigitalOutputData.#ctor(System.Int32[])">
            <summary>
            Instantiates a new instance
            </summary>
            <param name="output">The output data</param>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDigitalOutputData.Output0">
            <summary>
            Digital output #0
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDigitalOutputData.Output1">
            <summary>
            Digital output #1
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisDigitalOutputData.Output2">
            <summary>
            Digital output #2
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxisFeedbackData">
            <summary>
            Stores the position and velocity feedback data
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxisFeedbackData.#ctor(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Instantiates a new instance
            </summary>
            <param name="position">The position to use</param>
            <param name="posFbk">The t=-1 position</param>
            <param name="reverseInterval">The reverse of the interval (the scaling to use)</param>
            <param name="scaleFactor">The position scale factor</param>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisFeedbackData.PositionCounts">
            <summary>
            The position feedback of the axis, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisFeedbackData.Position">
            <summary>
            The position feedback of the axis, in user units
            </summary>
            <include file="examples.xml" path="/*/DataCollection/Example[@name=&quot;DataCollection1&quot;]/*"></include>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisFeedbackData.VelocityCounts">
            <summary>
            The velocity feedback of the axis, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxisFeedbackData.Velocity">
            <summary>
            The velocity feedback of the axis, in user units
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.IDataRetriever`1">
            <summary>
            Retrieves some specific data from the Controller
            </summary>
            <typeparam name="TData">The type of data to retrieve</typeparam>
            <remarks>
            	<para>
            		For examples of use see <see cref="P:Aerotech.Ensemble.DataCollection.AxesData.Command"></see> and <see cref="P:Aerotech.Ensemble.DataCollection.AxesData.AxisStatus"></see>.
            	</para>
            	<para>
            		This class is used to provide a standardized way of retrieving data from the controller
            		or from an axis.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.IDataRetriever`1.Retrieve">
            <summary>
            Waits for data to be available and then retrieves the specific data for multiple or one axis
            </summary>
            <returns>Data collection results</returns>
            <remarks>
            	<para>
            		This call blocks until all the allocated points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.IDataRetriever`1.Retrieve(System.Int32)">
            <summary>
            Waits for data to be available and then retrieves the specific data for multiple or one axis
            </summary>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <returns>Data collection results</returns>
            <remarks>
            	<para>
            		This call blocks until the number of specified points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.IDataRetriever`1.Retrieve(System.Int32,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Waits for data to be available and then retrieves the specific data for multiple or one axis
            </summary>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <returns>Data collection results</returns>
            <remarks>
            	<para>
            		This call blocks until the number of specified points have been collected,
            		then retrieves all the points.
            	</para>
            	<para>
            		The progress is provided by the <paramref name="progressChangedEventHandler"></paramref>, the progress
            		is provided for retrieval of the data from the controller, <strong>not</strong> for
            		collection of data.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxesDataContainer`1">
            <summary>
            A container of some data for several axes
            </summary>
            <typeparam name="TData">The type of data stored</typeparam>
            <remarks>
            	<para>
            		This class is used to provide a standardized way to accessing the data that has been retrieved.  This
            		class is returned by <see cref="T:Aerotech.Ensemble.DataCollection.IDataRetriever`1"></see>.
            	</para>
            	<para>
            		Once you get a reference to this class, any operations that are performed on it do not communicate to
            		the controller.  Therefore it is safe to disconnect the controller or from the network and continue to access
            		this data.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.#ctor(`0[],System.String[],System.Double,System.Int32)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.DataCollection.AxesDataContainer`1"></see>
            </summary>
            <param name="data">The data to store</param>
            <param name="names">The names of axes</param>
            <param name="collectionPeriod">The period of data collection</param>
            <param name="mask">The mask of axes for which the data (and names) is provided</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Remask(Aerotech.Ensemble.AxisMask)">
            <summary>
            Produces a new collection with some additional axes masked
            </summary>
            <param name="mask">The mask to apply to the axes in this collection</param>
            <returns>A new collection with additional axes masked</returns>
            <remarks>
            	<para>
            		The <see cref="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Mask"></see> and <paramref name="mask"></paramref> are both applied to the
            		axes in this collection, so that there will be less axes data available after remasking.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.GetEnumerator">
            <summary>
            Provides an enumerator
            </summary>
            <returns>The enumerator for the data in this collection</returns>
            <remarks>
            	<para>
            		The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"></see> in the returned elements of the enumerator is
            		the axis' name, and the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"></see> is the data.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.AxisNames">
            <summary>
            Gives the names of the axes of the controller from which data was retrieved
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Count">
            <summary>
            The number of axes present
            </summary>
            <remarks>
            	<para>
            		This specifies for how many axes there is data present.  Please note that
            		it is possible for data for only the 7th axis to be present, - in this case
            		the value of this property will be 1 (there is data for one axis).
            	</para>
            	<note>
            		The preferred way of iterating over this collection is by using a <c>foreach</c>
            		loop.
            	</note>
            	<note>
            		Do <strong>use</strong> this value in a <c>for</c> loop.  For the purposes
            		of <c>for</c> loop, use <see cref="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Capacity"></see>.
            	</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Capacity">
            <summary>
            Returns the number of slots for data in this container
            </summary>
            <remarks>
            	<para>
            		This specifies for how many axes there are slots.  Please note that it is
            		possible for only data for the 7th axis to be present, - in this case
            		the value of this property will be the maximum number of axes possible on a
            		controller.
            	</para>
            	<note>
            		This value can be used in a <c>for</c> loop.  When looping over all the values
            		check for <c>null</c> to see if there is data for an axis with that number.
            		To know for how many axes there is data stored in this collection, see
            		<see cref="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Count"></see>.
            	</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Item(System.String)">
            <summary>
            	Gives access to an axis's data
            </summary>
            <param name="name">The name of the axis</param>
            <returns>The data for the selected axis</returns>
            <remarks>
            	<para>
            		The names are specified as they were specified during data retrieval; if axis names change after,
            		this class will not be affected, and will use the original names.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Item(System.Int32)">
            <summary>
            Gives access to an axis's data
            </summary>
            <param name="index">The axis number</param>
            <returns>The data for the selected axis, or <c>null</c> if no data is available</returns>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Item(Aerotech.Ensemble.AxisMask)">
            <summary>
            Gives access to an axis's data
            </summary>
            <param name="mask">The mask of the axis</param>
            <returns>The data for the given axis mask</returns>
            <remarks>
            	<note>
            		Only one axis is allowed to be selected in the <paramref name="mask"></paramref>
            	</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Mask">
            <summary>
            The axes mask
            </summary>
            <remarks>
            	<para>
            		Tells which axes' data is present in the collection.  The number of axes that are present in the mask
            		equals <see cref="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.Count"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataContainer`1.CollectionPeriod">
            <summary>
            Gives the collection period of the data
            </summary>
            <remarks>
            	<para>
            		This is given in seconds.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever">
            <summary>
            Allows retrieval of Optional Data for several axes
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Retrieve(Aerotech.Ensemble.DataCollection.OptionalDataNumber)">
            <summary>
            Waits for all the Optional Data to be collected, then retrieves it
            </summary>
            <param name="optionalNumber">The number of the optional data to retrieve</param>
            <returns>The Optional Data</returns>
            <remarks>
            	<para>
            		To specify what to collect, call the <see cref="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)"></see>.
            	</para>
            	<para>
            		This call blocks until all the allocated points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Retrieve(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber)">
            <summary>
            Waits for for the specified number of Optional Data points to be collected, then retrieves it
            </summary>
            <param name="optionalNumber">The number of the optional data to retrieve</param>
            <param name="pointsToRetrieve">Number of points to retrieve</param>
            <returns>The Optional Data</returns>
            <remarks>
            	<para>
            		To specify what to collect, call the <see cref="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)"></see>.
            	</para>
            	<para>
            		This call blocks until the specified number of points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Retrieve(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Waits for for the specified number of Optional Data points to be collected, then retrieves it
            </summary>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <param name="optionalNumber">The number of the optional data to retrieve</param>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <returns>The Optional Data</returns>
            <remarks>
            	<para>
            		To specify what to collect, call the <see cref="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)"></see>.
            	</para>
            	<para>
            		This call blocks until the specified number of points have been collected,
            		then retrieves all the points.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)">
            <summary>
            Selects which data to collect for optional data
            </summary>
            <param name="axisNumber">The axis number to select the optional data on</param>
            <param name="optionalData">The number of optional data buffer</param>
            <param name="dataSource">Which data to collect</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(System.String,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)">
            <summary>
            Selects which data to collect for optional data
            </summary>
            <param name="axisName">The axis name to select the optional data on</param>
            <param name="optionalData">The number of optional data buffer</param>
            <param name="dataSource">Which data to collect</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(Aerotech.Ensemble.AxisMask,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)">
            <summary>
            Selects which data to collect for optional data
            </summary>
            <param name="axisMask">The axis mask to select the optional data on</param>
            <param name="optionalData">The number of optional data buffer</param>
            <param name="dataSource">Which data to collect</param>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.SelectMemory(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource,System.Int32)">
            <summary>
            Selects which memory location to collect for optional data
            </summary>
            <param name="axisNumber">The axis number to select the optional data on</param>
            <param name="optionalData">The number of optional data buffer</param>
            <param name="dataSource">What kind of variable type to collect</param>
            <param name="memoryLocation">The location from which to collect the data</param>
            <remarks>
            	<para>
            		No matter what type of data you will be collecting, it will always be returned as a <c>double</c>.  The values will be converted to <c>double</c> (actual conversion, not pointer casting).
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.SelectMemory(System.String,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource,System.Int32)">
            <summary>
            Selects which memory location to collect for optional data
            </summary>
            <param name="axisName">The axis name to select the optional data on</param>
            <param name="optionalData">The number of optional data buffer</param>
            <param name="dataSource">What kind of variable type to collect</param>
            <param name="memoryLocation">The location from which to collect the data</param>
            <remarks>
            	<para>
            		No matter what type of data you will be collecting, it will always be returned as a <c>double</c>.  The values will be converted to <c>double</c> (actual conversion, not pointer casting).
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.SelectMemory(Aerotech.Ensemble.AxisMask,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalMemoryDataSource,System.Int32)">
            <summary>
            Selects which memory location to collect for optional data
            </summary>
            <param name="axisMask">The axis mask to select the optional data on</param>
            <param name="optionalData">The number of optional data buffer</param>
            <param name="dataSource">What kind of variable type to collect</param>
            <param name="memoryLocation">The location from which to collect the data</param>
            <remarks>
            	<para>
            		No matter what type of data you will be collecting, it will always be returned as a <c>double</c>.  The values will be converted to <c>double</c> (actual conversion, not pointer casting).
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.DataCollection.AxesDataResults">
            <summary>
            Contains collected data for all axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.Command">
            <summary>
            The position, velocity, and acceleration commands for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.Feedback">
            <summary>
            The position and velocity feedbacks for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.PositionErrorCounts">
            <summary>
            The position errors for the axes, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.PositionError">
            <summary>
            The position errors for the axes, in user units
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.VelocityErrorCounts">
            <summary>
            The velocity errors for the axes, in counts
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.VelocityError">
            <summary>
            The velocity errors for the axes, in user units
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.CurrentFeedback">
            <summary>
            The current feedbacks for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.CurrentCommand">
            <summary>
            The current commands for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.CurrentError">
            <summary>
            The current errors for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.DigitalInput">
            <summary>
            The digital inputs #0, #1, and #2 for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.DigitalOutput">
            <summary>
            The digital outputs #0, #1, and #2 for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.AnalogInput">
            <summary>
            The analog input #0 and #1 for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.AnalogOutput">
            <summary>
            The analog output #0 and #1 for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.OptionalData1">
            <summary>
            The optional data #1 for the axes
            </summary>
            <remarks>
            	<para>
            		To specify what to collect, call the <see cref="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.OptionalData2">
            <summary>
            The optional data #2 for the axes
            </summary>
            <remarks>
            	<para>
            		To specify what to collect, call the <see cref="M:Aerotech.Ensemble.DataCollection.AxesOptionalRetriever.Select(System.Int32,Aerotech.Ensemble.DataCollection.OptionalDataNumber,Aerotech.Ensemble.DataCollection.OptionalDataSource)"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.PositionFeedbackAuxiliary">
            <summary>
            The position feedback auxiliary for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.AxisFault">
            <summary>
            The faults for the axes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.DataCollection.AxesDataResults.AxisStatus">
            <summary>
            The statuses for the axes
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.EnsembleException">
            <summary>
            Represents software library errors
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Exceptions.EnsembleException.Criticality">
            <summary>
            Specifies how severe the exception is
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Exceptions.EnsembleException.HelpKey">
            <summary>
            Specifies the key to look for in the help file for more detailed description
            </summary>
            <remarks>
            	<para>
            		This property provides a key to look for in the index page of the help file
            		for a more detailed description of the error, and possibly solutions.
            	</para>
            	<note>
            		The value of this key for a given error can change from version to version, and should
            		<strong>not</strong> be used to uniquely identify an error.
            	</note>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.SoftwareEnvironmentException">
            <summary>
            Represents errors that occur due to an invalid Software environment
            </summary>
            <remarks>
            	<para>
            		This does not only happen when accessing the <see cref="T:Aerotech.Ensemble.SoftwareEnvironment"></see> class, but can
            		happen in other situations when the software is run in an invalid software environment.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.IOException">
            <summary>
            Represents errors that occur during I/O operations
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.FileIOException">
            <summary>
            Represents errors that occur during file I/O operations
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.FileAccessFailureException">
            <summary>
            Represents errors that occur due to file access failure errors
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.InvalidFileFormatException">
            <summary>
            Represents errors that occur due to invalid file format
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Exceptions.InvalidFileFormatException.Upgradable">
            <summary>Whether the file is upgradable using current software</summary>
            <remarks>
            	<para>The upgrade might have to be done using Aerotech applications.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.ControllerException">
            <summary>
            Represents errors that occur when operating on a specific controller
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Exceptions.ControllerException.Controller">
            <summary>
            The controller that generated the exception
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.CommunicationException">
            <summary>
            Represents errors that occur due to communication errors
            </summary>
            <remarks>
            	<para>
            		This exception happens when there are problems communicating to a controller.
            	</para>
            	<para>
            		If this exception is thrown, the <see cref="T:Aerotech.Ensemble.Controller"></see> is disconnected.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.LostCommunicationException">
            <summary>
            Represents errors that occur due to loss of communication
            </summary>
            <remarks>
            	<para>
            		If this error occurs, the <see cref="T:Aerotech.Ensemble.Controller"></see> object becomes disconnected.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.ParameterException">
            <summary>
            Represents errors that occur due to operations on parameters
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.InvalidParameterValueException">
            <summary>
            Represents errors that occur due to parameter values being invalid
            </summary>
            <remarks>
            	<para>
            		For example, this can happen if the value is set outside of the range of acceptable values for the parameter.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.TaskException">
            <summary>
            Represents errors that occur due to operations on a task
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.DataCollectionException">
            <summary>
            Represents errors that occur during operations of data collection
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.CallbacksException">
            <summary>
            Represents errors that occur due to callbacks on a controller
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.AeroBasicException">
            <summary>
            Represents errors that occur due to operations with AeroBasic
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.NetworkException">
            <summary>
            Represents errors that occur during use of network
            </summary>
            <remarks>
            	<para>
            		These happen when one is communicating with the network.
            		This exception can be thrown when an error occurs while communicating via USB or Ethernet.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.NetworkConnectionException">
            <summary>
            Represents errors that occur while establishing the connection over the network
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.UnknownCommunicationTypeException">
            <summary>
            Represents errors that occur when the communication type specified is not supported by the library
            </summary>
            <remarks>
            	<para>
            		If you receive this error, please contact Aerotech.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Exceptions.UnknownCommunicationTypeException.CommunicationType">
            <summary>The communication type that is being used</summary>
            <remarks>
            	<para>
            		This is the communication type that is unknown to the library.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.NetworkSetupException">
            <summary>
            Represents errors that occur when the configuration of the network is invalid
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.DisconnectedException">
            <summary>
            Represents errors that occur when trying to perform operations on a disconnected controller
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.TaskLoadException">
            <summary>
            Represents errors that occur during loading of a task
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.TaskDebugException">
            <summary>
            Represents errors that occur during debugging of a task
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.DebugStepException">
            <summary>
            Represents errors that occur during stepping of a task
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.DebugVariableException">
            <summary>
            Represents errors that occur during resolving of variables in a task
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Exceptions.FileManagerException">
            <summary>
            Represents errors that occur during file operations on a controller
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.FileSystem.FileManager">
            <summary>
            Provides access to the file system on the controller
            </summary>
            <remarks>
            	<para>
            		The controller's file system can store files on it to be
            		either retrieved later on by the PC, or by reading and writing them
            		from AeroBasic.
            	</para>
            	<para>
            		To query the file system for file information you can either request
            		information about a specific file by using the <see cref="P:Aerotech.Ensemble.FileSystem.FileManager.Item(System.String)"></see>, or
            		requesting information about all the files using <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.ListFiles"></see>.
            	</para>
            	<para>
            		To modify the system you can send files using <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Send(System.String)"></see>,
            		delete them using <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Delete(System.String)"></see>, and retrieve them using
            		<see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Retrieve(System.String,System.String)"></see>.
            	</para>
            	<note>
            		When deleting a file on the Controller, the file is not deleted, but
            		marked as deleted.  Due to this, after you delete a file, the free
            		space on the file system will not increase.  To release the space from
            		deleted files, call <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Optimize"></see>.
            	</note>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileManager.retrieveFilesSemaphore">
            <summary>
            Object to lock on when file information is being retrieved
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileManager.sendFileSemaphore">
            <summary>
            Object to lock on when sending a file
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileManager.retrieveFileSemaphore">
            <summary>
            Object to lock on when retrieving a file
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileManager.controller">
            <summary>The controller to which this object is associated</summary>
        </member>
        <member name="F:Aerotech.Ensemble.FileSystem.FileManager.axisNumber">
            <summary>The axis on which the file system is being accessed</summary>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.#ctor(Aerotech.Ensemble.Controller,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Aerotech.Ensemble.FileSystem.FileManager"></see>
            </summary>
            <param name="controller">The controller on which to operate</param>
            <param name="axisNumber">The axis number for which this class is for</param>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.ListFiles">
            <summary>
            Retrieves information about all files from the controller
            </summary>
            <returns>The files on the controller</returns>
            <remarks>
            	<para>
            		If information on a specific known file is needed,
            		use <see cref="P:Aerotech.Ensemble.FileSystem.FileManager.Item(System.String)"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.FileSystem</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController-&gt;FileManager-&gt;Format();
        // Send two files down to the filesystem.
        myController-&gt;FileManager-&gt;Send("file1.bcx");
        myController-&gt;FileManager-&gt;Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        array&lt;FileInfo^&gt;^ fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController-&gt;FileManager-&gt;Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Print the current space free on the filesystem.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController-&gt;FileManager-&gt;Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format();
        // Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx");
        myController.FileManager.Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        FileInfo[] fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format
        ' Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx")
        myController.FileManager.Send("file2.bcx")
        ' Print the current files on the filesystem to verify files have been sent.
        Dim fileInfo As FileInfo() = myController.FileManager.ListFiles
        Dim file As FileInfo
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx")
        ' Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
        ' Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize
        ' Print the free space again. Note that the file is not freed from memory until
        ' you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.ListFiles(System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Retrieves information about all files from the controller
            </summary>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <returns>The files on the controller</returns>
            <remarks>
            	<para>
            		If information on a specific known file is needed,
            		use <see cref="P:Aerotech.Ensemble.FileSystem.FileManager.Item(System.String)"></see>.
            	</para>
            	<para>
            		Depending on how many files are present on the controller's file system, this operation
            		may take some time to complete. To obtain information on the progress, use <paramref name="progressChangedEventHandler"></paramref>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Format">
            <summary>
            Formats the file system
            </summary>
            <remarks>
            	<note>This will delete all files in the file system.</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.FileSystem</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController-&gt;FileManager-&gt;Format();
        // Send two files down to the filesystem.
        myController-&gt;FileManager-&gt;Send("file1.bcx");
        myController-&gt;FileManager-&gt;Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        array&lt;FileInfo^&gt;^ fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController-&gt;FileManager-&gt;Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Print the current space free on the filesystem.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController-&gt;FileManager-&gt;Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format();
        // Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx");
        myController.FileManager.Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        FileInfo[] fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format
        ' Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx")
        myController.FileManager.Send("file2.bcx")
        ' Print the current files on the filesystem to verify files have been sent.
        Dim fileInfo As FileInfo() = myController.FileManager.ListFiles
        Dim file As FileInfo
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx")
        ' Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
        ' Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize
        ' Print the free space again. Note that the file is not freed from memory until
        ' you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Optimize">
            <summary>
            Optimizes the file system
            </summary>
            <remarks>
            	<para>
            		When deleting a file on the Controller, the file is not deleted, but
            		marked as deleted.  Due to this, after you delete a file, the free
            		space on the file system will not increase.  To release the space from
            		deleted files, call <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Optimize"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.FileSystem</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController-&gt;FileManager-&gt;Format();
        // Send two files down to the filesystem.
        myController-&gt;FileManager-&gt;Send("file1.bcx");
        myController-&gt;FileManager-&gt;Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        array&lt;FileInfo^&gt;^ fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController-&gt;FileManager-&gt;Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Print the current space free on the filesystem.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController-&gt;FileManager-&gt;Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format();
        // Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx");
        myController.FileManager.Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        FileInfo[] fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format
        ' Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx")
        myController.FileManager.Send("file2.bcx")
        ' Print the current files on the filesystem to verify files have been sent.
        Dim fileInfo As FileInfo() = myController.FileManager.ListFiles
        Dim file As FileInfo
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx")
        ' Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
        ' Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize
        ' Print the free space again. Note that the file is not freed from memory until
        ' you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Send(System.String)">
            <summary>
            Sends a file to the controller
            </summary>
            <param name="fileName">The file to send</param>
            <returns>
            	The <see cref="T:Aerotech.Ensemble.FileSystem.FileInfo"></see> object for the <paramref name="fileName"></paramref> file on the
            	controller.
            </returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.FileSystem</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController-&gt;FileManager-&gt;Format();
        // Send two files down to the filesystem.
        myController-&gt;FileManager-&gt;Send("file1.bcx");
        myController-&gt;FileManager-&gt;Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        array&lt;FileInfo^&gt;^ fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController-&gt;FileManager-&gt;Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Print the current space free on the filesystem.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController-&gt;FileManager-&gt;Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format();
        // Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx");
        myController.FileManager.Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        FileInfo[] fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format
        ' Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx")
        myController.FileManager.Send("file2.bcx")
        ' Print the current files on the filesystem to verify files have been sent.
        Dim fileInfo As FileInfo() = myController.FileManager.ListFiles
        Dim file As FileInfo
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx")
        ' Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
        ' Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize
        ' Print the free space again. Note that the file is not freed from memory until
        ' you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Send(System.String,System.Int32,System.Boolean,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Sends a file to the controller
            </summary>
            <param name="fileName">The file to send</param>
            <param name="userAttributes">Any user attributes</param>
            <param name="hidden">Whether to mark the file as hidden</param>
            <param name="progressChangedEventHandler">The delegate that gets called to provide progress for sending the file</param>
            <returns>
            	The <see cref="T:Aerotech.Ensemble.FileSystem.FileInfo"></see> object for the <paramref name="fileName"></paramref> file on the
            	controller.
            </returns>
            <remarks>
            	<para>
            		Depending on the file size, this operation
            		may take some time to complete. To obtain information on the file transfer progress, use <paramref name="progressChangedEventHandler"></paramref>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Send(System.String,System.Int32)">
            <summary>
            Sends a file to the controller
            </summary>
            <param name="fileName">The file to send</param>
            <param name="userAttributes">Any user attributes</param>
            <returns>
            	The <see cref="T:Aerotech.Ensemble.FileSystem.FileInfo"></see> object for the <paramref name="fileName"></paramref> file on the
            	controller.
            </returns>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Send(System.String,System.Int32,System.Boolean)">
            <summary>
            Sends a file to the controller
            </summary>
            <param name="fileName">The file to send</param>
            <param name="userAttributes">Any user attributes</param>
            <param name="hidden">Whether to mark the file as hidden</param>
            <returns>
            	The <see cref="T:Aerotech.Ensemble.FileSystem.FileInfo"></see> object for the <paramref name="fileName"></paramref> file on the
            	controller.
            </returns>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Delete(System.String)">
            <summary>
            Deletes the file
            </summary>
            <param name="name">The name of file to delete</param>
            <remarks>
            	<note>
            		When deleting a file on the Controller, the file is not deleted, but
            		marked as deleted.  Due to this, after you delete a file, the free
            		space on the file system will not increase.  To release the space from
            		deleted files, call <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Optimize"></see>.
            	</note>
            </remarks>
            <include file="examples.xml" path="/*/FileManager/Example[@name=&quot;FileSystem&quot;]/*"></include>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Delete(Aerotech.Ensemble.FileSystem.FileInfo)">
            <summary>
            Deletes the file
            </summary>
            <param name="file">The file to delete</param>
            <remarks>
            	<note>
            		When deleting a file on the Controller, the file is not deleted, but
            		marked as deleted.  Due to this, after you delete a file, the free
            		space on the file system will not increase.  To release the space from
            		deleted files, call <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Optimize"></see>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Retrieve(System.String,System.String)">
            <summary>
            Retrieves the file from the controller
            </summary>
            <param name="name">The name of file to retrieve</param>
            <param name="toFolder">The folder to which to write the file</param>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Retrieve(Aerotech.Ensemble.FileSystem.FileInfo,System.String)">
            <summary>
            Retrieves a file from the controller
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="toFolder">The folder to which to write the file</param>
            <include file="examples.xml" path="/*/FileManager/Example[@name=&quot;RetrieveFiles&quot;]/*"></include>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Retrieve(System.String,System.String,Aerotech.Ensemble.FileSystem.FileRetreiveMode)">
            <summary>
            Retrieves the file from the controller
            </summary>
            <param name="name">The name of file to retrieve</param>
            <param name="toFolder">The folder to which to write the file</param>
            <param name="mode">The mode to use</param>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Retrieve(Aerotech.Ensemble.FileSystem.FileInfo,System.String,Aerotech.Ensemble.FileSystem.FileRetreiveMode)">
            <summary>
            retrieves the file from the controller
            </summary>
            <param name="file">The name of file to retrieve</param>
            <param name="toFolder">The folder to which to write the file</param>
            <param name="mode">The mode to use</param>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Retrieve(System.String,System.String,Aerotech.Ensemble.FileSystem.FileRetreiveMode,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Retrieves the file from the controller
            </summary>
            <param name="name">The name of file to retrieve</param>
            <param name="toFolder">The folder to which to write the file</param>
            <param name="mode">The mode to use</param>
            <param name="progressChangedEventHandler">The delegate to call to provide progress on file transfer</param>
            <remarks>
            	<para>
            		Depending on the file size, this operation
            		may take some time to complete. To obtain information on the progress, use <paramref name="progressChangedEventHandler"></paramref>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.FileSystem.FileManager.Retrieve(Aerotech.Ensemble.FileSystem.FileInfo,System.String,Aerotech.Ensemble.FileSystem.FileRetreiveMode,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Retrieves the file from the controller
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="toFolder">The folder to which to write the file</param>
            <param name="mode">The mode to use</param>
            <param name="progressChangedEventHandler">The delegate to call to provide progress on file transfer</param>
            <remarks>
            	<para>
            		Depending on the file size, this operation
            		may take some time to complete. To obtain information on the progress, use <paramref name="progressChangedEventHandler"></paramref>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileManager.Item(System.String)">
            <summary>
            Provides access to file information by file name
            </summary>
            <param name="name">The name of the file whose information to retrieve</param>
            <returns>The file information</returns>
            <remarks>
            	<para>
            		This can be used when specific information for a file is needed and the file name is known.  This is faster than retrieving
            		information about all the files using <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.ListFiles"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileManager.FreeSpace">
            <summary>
            Specifies how much free space is left on the file system
            </summary>
            <remarks>
            	<para>
            		In bytes.
            	</para>
            	<note>
            		When deleting a file on the Controller, the file is not deleted, but
            		marked as deleted.  Due to this, after you delete a file, the free
            		space on the file system will not increase.  To release the space from
            		deleted files, call <see cref="M:Aerotech.Ensemble.FileSystem.FileManager.Optimize"></see>.
            	</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.FileSystem</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController-&gt;FileManager-&gt;Format();
        // Send two files down to the filesystem.
        myController-&gt;FileManager-&gt;Send("file1.bcx");
        myController-&gt;FileManager-&gt;Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        array&lt;FileInfo^&gt;^ fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController-&gt;FileManager-&gt;Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Print the current space free on the filesystem.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController-&gt;FileManager-&gt;Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format();
        // Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx");
        myController.FileManager.Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        FileInfo[] fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format
        ' Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx")
        myController.FileManager.Send("file2.bcx")
        ' Print the current files on the filesystem to verify files have been sent.
        Dim fileInfo As FileInfo() = myController.FileManager.ListFiles
        Dim file As FileInfo
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx")
        ' Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
        ' Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize
        ' Print the free space again. Note that the file is not freed from memory until
        ' you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileManager.AxisNumber">
            <summary>The axis on which the file system is being accessed</summary>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileManager.Objects">
            <summary>
            Retrieves information about files from the controller
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Aerotech.Ensemble.FileSystem.FileInfo">
            <summary>
            Represents a file on the controller's file system
            </summary>
            <remarks>
            	<para>
            		This class provides information about a file on the controller's file system.
            		To do any operations on the file, use the <see cref="T:Aerotech.Ensemble.FileSystem.FileManager"></see> class.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileInfo.CreationTime">
            <summary>
            When the file was created
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileInfo.Size">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileInfo.SystemAttributes">
            <summary>
            System attributes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileInfo.UserAttributes">
            <summary>
            Any user attributes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.FileSystem.FileInfo.Name">
            <summary>
            File name
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.FileSystem</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController-&gt;FileManager-&gt;Format();
        // Send two files down to the filesystem.
        myController-&gt;FileManager-&gt;Send("file1.bcx");
        myController-&gt;FileManager-&gt;Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        array&lt;FileInfo^&gt;^ fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController-&gt;FileManager-&gt;Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController-&gt;FileManager-&gt;ListFiles();
        for each (FileInfo^ file in fileInfo)
        {
            Console::WriteLine("File {0} exists on controller", file-&gt;Name);
        }
        // Print the current space free on the filesystem.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController-&gt;FileManager-&gt;Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console::WriteLine("Current Free Space: {0}", myController-&gt;FileManager-&gt;FreeSpace);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format();
        // Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx");
        myController.FileManager.Send("file2.bcx");
        // Print the current files on the filesystem to verify files have been sent.
        FileInfo[] fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx");
        // Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles();
        foreach (FileInfo file in fileInfo)
        {
            Console.WriteLine("File {0} exists on controller", file.Name);
        }
        // Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
        // Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize();
        // Print the free space again. Note that the file is not freed from memory until
        // you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Format the current filesystem to delete any files currently on it.
        myController.FileManager.Format
        ' Send two files down to the filesystem.
        myController.FileManager.Send("file1.bcx")
        myController.FileManager.Send("file2.bcx")
        ' Print the current files on the filesystem to verify files have been sent.
        Dim fileInfo As FileInfo() = myController.FileManager.ListFiles
        Dim file As FileInfo
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Delete the 'file1.bcx' file from the file system.
        myController.FileManager.Delete("file1.bcx")
        ' Print the current files again to verify 'file1.bcx' has been deleted.
        fileInfo = myController.FileManager.ListFiles
        For Each file In fileInfo
            Console.WriteLine("File {0} exists on controller", file.Name)
        Next
        ' Print the current space free on the filesystem.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
        ' Optimize the file system to actually delete 'linear.bcx' from memory.
        myController.FileManager.Optimize
        ' Print the free space again. Note that the file is not freed from memory until
        ' you call the Optimize method, so you should see more free space here.
        Console.WriteLine("Current Free Space: {0}", myController.FileManager.FreeSpace)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Global">
            <summary>
            Things that are globally used in the library
            </summary>
            <remarks>
            	<note>Things in here are used read-only</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Global.GetEnumNamesValues``1(System.Type)">
            <summary>
            Gets the names-&gt;values of an enum
            </summary>
            <typeparam name="TRet">The return type (usually int)</typeparam>
            <param name="enum">The enumeration type</param>
            <returns>Names-&gt;values</returns>
        </member>
        <member name="T:Aerotech.Ensemble.SoftwareEnvironment">
            <summary>
            Software environment settings for the library
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.SoftwareEnvironment.InstallDir">
            <summary>
            The installation directory of the product
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.SoftwareEnvironment.BinDir">
            <summary>
            The directory containing the binaries of the product
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.SoftwareEnvironment.IsLoaderRunning">
            <summary>
            Whether the firmware loader is running
            </summary>
            <remarks>
            	<para>
            		If there is a possibility of the loader running at the same time as the current application,
            		this should be checked, since if it is running, the current application will not be able to
            		communicate with controllers.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.SoftwareEnvironment.NumberOfProcesses">
            <summary>
            Number of processes connected to the core dll
            </summary>
            <remarks>
            	<para>
            		This can be used to figure out how many other applications are currenty using the library
            		(in any instance).  This can be used to make sure the current application is the only one running.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.SoftwareEnvironment.ProductKey">
            <summary>
            The product key that was used during the latest installation of the software
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.SoftwareEnvironment.Version">
            <summary>
            The version of this .NET library
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Communication.NetworkSetup">
            <summary>
            Provides ability to setup the active controllers
            </summary>
            <remarks>
            	<para>
            		Active controllers are the controllers to which the library will be communicating with
            		after the call to <see cref="M:Aerotech.Ensemble.Controller.Connect"></see>.
            	</para>
            	<para>
            		To add controllers to the active list, call <see cref="M:Aerotech.Ensemble.Communication.NetworkSetup.Map(Aerotech.Ensemble.Communication.NetworkNode)"></see> or <see cref="M:Aerotech.Ensemble.Communication.NetworkSetup.Map(Aerotech.Ensemble.Communication.NetworkNodeAddress)"></see>; to remove them
            		call <see cref="M:Aerotech.Ensemble.Communication.NetworkSetup.Unmap(Aerotech.Ensemble.Communication.NetworkNodeAddress)"></see>.
            	</para>
            	<para>
            		The changes are commited automatically.
            		This behavior can be modified by chancing the <see cref="P:Aerotech.Ensemble.Communication.NetworkSetup.AutoCommit"></see> property.
            		The commit can be forced by calling the <see cref="M:Aerotech.Ensemble.Communication.NetworkSetup.Commit"></see>.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Communication.NetworkSetup.elements">
            <summary>
            The elements from the file
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Communication.NetworkSetup"></see>
            </summary>
            <remarks>
            	<para>
            		Loads the file for the current profile.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.GetProfilePath">
            <summary>
            Creates the path to the file for the profile
            </summary>
            <returns>The path to the file for the profile</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.LoadFile">
            <summary>
            Loads the file for the profile
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.Commit">
            <summary>
            Commits the current setup to the configuration file
            </summary>
            <remarks>
            	<para>
            		This method commits the changes to the setup;
            		the changes will take effect on the next <see cref="M:Aerotech.Ensemble.Controller.Connect"></see>.
            	</para>
            	<note>
            		This is done automatically if <see cref="P:Aerotech.Ensemble.Communication.NetworkSetup.AutoCommit"></see> is <c>true</c>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.Map(Aerotech.Ensemble.Communication.NetworkNodeAddress)">
            <summary>
            Maps a new controller to the list of active controllers
            </summary>
            <param name="nodeAddress">The address of controller to add</param>
            <remarks>
            	<para>
            		You can get <paramref name="nodeAddress"></paramref> from <see cref="M:Aerotech.Ensemble.Controller.Identify"></see>
            	</para>
            	<para>
            		The names of the nodes must be unique.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.Map(Aerotech.Ensemble.Communication.NetworkNode)">
            <summary>
            Maps a new controller to the list of active controllers
            </summary>
            <param name="node">The controller to add</param>
            <remarks>
            	<para>
            		The names of the nodes must be unique.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.Unmap(Aerotech.Ensemble.Communication.NetworkNodeAddress)">
            <summary>
            Unmaps a controller
            </summary>
            <param name="address">Address of the controller to unmap</param>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.IsMapped(Aerotech.Ensemble.Communication.NetworkNodeAddress)">
            <summary>
            Checks whether the given address is mapped
            </summary>
            <param name="address">The address to check for</param>
        </member>
        <member name="M:Aerotech.Ensemble.Communication.NetworkSetup.UnmapAll">
            <summary>
            Unmaps all mapped controllers
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkSetup.Objects">
            <summary>
            Retrieves the data loaded from the file
            </summary>
            <exclude></exclude>
        </member>
        <member name="P:Aerotech.Ensemble.Communication.NetworkSetup.AutoCommit">
            <summary>
            Whether to automatically commit the changes
            </summary>
            <remarks>
            	<para>
            		This specifies whether to do a commit automatically after changes to the
            		setup.  If this value is <c>false</c>, you have to call <see cref="M:Aerotech.Ensemble.Communication.NetworkSetup.Commit"></see>
            		to apply the changes.
            	</para>
            	<para>
            		The default is <c>true</c>.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.Parameter">
            <summary>
            Represents a generic parameter
            </summary>
            <remarks>
            	<para>
            		This class will be used when a generic parameter is returned.  See
            		the indexer of <see cref="T:Aerotech.Ensemble.Parameters.ParametersAllCollection"></see>.  Most of the time a parameter
            		of type <see cref="T:Aerotech.Ensemble.Parameters.TypedParameter`1"></see> will be returned.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.Parameter.getBounds">
            <summary>
            The method that does the work to get the bounds
            </summary>
            <returns>The bounds of the parameters</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.Parameter.setValue(System.Object)">
            <summary>
            [Internal] The method that does the work to set the value
            </summary>
            <param name="value">The value to set</param>
            <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.Parameter.getValue">
            <summary>
            [Internal] The method that does the work to get the value
            </summary>
            <returns>The value of the parameter</returns>
            <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.Parameter.WithinBounds(System.Object)">
            <summary>
            Tests whether a value is within the parameter's range of acceptable values
            </summary>
            <param name="value">The value to test</param>
            <returns>
            <list type="table">
            	<listheader>
            		<item>
            			<term>Value</term>
            			<description>Description</description>
            		</item>
            	</listheader>
            	<item>
            		<term>-1</term>
            		<description><paramref name="value"></paramref> is too small</description>
            	</item>
            	<item>
            		<term>0</term>
            		<description><paramref name="value"></paramref> is within bounds</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description><paramref name="value"></paramref> is too large</description>
            	</item>
            </list>
            </returns>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.Parameter.Name">
            <summary>
            The parameter name
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.Parameter.Bounds">
            <summary>
            Contains the bounds of this parameter
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.Parameter.Value">
            <summary>
            The parameter value
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController-&gt;Parameters-&gt;SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters^ baseParameters = myController-&gt;Parameters-&gt;RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console::WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value = 1000;
        // Send the changed copy of parameters back to the controller.
        myController-&gt;Parameters-&gt;SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate-&gt;Value = 1000;
        // Commit the changed parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile^ parameterFile = gcnew ParameterFile("controllerParametersBackup.prme") ;
        // Send the backup parameter file to the controller.
        myController-&gt;Parameters-&gt;SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters baseParameters = myController.Parameters.RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes[0].Motion.AbortDecelRate.Value = 1000.0;
        // Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes["X"].Motion.DefaultRampRate.Value = 1000.0;
        // Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile parameterFile = new ParameterFile("controllerParametersBackup.prme");
        // Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme")
        ' Retrieve all parameters from the controller.
        Dim baseParameters As BaseParameters = myController.Parameters.RetrieveFromController
        ' View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        ' Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value = 1000
        ' Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters)
        ' Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes.Item("X").Motion.DefaultRampRate.Value = 1000
        ' Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit
        ' If you want to reload the backup file to undo the changes made, proceed with the following:
        ' Open the backup parameter file we saved above.
        Dim parameterFile As New ParameterFile("controllerParametersBackup.prme")
        ' Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile)
        ' Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.Parameter.Default">
            <summary>
            The parameter default value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.Parameter.ValueType">
            <summary>
            The type of the parameter
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.Parameter.Context">
            <summary>The context of the parameter</summary>
            <remarks>
                <para>This property is used to determine the context of the parameter (whether it is a system, axis, or task parameter)</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.Parameter.ContextKey">
            <summary>The Task ID or axis index of the parameter</summary>
            <remarks>
            	<para>To determine whether this value represents a Task ID or an axis index, read the value of the Context property</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.TypedParameter`1">
            <summary>
            Represents a typed parameter
            </summary>
            <typeparam name="TType">The type of parameter</typeparam>
            <remarks>
            	<para>
            		This class will be used when a parameter of a specific type is returned.  See
            		<see cref="T:Aerotech.Ensemble.Parameters.BaseParameters"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.TypedParameter`1.getBounds">
            <summary>
            The method that does the work to get the bounds
            </summary>
            <returns>The bounds of the parameters</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TypedParameter`1.Value">
            <summary>
            The parameter value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TypedParameter`1.Bounds">
            <summary>
            Specifies the parameter bounds
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TypedParameter`1.Default">
            <summary>
            The parameter's default value
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs">
            <summary>
            Provides data for parameter retrieval errors
            </summary>
            <remarks>
            	<para>
            		This class provides data for the error handling in the 
            		<see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.RetrieveFromController(System.ComponentModel.ProgressChangedEventHandler,System.EventHandler{Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs})"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs.#ctor(Aerotech.Ensemble.Controller,System.Exception,System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs"></see>
            </summary>
            <param name="controller">The controller associated with the error</param>
            <param name="exception">The exception that occured</param>
            <param name="parameter">The parameter during whose retrieval the error occured</param>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs.Continue">
            <summary>
            Whether to continue the parameter retrieval
            </summary>
            <remarks>
            	<para>
            		The default is <c>false</c>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs.Parameter">
            <summary>
            The name of parameter whose retrieval failed
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ControllerParameters">
            <summary>
            Root parameter category that handles parameters on a controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Access the controller parameter values.
		ControllerParameters^ controllerParameters = myController-&gt;Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Parameter CountsPerRev is: {0}", controllerParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        Console::WriteLine("Parameter UserDouble1 is: {0}", controllerParameters-&gt;System-&gt;User-&gt;UserDouble1-&gt;Value);
        Console::WriteLine("Parameter PrintBufferSize is: {0}", controllerParameters-&gt;System-&gt;MemoryAllocation-&gt;PrintBufferSize-&gt;Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Access the controller parameter values.
        ControllerParameters controllerParameters = myController.Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Parameter PrintBufferSize is: {0}", controllerParameters.System.MemoryAllocation.PrintBufferSize.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Access the controller parameter values.
        Dim controllerParameters As ControllerParameters = myController.Parameters
        ' Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Parameter PrintBufferSize is: {0}", controllerParameters.System.MemoryAllocation.PrintBufferSize.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.BaseParameters">
            <summary>
            Represents the root category of parameters
            </summary>
            <remarks>
            	<para>
            		This is a generic class for parameters.  The two specialized classes that inherit from it
            		are <see cref="T:Aerotech.Ensemble.Parameters.ControllerParameters"></see> and <see cref="T:Aerotech.Ensemble.Parameters.ParameterFile"></see>.  The first one
            		can be accessed from <see cref="P:Aerotech.Ensemble.Controller.Parameters"></see>, while the latter can be
            		instantiated.
            	</para>
            	<para>
            		The default parameters can be retrieved from <see cref="P:Aerotech.Ensemble.Parameters.BaseParameters.Defaults"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Get all the default parameter values.
        BaseParameters^ defaultParameters = BaseParameters::Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        Console::WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters-&gt;System-&gt;User-&gt;UserDouble1-&gt;Value);
        Console::WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters-&gt;System-&gt;MemoryAllocation-&gt;PrintBufferSize-&gt;Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Get all the default parameter values.
        BaseParameters defaultParameters = BaseParameters.Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters.System.MemoryAllocation.PrintBufferSize.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Get all the default parameter values.
        Dim defaultParameters As BaseParameters = BaseParameters.Defaults
        ' Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters.System.MemoryAllocation.PrintBufferSize.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.BaseParameters.SaveToFile(System.String)">
            <summary>
            Saves the parameters to a file
            </summary>
            <param name="fileName">The file to save to</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.BaseParameters.SaveToFile(System.String,System.Xml.XmlNode)">
            <summary>
            Saves the parameters to a file
            </summary>
            <param name="fileName">The file to save to</param>
            <param name="data">The additinal user-defined data to save into the parameter file
            (see <see cref="P:Aerotech.Ensemble.Parameters.ParameterFile.UserDataSections"></see> for a way to retrieve this data)</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.BaseParameters.GetCategories(Aerotech.Ensemble.Parameters.BaseParameters)">
            <summary>Gets all the <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see> from a <see cref="T:Aerotech.Ensemble.Parameters.BaseParameters"></see></summary>
            <param name="parameters">Where to get the categories</param>
            <returns>The categories</returns>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.BaseParameters.OptimizedRetrieve">
            <exclude></exclude>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.BaseParameters.OrganizeParameterData(System.Collections.IEnumerable)">
            <summary>
            Organizes the parameter data
            </summary>
            <param name="parameterData">The data to organize</param>
            <returns>
            	<para>
            		Organized by [axis, task] -&gt; [parameter name -&gt; Parameter]
            	</para>
            	<para><see cref="F:Aerotech.Ensemble.AxisMask.None"></see> used for controller, <see cref="F:Aerotech.Ensemble.Global.UnknownTask"></see> used for axis</para>
            </returns>
            <exception cref="T:Aerotech.Ensemble.Exceptions.ParameterException">
            	<para>
            		If the axis indexes do not match
            	</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            	<para>
            		If the <paramref name="parameterData"></paramref> is not <see cref="T:Aerotech.Ensemble.Parameters.Parameter"></see> or <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see>
            		derived
            	</para>
            </exception>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.BaseParameters.Defaults">
            <summary>
            Provides the defaults of the parameters
            </summary>
            <remarks>
            	<para>
            		These are version defaults, not user-specified defaults.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Get all the default parameter values.
        BaseParameters^ defaultParameters = BaseParameters::Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        Console::WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters-&gt;System-&gt;User-&gt;UserDouble1-&gt;Value);
        Console::WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters-&gt;System-&gt;MemoryAllocation-&gt;PrintBufferSize-&gt;Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Get all the default parameter values.
        BaseParameters defaultParameters = BaseParameters.Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters.System.MemoryAllocation.PrintBufferSize.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Get all the default parameter values.
        Dim defaultParameters As BaseParameters = BaseParameters.Defaults
        ' Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters.System.MemoryAllocation.PrintBufferSize.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.BaseParameters.Tasks">
            <summary>The task parameters</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.BaseParameters.System">
            <summary>The parameters that are per controller</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.BaseParameters.Axes">
            <summary>
            Provides access to the axes parameters
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Get all the default parameter values.
        BaseParameters^ defaultParameters = BaseParameters::Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        Console::WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters-&gt;System-&gt;User-&gt;UserDouble1-&gt;Value);
        Console::WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters-&gt;System-&gt;MemoryAllocation-&gt;PrintBufferSize-&gt;Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Get all the default parameter values.
        BaseParameters defaultParameters = BaseParameters.Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters.System.MemoryAllocation.PrintBufferSize.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Get all the default parameter values.
        Dim defaultParameters As BaseParameters = BaseParameters.Defaults
        ' Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Default for Parameter PrintBufferSize is: {0}", defaultParameters.System.MemoryAllocation.PrintBufferSize.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SaveToFile(System.String)">
            <summary>
            Retrieves the current parameters from the controller, and then saves the parameters to the specifed file
            </summary>
            <param name="fileName">The file name to save the parameters to</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController-&gt;Parameters-&gt;SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters^ baseParameters = myController-&gt;Parameters-&gt;RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console::WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value = 1000;
        // Send the changed copy of parameters back to the controller.
        myController-&gt;Parameters-&gt;SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate-&gt;Value = 1000;
        // Commit the changed parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile^ parameterFile = gcnew ParameterFile("controllerParametersBackup.prme") ;
        // Send the backup parameter file to the controller.
        myController-&gt;Parameters-&gt;SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters baseParameters = myController.Parameters.RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes[0].Motion.AbortDecelRate.Value = 1000.0;
        // Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes["X"].Motion.DefaultRampRate.Value = 1000.0;
        // Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile parameterFile = new ParameterFile("controllerParametersBackup.prme");
        // Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme")
        ' Retrieve all parameters from the controller.
        Dim baseParameters As BaseParameters = myController.Parameters.RetrieveFromController
        ' View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        ' Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value = 1000
        ' Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters)
        ' Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes.Item("X").Motion.DefaultRampRate.Value = 1000
        ' Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit
        ' If you want to reload the backup file to undo the changes made, proceed with the following:
        ' Open the backup parameter file we saved above.
        Dim parameterFile As New ParameterFile("controllerParametersBackup.prme")
        ' Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile)
        ' Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.RetrieveFromController">
            <summary>
            Retrieves all parameters and creates a local copy
            </summary>
            <returns>A new storage of parameters</returns>
            <remarks>
            	<para>
            		If you call this method, you will have an object on which you can get/set parameters without any communication
            		to the controller.  To send the modified local copy back to the controller, see <see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(Aerotech.Ensemble.Parameters.ParameterCategory)"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController-&gt;Parameters-&gt;SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters^ baseParameters = myController-&gt;Parameters-&gt;RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console::WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value = 1000;
        // Send the changed copy of parameters back to the controller.
        myController-&gt;Parameters-&gt;SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate-&gt;Value = 1000;
        // Commit the changed parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile^ parameterFile = gcnew ParameterFile("controllerParametersBackup.prme") ;
        // Send the backup parameter file to the controller.
        myController-&gt;Parameters-&gt;SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters baseParameters = myController.Parameters.RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes[0].Motion.AbortDecelRate.Value = 1000.0;
        // Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes["X"].Motion.DefaultRampRate.Value = 1000.0;
        // Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile parameterFile = new ParameterFile("controllerParametersBackup.prme");
        // Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme")
        ' Retrieve all parameters from the controller.
        Dim baseParameters As BaseParameters = myController.Parameters.RetrieveFromController
        ' View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        ' Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value = 1000
        ' Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters)
        ' Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes.Item("X").Motion.DefaultRampRate.Value = 1000
        ' Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit
        ' If you want to reload the backup file to undo the changes made, proceed with the following:
        ' Open the backup parameter file we saved above.
        Dim parameterFile As New ParameterFile("controllerParametersBackup.prme")
        ' Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile)
        ' Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.RetrieveFromController(System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Retrieves all parameters and creates a local storage
            </summary>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <returns>A new storage of parameters</returns>
            <remarks>
            	<para>
            		If you call this method, you will have an object on which you can get/set parameters without any communication
            		to the controller.  To send the modified local copy back to the controller, see <see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(Aerotech.Ensemble.Parameters.ParameterCategory)"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.RetrieveFromController(System.ComponentModel.ProgressChangedEventHandler,System.EventHandler{Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs})">
            <summary>
            Retrieves all parameters and creates a local storage
            </summary>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <param name="errorHandler">The error handler to call in case there are any errors</param>
            <returns>A new storage of parameters</returns>
            <remarks>
            	<para>
            		If you call this method, you will have an object on which you can get/set parameters without any communication
            		to the controller.  To send the modified local copy back to the controller, see <see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(Aerotech.Ensemble.Parameters.ParameterCategory)"></see>.
            	</para>
            	<para>
            		If you provide a <paramref name="errorHandler"></paramref>, then if there is an error during retrieval of parameters, the
            		<paramref name="errorHandler"></paramref> will be called, and the retrieval will stop, not retrieving the rest of the
            		parameters.  If you want to continue the retrieval of the parameters, set <see cref="P:Aerotech.Ensemble.Parameters.ParameterRetrievalErrorEventArgs.Continue"></see>
            		to <c>true</c> in the <paramref name="errorHandler"></paramref>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(System.String)">
            <summary>
            Sends parameters from a parameter file
            </summary>
            <param name="parameterFilePath">The path to the parameter file to send</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(System.String,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Sends parameters from a parameter file
            </summary>
            <param name="parameterFilePath">The path to the parameter file to send</param>
            <param name="progressChangedEventhandler">Delegate called to provide progress information</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(Aerotech.Ensemble.Parameters.BaseParameters)">
            <summary>Sends parameters from a parameter source</summary>
            <param name="parameters">The paremters to send</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(Aerotech.Ensemble.Parameters.BaseParameters,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>Sends parameters from a parameter source</summary>
            <param name="parameters">The paremters to send</param>
            <param name="progressChangedEventHandler">Delegate called to provide progress information</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(Aerotech.Ensemble.Parameters.ParameterCategory)">
            <summary>
            Sends parameters from a parameter category
            </summary>
            <param name="parameterCategory">The parameter category to send to the controller</param>
            <remarks>
				<para>
					If <paramref name="categories"></paramref> contains an axis specific category, the parameters will be
					copied based on the axis number (0 to 0, 1 to 1, etc).
				</para>
			</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController-&gt;Parameters-&gt;SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters^ baseParameters = myController-&gt;Parameters-&gt;RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console::WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value = 1000;
        // Send the changed copy of parameters back to the controller.
        myController-&gt;Parameters-&gt;SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate-&gt;Value = 1000;
        // Commit the changed parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile^ parameterFile = gcnew ParameterFile("controllerParametersBackup.prme") ;
        // Send the backup parameter file to the controller.
        myController-&gt;Parameters-&gt;SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters baseParameters = myController.Parameters.RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes[0].Motion.AbortDecelRate.Value = 1000.0;
        // Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes["X"].Motion.DefaultRampRate.Value = 1000.0;
        // Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile parameterFile = new ParameterFile("controllerParametersBackup.prme");
        // Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme")
        ' Retrieve all parameters from the controller.
        Dim baseParameters As BaseParameters = myController.Parameters.RetrieveFromController
        ' View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        ' Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value = 1000
        ' Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters)
        ' Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes.Item("X").Motion.DefaultRampRate.Value = 1000
        ' Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit
        ' If you want to reload the backup file to undo the changes made, proceed with the following:
        ' Open the backup parameter file we saved above.
        Dim parameterFile As New ParameterFile("controllerParametersBackup.prme")
        ' Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile)
        ' Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController(Aerotech.Ensemble.Parameters.ParameterCategory,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Sends parameters from a parameter category
            </summary>
            <param name="parameterCategory">The parameter category to send to the controller</param>
            <param name="progressChangedEventHandler">Delegate called to provide progress information</param>
            <remarks>
				<para>
					If <paramref name="categories"></paramref> contains an axis specific category, the parameters will be
					copied based on the axis number (0 to 0, 1 to 1, etc).
				</para>
			</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sends parameters from parameter categories
            </summary>
            <param name="parameterCategories">
            	<para>
            		A collection of <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see> to
            		send to the controller.
            	</para>
            </param>
            <typeparam name="TType">
            	The subtype of the category to send, most of the time this can be omitted
            </typeparam>
            <remarks>
				<para>
					If <paramref name="categories"></paramref> contains an axis specific category, the parameters will be
					copied based on the axis number (0 to 0, 1 to 1, etc).
				</para>
			</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.SendToController``1(System.Collections.Generic.IEnumerable{``0},System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Sends parameters from parameter categories
            </summary>
            <param name="parameterCategories">
            	<para>
            		A collection of <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see> to
            		send to the controller.
            	</para>
            </param>
            <param name="progressChangedEventHandler">Delegate called to provide progress information</param>
            <typeparam name="TType">
            	The subtype of the category to send, most of the time this can be omitted
            </typeparam>
            <remarks>
				<para>
					If <paramref name="categories"></paramref> contains an axis specific category, the parameters will be
					copied based on the axis number (0 to 0, 1 to 1, etc).
				</para>
			</remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ControllerParameters.Commit">
            <summary>
            Commits parameters on the controller
            </summary>
            <remarks>
            	<para>
            		Commits the parameter changes to the parameters on the controller to permanent storage.
            		After this method is called, you can reset the controller and the parameters will still be commited.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController-&gt;Parameters-&gt;SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters^ baseParameters = myController-&gt;Parameters-&gt;RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console::WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value = 1000;
        // Send the changed copy of parameters back to the controller.
        myController-&gt;Parameters-&gt;SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate-&gt;Value = 1000;
        // Commit the changed parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile^ parameterFile = gcnew ParameterFile("controllerParametersBackup.prme") ;
        // Send the backup parameter file to the controller.
        myController-&gt;Parameters-&gt;SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters baseParameters = myController.Parameters.RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes[0].Motion.AbortDecelRate.Value = 1000.0;
        // Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes["X"].Motion.DefaultRampRate.Value = 1000.0;
        // Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile parameterFile = new ParameterFile("controllerParametersBackup.prme");
        // Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme")
        ' Retrieve all parameters from the controller.
        Dim baseParameters As BaseParameters = myController.Parameters.RetrieveFromController
        ' View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        ' Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value = 1000
        ' Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters)
        ' Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes.Item("X").Motion.DefaultRampRate.Value = 1000
        ' Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit
        ' If you want to reload the backup file to undo the changes made, proceed with the following:
        ' Open the backup parameter file we saved above.
        Dim parameterFile As New ParameterFile("controllerParametersBackup.prme")
        ' Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile)
        ' Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ControllerParameters.Axes">
            <summary>
            Provides access to the axes parameters
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Access the controller parameter values.
		ControllerParameters^ controllerParameters = myController-&gt;Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Parameter CountsPerRev is: {0}", controllerParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        Console::WriteLine("Parameter UserDouble1 is: {0}", controllerParameters-&gt;System-&gt;User-&gt;UserDouble1-&gt;Value);
        Console::WriteLine("Parameter PrintBufferSize is: {0}", controllerParameters-&gt;System-&gt;MemoryAllocation-&gt;PrintBufferSize-&gt;Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Access the controller parameter values.
        ControllerParameters controllerParameters = myController.Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Parameter PrintBufferSize is: {0}", controllerParameters.System.MemoryAllocation.PrintBufferSize.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Access the controller parameter values.
        Dim controllerParameters As ControllerParameters = myController.Parameters
        ' Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Parameter PrintBufferSize is: {0}", controllerParameters.System.MemoryAllocation.PrintBufferSize.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory">
            <summary>
            The root category of parameters for a given controller axis
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory.AssignedNumber">
            <summary>
            The assigned axis number
            </summary>
            <remarks>
            	<para>
            		This allows configuration of the axis number.  For changes to take effect, call 
            		<see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.Commit"></see> and then <see cref="M:Aerotech.Ensemble.Controller.EnumerateAxes"></see>.
            	</para>
            	<note>
            		This will not necessarily be the same as axis number because if there are two axes
            		with the same assigned number, their numbers get reenumerated automatically.
            	</note>
            </remarks>
        </member>
        <member name="E:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory.AssignedNumberChanged">
            <summary>
            Raised when <see cref="P:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory.AssignedNumber"></see> changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategoryCollection">
            <summary>
            Collection of <see cref="T:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory"></see>
            </summary>
            <remarks>
            	<para>
            		This class provides access to <see cref="T:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory"></see> and to
            		some additional options for the axes of a controller.
            	</para>
            	<para>
            		You can get a handle to this through <see cref="P:Aerotech.Ensemble.Parameters.ControllerParameters.Axes"></see>
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategoryCollection.RequireUniqueNumbers">
            <summary>
            Whether it is required for axes to have unique axis numbers
            </summary>
            <remarks>
            	<note>This is a parameter, for changes to be commited, call <see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.Commit"></see></note>
            	<para>
            		The axis numbers can be changed by <see cref="P:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategory.AssignedNumber"></see>, the currently used
            		number can be retrieved from <see cref="P:Aerotech.Ensemble.Parameters.AxisParameterCategory.AxisNumber"></see>.
            	</para>
            	<para>
            		If the axes do not have unique axis numbers, this fact can be determined by examining <see cref="P:Aerotech.Ensemble.Information.ControllerInformation.AxisMismatch"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategoryCollection.RequiredAxes">
            <summary>
            Which axes have to exist for the proper operation of the system
            </summary>
            <remarks>
            	<note>This is a parameter.  For changes to be commited, call <see cref="M:Aerotech.Ensemble.Parameters.ControllerParameters.Commit"></see>.</note>
            	<para>
            		This option can be used to make sure that axes required for operation of a system are actually present.  An axis
            		can stop existing if it is either disconnected or malfunctions.
            	</para>
            	<para>
            		If the axes do not have unique axis numbers, this fact can be determined by examining <see cref="P:Aerotech.Ensemble.Information.ControllerInformation.AxisMismatch"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ControllerAxisParameterCategoryCollection.Item(System.String)">
            <summary>
             Returns the axis parameters for the given axis name
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.FileParameterCreator.defaultFileParametersCreator">
            <summary>
            DO NOT USE, use <see cref="P:Aerotech.Ensemble.Parameters.FileParameterCreator.DefaultFileParametersCreator"></see> instead
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.NamedXmlSections">
            <summary>Provides name based access to <see cref="P:Aerotech.Ensemble.Parameters.ParameterFile.UserDataSections"></see>.</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.NamedXmlSections.Get(System.String)">
            <summary>Gets a section by name.</summary>
            <param name="sectionName">The name of the section to get.</param>
            <returns>The section with <paramref name="sectionName"></paramref> name or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"></paramref> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.NamedXmlSections.GetOrCreate(System.String)">
            <summary>Gets a section by name or creates one if one does not exist.</summary>
            <param name="sectionName">The name of the section to get or create.</param>
            <returns>The section with <paramref name="sectionName"></paramref> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"></paramref> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.NamedXmlSections.GetOrCreate(System.String,System.String)">
            <summary>Gets a section by name or creates one if one does not exist.</summary>
            <param name="sectionName">The name of the section to get or create.</param>
            <param name="sectionNamespace">The namespace to use if the node needs to be create.</param>
            <returns>The section with <paramref name="sectionName"></paramref> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"></paramref> or <paramref name="sectionNamespace"></paramref> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.NamedXmlSections.Create(System.String)">
            <summary>Creates a section.</summary>
            <param name="sectionName">The name of the section to create.</param>
            <returns>The section with <paramref name="sectionName"></paramref> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"></paramref> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="sectionName"></paramref> already exists.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.NamedXmlSections.Create(System.String,System.String)">
            <summary>Creates a section.</summary>
            <param name="sectionName">The name of the section to create.</param>
            <param name="sectionNamespace">The namespace to use to create the node.</param>
            <returns>The section with <paramref name="sectionName"></paramref> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"></paramref> or <paramref name="sectionNamespace"></paramref> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="sectionName"></paramref> already exists.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.NamedXmlSections.Remove(System.String)">
            <summary>Removes a section by name.</summary>
            <param name="sectionName">The name of the section to remove.</param>
            <returns>Whether the section was removed or not.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"></paramref> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.NamedXmlSections.Clear">
            <summary>Removes all the sections.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.NamedXmlSections.OwnerDocument">
            <summary>Returns the document to which all the inner sections belong.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.NamedXmlSections.ParameterNamespace">
            <summary>The namespace of the parameter file, can be used as the namespace when creating nodes.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.NamedXmlSections.SectionNames">
            <summary>All of the section names.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.NamedXmlSections.Sections">
            <summary>All of the sections.</summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.NamedXmlSections.Item(System.String)">
            <summary>Gets or sets sections by name.</summary>
            <param name="sectionName">The name of the section to get or set.</param>
            <returns>The section with <paramref name="sectionName"></paramref> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"></paramref> or <paramref name="value"></paramref> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="sectionName"></paramref> name does not match data in <paramref name="value"></paramref>.</exception>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.NamedXmlSections.Count">
            <summary>The number of sections.</summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParameterFile">
            <summary>
            Root parameter category that handles parameters from a file
            </summary>
            <remarks>
            	<para>
            		This class can be instantiated by itself to load from a parameter file.
            		To load defaults, see <see cref="P:Aerotech.Ensemble.Parameters.BaseParameters.Defaults"></see>.
            	</para>
            	<para>
            		To load parameters from a source to this class, see <see cref="M:Aerotech.Ensemble.Parameters.ParameterFile.Import(Aerotech.Ensemble.Parameters.ParameterCategory)"></see> or
            		you can instantiate this class by giving the source of initial data; see
            		<see cref="M:Aerotech.Ensemble.Parameters.ParameterFile.#ctor(System.String,Aerotech.Ensemble.Parameters.BaseParameters)"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.#ctor(System.String)">
            <summary>
            Loads parameters from a file
            </summary>
            <param name="path">The parameter file path</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController-&gt;Parameters-&gt;SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters^ baseParameters = myController-&gt;Parameters-&gt;RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console::WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters-&gt;Axes["Z"]-&gt;Motor-&gt;CountsPerRev-&gt;Value);
        Console::WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters-&gt;Axes[AxisMask::A2]-&gt;Units-&gt;CountsPerUnit-&gt;Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters-&gt;Axes[AxisMask::None]-&gt;Motion-&gt;AbortDecelRate-&gt;Value = 1000;
        // Send the changed copy of parameters back to the controller.
        myController-&gt;Parameters-&gt;SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate-&gt;Value = 1000;
        // Commit the changed parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile^ parameterFile = gcnew ParameterFile("controllerParametersBackup.prme") ;
        // Send the backup parameter file to the controller.
        myController-&gt;Parameters-&gt;SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController-&gt;Parameters-&gt;Commit();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme");
        // Retrieve all parameters from the controller.
        BaseParameters baseParameters = myController.Parameters.RetrieveFromController();
        // View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes[AxisMask.A2].Units.CountsPerUnit.Value);
        // Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes[0].Motion.AbortDecelRate.Value = 1000.0;
        // Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters);
        // Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes["X"].Motion.DefaultRampRate.Value = 1000.0;
        // Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit();
        // If you want to reload the backup file to undo the changes made, proceed with the following:
        // Open the backup parameter file we saved above.
        ParameterFile parameterFile = new ParameterFile("controllerParametersBackup.prme");
        // Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile);
        // Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prme")
        ' Retrieve all parameters from the controller.
        Dim baseParameters As BaseParameters = myController.Parameters.RetrieveFromController
        ' View some selected parameters we just retrieved.
        Console.WriteLine("Retrieved value for parameter AbortDecelRate is: {0}", baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerRev is: {0}", baseParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Retrieved value for parameter CountsPerUnit is: {0}", baseParameters.Axes.Item(AxisMask.A2).Units.CountsPerUnit.Value)
        ' Change the retrieved AbortDecelRate parameter to 1000.
        baseParameters.Axes.Item(0).Motion.AbortDecelRate.Value = 1000
        ' Send the changed copy of parameters back to the controller.
        myController.Parameters.SendToController(baseParameters)
        ' Change the DefaultRampRate parameter on the controller.
        myController.Parameters.Axes.Item("X").Motion.DefaultRampRate.Value = 1000
        ' Commit the changed parameters to permanent memory on the controller.
        myController.Parameters.Commit
        ' If you want to reload the backup file to undo the changes made, proceed with the following:
        ' Open the backup parameter file we saved above.
        Dim parameterFile As New ParameterFile("controllerParametersBackup.prme")
        ' Send the backup parameter file to the controller.
        myController.Parameters.SendToController(parameterFile)
        ' Commit the backup parameters to permanent memory on the controller.
        myController.Parameters.Commit
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.#ctor(System.String,System.Boolean)">
            <summary>
            Loads parameters from a file
            </summary>
            <param name="path">The parameter file path</param>
            <param name="failIfNotFound">If <c>false</c> and file not present, will load defaults</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.#ctor(System.String,Aerotech.Ensemble.Parameters.BaseParameters)">
            <summary>
            Creates a new parameter file
            </summary>
            <param name="path">The parameter file path</param>
            <param name="parameters">The initial data for the parameter file</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorType-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CyclesPerRev-&gt;Value = 4;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CountsPerRev-&gt;Value = 4000;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackType-&gt;Value = 1;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackChannel-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentThreshold-&gt;Value = 1.15f;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MaxCurrentClamp-&gt;Value = 4.6f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKi-&gt;Value = 12000.0f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKp-&gt;Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prme", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile-&gt;FileInfo-&gt;Name);
        // Change some other parameters.
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;PositionErrorThreshold-&gt;Value = 0.001;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitHigh-&gt;Value = -10;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitLow-&gt;Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile-&gt;Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile-&gt;Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prme", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prme", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.Import(Aerotech.Ensemble.Parameters.ParameterCategory)">
            <summary>
            Imports parameter data into this file
            </summary>
            <param name="parameterCategory">The category from which to import the parameters</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorType-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CyclesPerRev-&gt;Value = 4;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CountsPerRev-&gt;Value = 4000;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackType-&gt;Value = 1;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackChannel-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentThreshold-&gt;Value = 1.15f;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MaxCurrentClamp-&gt;Value = 4.6f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKi-&gt;Value = 12000.0f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKp-&gt;Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prme", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile-&gt;FileInfo-&gt;Name);
        // Change some other parameters.
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;PositionErrorThreshold-&gt;Value = 0.001;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitHigh-&gt;Value = -10;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitLow-&gt;Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile-&gt;Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile-&gt;Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prme", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prme", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.Import``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Imports parameter data into this file
            </summary>
            <param name="parameterCategory">
            	<para>
            		A collection of <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see> to
            		import the data from.
            	</para>
            </param>
            <typeparam name="TType">
            	The subtype of the category to send, most of the time this can be omitted
            </typeparam>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.Import(Aerotech.Ensemble.Parameters.BaseParameters)">
            <summary>Imports parameter data into this file</summary>
            <param name="parameters">The parameters to import</param>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.Save(System.String)">
            <summary>
            Saves parameters to a file
            </summary>
            <param name="fileName">The file to save the parameters to</param>
            <remarks>
            	<para>
            		This method automatically stores the data node
            		in the <paramref name="fileName"></paramref>.  This method also updates the <see cref="T:System.IO.Path"></see> of
            		this parameter file.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterFile.Save">
            <summary>
            Saves this parameter file
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorType-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CyclesPerRev-&gt;Value = 4;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CountsPerRev-&gt;Value = 4000;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackType-&gt;Value = 1;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackChannel-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentThreshold-&gt;Value = 1.15f;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MaxCurrentClamp-&gt;Value = 4.6f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKi-&gt;Value = 12000.0f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKp-&gt;Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prme", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile-&gt;FileInfo-&gt;Name);
        // Change some other parameters.
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;PositionErrorThreshold-&gt;Value = 0.001;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitHigh-&gt;Value = -10;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitLow-&gt;Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile-&gt;Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile-&gt;Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prme", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prme", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterFile.FileInfo">
            <summary>The <see cref="P:Aerotech.Ensemble.Parameters.ParameterFile.FileInfo"></see> of the parameter file</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorType-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CyclesPerRev-&gt;Value = 4;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CountsPerRev-&gt;Value = 4000;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackType-&gt;Value = 1;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackChannel-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentThreshold-&gt;Value = 1.15f;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MaxCurrentClamp-&gt;Value = 4.6f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKi-&gt;Value = 12000.0f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKp-&gt;Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prme", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile-&gt;FileInfo-&gt;Name);
        // Change some other parameters.
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;PositionErrorThreshold-&gt;Value = 0.001;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitHigh-&gt;Value = -10;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitLow-&gt;Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile-&gt;Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile-&gt;Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prme", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prme", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterFile.DataVersion">
            <summary>The version of the library that last modified data in the parameter file</summary>
            <remarks>
            	<para>This gets modified on a <see cref="M:Aerotech.Ensemble.Parameters.ParameterFile.Save"></see></para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterFile.CompatibleVersion">
            <summary>Specifies the oldest version of software with which the parameter files are compatible.</summary>
        </member>
        <member name="E:Aerotech.Ensemble.Parameters.ParameterFile.FileInfoChanged">
            <summary>
            Is raised when <see cref="P:Aerotech.Ensemble.Parameters.ParameterFile.FileInfo"></see> changes
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterFile.UserDataSections">
            <summary>Provides access to the user-customizable tag in the configuration file</summary>
            <remarks>
            	<para>
            		This is so that whomever uses this class can store additional information in this tag that
            		is not a parameter value.
            	</para>
            	<para>
            		When using this, pick a unique string to store the data.  It is recommended to have the company
            		name in the name of the section.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterFile.Axes">
            <summary>
            Provides access to parameters on the axes
            </summary>
            <remarks>
            	<note>
            		For <see cref="T:Aerotech.Ensemble.Parameters.ParameterFile"></see>, one can set the mask of the axes, thus
            		enabling or disabling the existance of some axes.
            	</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Parameters</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorType-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CyclesPerRev-&gt;Value = 4;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;CountsPerRev-&gt;Value = 4000;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackType-&gt;Value = 1;
        baseParameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackChannel-&gt;Value = 0;
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentThreshold-&gt;Value = 1.15f;
        baseParameters-&gt;Axes["X"]-&gt;Motor-&gt;MaxCurrentClamp-&gt;Value = 4.6f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKi-&gt;Value = 12000.0f;
        baseParameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKp-&gt;Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prme", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile-&gt;FileInfo-&gt;Name);
        // Change some other parameters.
        baseParameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;PositionErrorThreshold-&gt;Value = 0.001;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitHigh-&gt;Value = -10;
        baseParameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitLow-&gt;Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile-&gt;Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile-&gt;Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prme", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prme", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Task">
            <summary>
            Represents a task
            </summary>
            <remarks>
            	<para>
            		You can get the state of the task using <see cref="P:Aerotech.Ensemble.Tasks.Task.State"></see> and any error
            		using <see cref="P:Aerotech.Ensemble.Tasks.Program.Error"></see>.
            	</para>
            	<para>
            		You can run a program from the PC using <see cref="M:Aerotech.Ensemble.Tasks.Program.Run(System.String)"></see> or
            		a compiled program on the controller's file system using <see cref="M:Aerotech.Ensemble.Tasks.Program.Run(Aerotech.Ensemble.FileSystem.FileInfo)"></see>.
            		A task can be stopped using <see cref="M:Aerotech.Ensemble.Tasks.Program.Stop"></see>.
            	</para>
            	<para>
            		For more control over the operations and program debugging functionality, see <see cref="N:Aerotech.Ensemble.Tasks.Debug"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Task.DedicatedJoystick">
            <summary>
            Allows this task to handle the joystick
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Task.State">
            <summary>
            The specified task's state
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Tasks</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Run the program in task 1.
        myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Run("program.ab");
        // Get the state of the task and print it out to verify that the task is running.
        TaskState taskState = myController-&gt;Tasks[TaskId::T01]-&gt;State;
        Console::WriteLine("Task State: {0}", taskState);
        // Stops the program from running.
        myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Stop();
        // Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController-&gt;Tasks[TaskId::T01]-&gt;State;
        Console::WriteLine("Task State: {0}", taskState);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Run the program in task 1.
        myController.Tasks[TaskId.T01].Program.Run("program.ab");
        // Get the state of the task and print it out to verify that the task is running.
        TaskState taskState = myController.Tasks[TaskId.T01].State;
        Console.WriteLine("Task State: {0}", taskState);
        // Stops the program from running.
        myController.Tasks[TaskId.T01].Program.Stop();
        // Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController.Tasks[TaskId.T01].State;
        Console.WriteLine("Task State: {0}", taskState);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Run the program in task 1.
        myController.Tasks.Item(TaskId.T01).Program.Run("program.ab")
        ' Get the state of the task and print it out to verify that the task is running.
        Dim taskState As TaskState = myController.Tasks.Item(TaskId.T01).State
        Console.WriteLine("Task State: {0}", taskState)
        ' Stops the program from running.
        myController.Tasks.Item(TaskId.T01).Program.Stop
        ' Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController.Tasks.Item(TaskId.T01).State
        Console.WriteLine("Task State: {0}", taskState)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Task.Program">
            <summary>
            Represents a program running in a task
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Task.Name">
            <summary>
            The "name" of this task
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.DedicatedJoystick">
            <summary>
            Allows the task to handle the joystick
            </summary>
            <remarks>
            	<note>This is available only on an <see cref="F:Aerotech.Ensemble.Information.ComponentType.Control"></see> or <see cref="F:Aerotech.Ensemble.Information.ComponentType.Lab"></see></note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.DedicatedJoystick.Start">
            <summary>
            Makes the current task handle the joystick pair #1
            </summary>
            <remarks>
            	<para>
            		This works just like the <a href="mk:@MSITStore:Ensemble.chm::/Commands/JOYSTICK_Command.html">JOYSTICK</a>
            		command, everything that applies to it, also applies to this method.
            	</para>
            	<para>
            		For this command to succeed the task must not be running a program or handling a joystick pair.
            	</para>
            	<note>
            		To stop the handling of the joystick, the user either has to explicitly quit on
            		the joystick, or <see cref="M:Aerotech.Ensemble.Tasks.DedicatedJoystick.Stop"></see> must be called.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.DedicatedJoystick.Start(System.Int32)">
            <summary>
            Makes the current task handle the joystick
            </summary>
            <param name="pairNumber">The joystick pair number to control initially</param>
            <remarks>
            	<para>
            		This works just like the <a href="mk:@MSITStore:Ensemble.chm::/Commands/JOYSTICK_Command.html">JOYSTICK</a>
            		command, everything that applies to it, also applies to this method.
            	</para>
            	<para>
            		For this command to succeed the task must not be running a program.
            	</para>
            	<note>
            		To stop the handling of the joystick, the user either has to explicitly quit on
            		the joystick, or <see cref="M:Aerotech.Ensemble.Tasks.DedicatedJoystick.Stop"></see> must be called.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.DedicatedJoystick.Stop">
            <summary>
            Stops the current task from handling the joystick
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.TasksCollection">
            <summary>
            Represents the tasks
            </summary>
            <remarks>
            	<para>
            		You can get the states of all the tasks using <see cref="P:Aerotech.Ensemble.Tasks.TasksCollection.States"></see>,
            		and you can stop all of them using <see cref="M:Aerotech.Ensemble.Tasks.TasksCollection.StopPrograms"></see>.
            	</para>
            	<para>
            		To get a specific task, use indexer.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.TasksCollection.StopPrograms">
            <summary>
            Stops all tasks
            </summary>
            <remarks>
            	<para>
            		This method will stop any programs running in the tasks. Therefore,
            		use with care.
            	</para>
            </remarks>
            <include file="examples.xml" path="/*/TasksCollection/Example[@name=&quot;TasksCollection&quot;]/*"></include>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.TasksCollection.StopPrograms(Aerotech.Ensemble.TaskId[])">
            <summary>Stops the given tasks</summary>
            <param name="taskIds">The ids of the tasks to stop</param>
            <remarks>
            	<para>
            		This method will stop any programs running in the tasks. Therefore, use with care.
            	</para>
            	<para>
            		This method does not stop all programs atomically, but rather in sequence. As a result, there is no guarantee that all programs will be stopped when this method completes. For example, a program running on Task 2 can restart a program on Task 1 that was just stopped before the program on Task 2 is stopped by this method.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.TasksCollection.States">
            <summary>
            Retrieves all task states from the controller
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common.Collections</li>
<li>Aerotech.Ensemble</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Get the state of all tasks and return into a collection.
        INamedConstantCollection&lt;TaskState,TaskId&gt;^ states = myController-&gt;Tasks-&gt;States;
        // Specify which tasks we would like to check the state of.
        array&lt;TaskId&gt;^ taskIds = {TaskId::T01, TaskId::T04};
        // Loop over each task we specified and print its state.
        for each (TaskId task in taskIds)
        {
            Console::WriteLine("Task {0}'s State: {1}", task, states[task]);
        }
        // Stop the programs from running on all tasks.
        myController-&gt;Tasks-&gt;StopPrograms();
        // Check the state of each specified task again to make sure it was reset.
        for each (TaskId task in taskIds)
        {
            Console::WriteLine("Task {0}'s State After Reset: {1}", task, states[task]);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Get the state of all tasks and return into a collection.
        INamedConstantCollection&lt;TaskState, TaskId&gt; states = myController.Tasks.States;
        // Specify which tasks we would like to check the state of.
        TaskId[] taskIds = new TaskId[] { TaskId.T01, TaskId.T04 };
        // Loop over each task we specified and print its state.
        foreach (TaskId task in taskIds)
        {
            Console.WriteLine("Task {0}'s State: {1}", task, states[task]);
        }
        // Stop the programs from running on all tasks.
        myController.Tasks.StopPrograms();
        // Check the state of each specified task again to make sure it was reset.
        foreach (TaskId task in taskIds)
        {
            Console.WriteLine("Task {0}'s State After Reset: {1}", task, states[task]);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Get the state of all tasks and return into a collection.
        Dim states As INamedConstantCollection(Of TaskState, TaskId) = myController.Tasks.States
        ' Specify which tasks we would like to check the state of.
        Dim taskIds As TaskId() = New TaskId() { TaskId.T01, TaskId.T04 }
        ' Loop over each task we specified and print its state.
        Dim task As TaskId
        For Each task In taskIds
            Console.WriteLine("Task {0}'s State: {1}", task, states.Item(task))
        Next
        ' Stop the programs from running on all tasks.
        myController.Tasks.StopPrograms
        ' Check the state of each specified task again to make sure it was reset.
        For Each task In taskIds
            Console.WriteLine("Task {0}'s State After Reset: {1}", task, states.Item(task))
        Next
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Program">
            <summary>
            Represents the program running part of a <see cref="T:Aerotech.Ensemble.Tasks.Task"></see>
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Program.Run(Aerotech.Ensemble.FileSystem.FileInfo)">
            <summary>
            Runs a file that is on the controller's file system
            </summary>
            <param name="fileInfo">The *.bcx file to run on the controller's file system</param>
            <remarks>
            	<para>
            		A <see cref="T:Aerotech.Ensemble.FileSystem.FileInfo"></see> object can be retrieved from <see cref="T:Aerotech.Ensemble.FileSystem.FileManager"></see>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.FileSystem</li>
<li>Aerotech.Ensemble.Tasks</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Specify the file on the controller's file system to use.
        FileInfo^ fileInfo = myController-&gt;FileManager["linear.bcx"];
        // Run the program in task 1 using FileInfo. Make sure the file is sent to the controller
        // before calling this method, as this method runs the file from the controller's file system.
        myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Run(fileInfo);
        // Get the state of the task and print it out to verify that the task is running.
        TaskState taskState = myController-&gt;Tasks[TaskId::T01]-&gt;State;
        Console::WriteLine("Task State: {0}", taskState);
        // Stops the program from running.
        myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Stop();
        // Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController-&gt;Tasks[TaskId::T01]-&gt;State;
        Console::WriteLine("Task State: {0}", taskState);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Specify the file on the controller's file system to use.
        FileInfo fileInfo = myController.FileManager["linear.bcx"];
        // Run the program in task 1 using FileInfo. Make sure the file is sent to the controller
        // before calling this method, as this method runs the file from the controller's file system.
        myController.Tasks[TaskId.T01].Program.Run(fileInfo);
        // Get the state of the task and print it out to verify that the task is running.
        TaskState taskState = myController.Tasks[TaskId.T01].State;
        Console.WriteLine("Task State: {0}", taskState);
        // Stops the program from running.
        myController.Tasks[TaskId.T01].Program.Stop();
        // Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController.Tasks[TaskId.T01].State;
        Console.WriteLine("Task State: {0}", taskState);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Specify the file on the controller's file system to use.
        Dim fileInfo As FileInfo = myController.FileManager.Item("linear.bcx")
        ' Run the program in task 1 using FileInfo. Make sure the file is sent to the controller
        ' before calling this method, as this method runs the file from the controller's file system.
        myController.Tasks.Item(TaskId.T01).Program.Run(fileInfo)
        ' Get the state of the task and print it out to verify that the task is running.
        Dim taskState As TaskState = myController.Tasks.Item(TaskId.T01).State
        Console.WriteLine("Task State: {0}", taskState)
        ' Stops the program from running.
        myController.Tasks.Item(TaskId.T01).Program.Stop
        ' Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController.Tasks.Item(TaskId.T01).State
        Console.WriteLine("Task State: {0}", taskState)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Program.Run(System.String)">
            <summary>
            Runs a file from the PC in this task
            </summary>
            <param name="fileName">The file to run</param>
            <returns><c>true</c> if successful</returns>
            <remarks>
            	<para>
            		This function can accept *.ab, *.bcm, *.bco, or *.bcx files.
            		Depending on which one was passed, it will compile, assemble, and link it, and then
            		load onto the controller.  It uses the <see cref="T:Aerotech.AeroBasic.Builder"></see> to process the
            		files.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Tasks</li>
<li>System</li>
</ul>
<code lang="C++">


    try
    {
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Run the program in task 1.
        myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Run("program.ab");
        // Get the state of the task and print it out to verify that the task is running.
        TaskState taskState = myController-&gt;Tasks[TaskId::T01]-&gt;State;
        Console::WriteLine("Task State: {0}", taskState);
        // Stops the program from running.
        myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Stop();
        // Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController-&gt;Tasks[TaskId::T01]-&gt;State;
        Console::WriteLine("Task State: {0}", taskState);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Run the program in task 1.
        myController.Tasks[TaskId.T01].Program.Run("program.ab");
        // Get the state of the task and print it out to verify that the task is running.
        TaskState taskState = myController.Tasks[TaskId.T01].State;
        Console.WriteLine("Task State: {0}", taskState);
        // Stops the program from running.
        myController.Tasks[TaskId.T01].Program.Stop();
        // Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController.Tasks[TaskId.T01].State;
        Console.WriteLine("Task State: {0}", taskState);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Run the program in task 1.
        myController.Tasks.Item(TaskId.T01).Program.Run("program.ab")
        ' Get the state of the task and print it out to verify that the task is running.
        Dim taskState As TaskState = myController.Tasks.Item(TaskId.T01).State
        Console.WriteLine("Task State: {0}", taskState)
        ' Stops the program from running.
        myController.Tasks.Item(TaskId.T01).Program.Stop
        ' Verify that the task has actually stopped running. Task state should be 'Ready' if program has stopped.
        taskState = myController.Tasks.Item(TaskId.T01).State
        Console.WriteLine("Task State: {0}", taskState)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Program.Run(System.String,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Runs a file in this task
            </summary>
            <param name="fileName">The file to run</param>
            <param name="progressChangedEventHandler">Delegate to call to provide progress information</param>
            <returns><c>true</c> if successful</returns>
            <remarks>
            	<para>
            		This function can accept *.ab, *.bcm, *.bco, or *.bcx files.
            		Depending on which one was passed, it will compile, assemble, and link it, and then
            		load onto the controller.  It uses the <see cref="T:Aerotech.AeroBasic.Builder"></see> to process the
            		files.
            	</para>
            	<para>
            		The progress in <paramref name="progressChangedEventHandler"></paramref> is provided only for the
            		sending of the file to the controller, not for compiling of it (if needed).
            	</para>
            	<para>
            		Depending on the file size, this operation could take a large amount of time to execute; use <paramref name="progressChangedEventHandler"></paramref>
            		to get information about the progress of the operation.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Program.Start">
            <summary>
            Starts the loaded program
            </summary>
            <remarks>
            	<para>
            		If the program was loaded or paused, this method will resume running it.
            		The program can be loaded by using <see cref="M:Aerotech.Ensemble.Tasks.Program.Load(System.String)"></see> method and paused by using
            		<see cref="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.Pause"></see> method.
            	</para>
            	<para>
            		If the program was stopped, this method will start the program from the beginning.
            		The program can be stopped by using <see cref="M:Aerotech.Ensemble.Tasks.Program.Stop"></see>.  Please note that when doing this,
            		none of the global values will be reset to the original state.  This could cause the program to fail.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Tasks</li>
<li>System</li>
<li>System.IO</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Specifiy the file to debug.
        String^ fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Load(fileName))
        {
            Console::WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Breakpoints-&gt;Add(gcnew FilePoint(Path::GetFullPath(fileName), 16) );
            // Run the program in task 1.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
            // Wait for program to reach line 16, the breakpoint line.
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber &lt; 16))
            {
                Thread::Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0 ; (i &lt; 5); i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
                myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;StepOver();
                Console::WriteLine("Current Line Number: {0}", myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
            // Run the rest of program.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Specifiy the file to debug.
        string fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController.Tasks[TaskId.T01].Program.Load(fileName))
        {
            Console.WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController.Tasks[TaskId.T01].Program.Debug.Breakpoints.Add(new FilePoint(Path.GetFullPath(fileName), 0x10));
            // Run the program in task 1.
            myController.Tasks[TaskId.T01].Program.Start();
            // Wait for program to reach line 16, the breakpoint line.
            while (myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber &lt; 0x10)
            {
                Thread.Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController.Tasks[TaskId.T01].Program.Debug.Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0; i &lt; 5; i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
                myController.Tasks[TaskId.T01].Program.Debug.StepOver();
                Console.WriteLine("Current Line Number: {0}", myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
            // Run the rest of program.
            myController.Tasks[TaskId.T01].Program.Start();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Specifiy the file to debug.
        Dim fileName As String = "program.ab"
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Load the program in task 1.
        If Not myController.Tasks.Item(TaskId.T01).Program.Load(fileName) Then
            Console.WriteLine("Error loading program into task!")
        Else
            ' Add a breakpoint at line 16 in the program
            myController.Tasks.Item(TaskId.T01).Program.Debug.Breakpoints.Add(New FilePoint(Path.GetFullPath(fileName), &amp;H10))
            ' Run the program in task 1.
            myController.Tasks.Item(TaskId.T01).Program.Start
            ' Wait for program to reach line 16, the breakpoint line.
            Do While (myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber &lt; &amp;H10)
                Thread.Sleep(50)
            Loop
			' Pause program execution so we can step through execution.
            myController.Tasks.Item(TaskId.T01).Program.Debug.Pause
            ' Step 5 lines and print line number for each step.
            Dim i As Integer
            For i = 0 To 5 - 1
				' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
				Loop
                myController.Tasks.Item(TaskId.T01).Program.Debug.StepOver
                Console.WriteLine("Current Line Number: {0}", myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber)
            Next i
			' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
			Loop
            ' Run the rest of program.
            myController.Tasks.Item(TaskId.T01).Program.Start
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Program.Stop">
            <summary>
            Stops the running program
            </summary>
            <remarks>
            	<para>The program can be restarted by calling <see cref="M:Aerotech.Ensemble.Tasks.Program.Start"></see></para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Program.Load(System.String)">
            <summary>
            Loads the program to the task
            </summary>
            <param name="fileName">The file to load</param>
            <returns><c>true</c> if load was successful</returns>
            <remarks>
            	<para>
            		This function can accept *.ab, *.bcm, *.bco, or *.bcx files.
            		Depending on which one was passed, it will compile, assemble, and link it, and then
            		load onto the controller.
            	</para>
            	<para>
            		The call to this method loads the symbols.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Tasks</li>
<li>System</li>
<li>System.IO</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Specifiy the file to debug.
        String^ fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Load(fileName))
        {
            Console::WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Breakpoints-&gt;Add(gcnew FilePoint(Path::GetFullPath(fileName), 16) );
            // Run the program in task 1.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
            // Wait for program to reach line 16, the breakpoint line.
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber &lt; 16))
            {
                Thread::Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0 ; (i &lt; 5); i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
                myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;StepOver();
                Console::WriteLine("Current Line Number: {0}", myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
            // Run the rest of program.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Specifiy the file to debug.
        string fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController.Tasks[TaskId.T01].Program.Load(fileName))
        {
            Console.WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController.Tasks[TaskId.T01].Program.Debug.Breakpoints.Add(new FilePoint(Path.GetFullPath(fileName), 0x10));
            // Run the program in task 1.
            myController.Tasks[TaskId.T01].Program.Start();
            // Wait for program to reach line 16, the breakpoint line.
            while (myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber &lt; 0x10)
            {
                Thread.Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController.Tasks[TaskId.T01].Program.Debug.Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0; i &lt; 5; i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
                myController.Tasks[TaskId.T01].Program.Debug.StepOver();
                Console.WriteLine("Current Line Number: {0}", myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
            // Run the rest of program.
            myController.Tasks[TaskId.T01].Program.Start();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Specifiy the file to debug.
        Dim fileName As String = "program.ab"
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Load the program in task 1.
        If Not myController.Tasks.Item(TaskId.T01).Program.Load(fileName) Then
            Console.WriteLine("Error loading program into task!")
        Else
            ' Add a breakpoint at line 16 in the program
            myController.Tasks.Item(TaskId.T01).Program.Debug.Breakpoints.Add(New FilePoint(Path.GetFullPath(fileName), &amp;H10))
            ' Run the program in task 1.
            myController.Tasks.Item(TaskId.T01).Program.Start
            ' Wait for program to reach line 16, the breakpoint line.
            Do While (myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber &lt; &amp;H10)
                Thread.Sleep(50)
            Loop
			' Pause program execution so we can step through execution.
            myController.Tasks.Item(TaskId.T01).Program.Debug.Pause
            ' Step 5 lines and print line number for each step.
            Dim i As Integer
            For i = 0 To 5 - 1
				' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
				Loop
                myController.Tasks.Item(TaskId.T01).Program.Debug.StepOver
                Console.WriteLine("Current Line Number: {0}", myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber)
            Next i
			' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
			Loop
            ' Run the rest of program.
            myController.Tasks.Item(TaskId.T01).Program.Start
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Program.Load(System.String,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Loads the program to the task
            </summary>
            <param name="fileName">The file to laod</param>
            <param name="progressChangedEventHandler">Delegate to call to provide progress</param>
            <returns><c>true</c> if load was successful</returns>
            <remarks>
            	<para>
            		This function can accept *.ab, *.bcm, *.bco, or *.bcx files.
            		Depending on which one was passed, it will compile, assemble, and link it, and then
            		load onto the controller.
            	</para>
            	<para>
            		Depending on the file size, this operation could take a large amount of  time to execute; the <paramref name="progressChangedEventHandler"></paramref>
            		can be used to get progress information of the operation.
            		Progress is provided only for the loading of the program, not for compilation (if needed).
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Program.Debug">
            <summary>
            Provides debugging functionality
            </summary>
            <remarks>
            	<para>
            		The basic functionality is available from the <see cref="T:Aerotech.Ensemble.Tasks.Task"></see> class.
            		The <see cref="T:Aerotech.Ensemble.Tasks.Debug.ProgramDebug"></see> class provides 
            		ability to debug programs running in a task.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Program.Error">
            <summary>
            Returns current task error information
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Program.FileName">
            <summary>
            Returns the name of the file (*.bcx) that is running in this task
            </summary>
            <remarks>
            	<para>
            		This is not always known, so make sure that the return value is valid
            		before using it.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Debug.ProgramDebug">
            <summary>
            Provides functionality to debug a task
            </summary>
            <remarks>
            	<para>
            		The basic functionality is provided by the <see cref="T:Aerotech.Ensemble.Tasks.Task"></see> class, this
            		class provides more control over operations, and ability to debug the
            		program running in the task.
            	</para>
            	<para>
            		To run a program using this class, call the <see cref="M:Aerotech.Ensemble.Tasks.Program.Load(System.String)"></see> method and
            		then <see cref="M:Aerotech.Ensemble.Tasks.Program.Start"></see>, this will also load the symbols.
            	</para>
            	<para>
            		To debug a program, you need to load the symbols either by running the application
            		as described earlier, or by calling <see cref="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadSymbols(System.String)"></see>.  Once the symbols are
            		loaded, you can step the program and pause it.  To get information about the variables 
            		see <see cref="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadContext"></see>.  The current program position can be viewed in
            		<see cref="P:Aerotech.Ensemble.Status.ControllerDiagPacket.ProgramPosition"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.StepInto">
            <summary>
            Steps the program in this task to the next line
            </summary>
            <remarks>
            	<para>
            		This method does not wait for the program to go to the next line.
            		Symbols must be loaded for this method to work.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.StepOver">
            <summary>
            Steps over the program in this task to the next line
            </summary>
            <remarks>
            	<para>
            		This does not step into any functions.
            		Symbols must be loaded for this method to work.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.StepOut">
            <summary>
            Steps out the program in this task
            </summary>
            <remarks>
            	<para>
            		This makes the program run until it returns from the current function.
            		Symbols must be loaded for this method to work.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.Pause">
            <summary>
            Pauses the program in this task so it can be debugged
            </summary>
            <remarks>
            	<para>
            		This forces the program to stop executing on the next line.
            		To resume program execution, call <see cref="M:Aerotech.Ensemble.Tasks.Program.Start"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadSymbols(System.String)">
            <summary>
            Loads symbols from a file
            </summary>
            <param name="path">The path to the file with symbols</param>
            <remarks>
            	<para>
            		If a program is already running, but debugging needs to take place, this can be used to
            		load previously build symbols for the program running in this task.
            	</para>
            	<note>
            		This call validates that the symbols are correct.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadContext">
            <summary>
            Loads the context information for the current position of the task
            </summary>
            <returns>The context information</returns>
            <remarks>
            	<para>
            		The context information is returned for the current position of the task.
            	</para>
            	<para>
            		Symbols must be loaded for the context to be loaded.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadContext(Aerotech.Common.FilePoint)">
            <summary>
            Loads the context information for this task
            </summary>
            <param name="position">The position to load the symbols for</param>
            <returns>The context information</returns>
            <remarks>
            	<para>
            		Symbols must be loaded for the context to be loaded.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadContext(System.Int32)">
            <summary>
            Loads the context information for this task
            </summary>
            <param name="programCounter">The program counter to load the symbols for</param>
            <returns>The context information</returns>
            <remarks>
            	<para>
            		Symbols must be loaded for the context to be loaded.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.CounterToPosition(System.Int32)">
            <summary>
            Converts a program counter to a position
            </summary>
            <param name="counter">The program counter to convert</param>
            <returns>The position to which <paramref name="counter"></paramref> corresponds to</returns>
            <remarks>
            	<para>
            		The <paramref name="counter"></paramref> can be retrieved from a <see cref="T:Aerotech.Ensemble.Status.ControllerDiagPacket"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.SymbolsLoaded">
            <summary>
            Tests whether the symbols are loaded for this task
            </summary>
            <remarks>
            	<para>
            		Symbols must be loaded to debug the program.  To load the program with symbols, 
            		use <see cref="M:Aerotech.Ensemble.Tasks.Program.Load(System.String)"></see> or load the symbols by using
            		<see cref="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadSymbols(System.String)"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.SymbolsFile">
            <summary>
            Provides the path to the symbols file that is currently being used
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.Location">
            <summary>
            The current task location
            </summary>
            <remarks>
            	<para>
            		This specifies the execution point where the task is right now.
            		Symbols must be loaded for this to work.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.Breakpoints">
            <summary>
            Provides access to the breakpoints manager
            </summary>
            <remarks>
            	<para>
            		Breakpoints allow one to setup points which, when reached, will pause the program.
            	</para>
            	<para>
            		Symbols must be loaded for breakpoints to work.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Tasks</li>
<li>System</li>
<li>System.IO</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Specifiy the file to debug.
        String^ fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Load(fileName))
        {
            Console::WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Breakpoints-&gt;Add(gcnew FilePoint(Path::GetFullPath(fileName), 16) );
            // Run the program in task 1.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
            // Wait for program to reach line 16, the breakpoint line.
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber &lt; 16))
            {
                Thread::Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0 ; (i &lt; 5); i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
                myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;StepOver();
                Console::WriteLine("Current Line Number: {0}", myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
            // Run the rest of program.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Specifiy the file to debug.
        string fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController.Tasks[TaskId.T01].Program.Load(fileName))
        {
            Console.WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController.Tasks[TaskId.T01].Program.Debug.Breakpoints.Add(new FilePoint(Path.GetFullPath(fileName), 0x10));
            // Run the program in task 1.
            myController.Tasks[TaskId.T01].Program.Start();
            // Wait for program to reach line 16, the breakpoint line.
            while (myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber &lt; 0x10)
            {
                Thread.Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController.Tasks[TaskId.T01].Program.Debug.Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0; i &lt; 5; i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
                myController.Tasks[TaskId.T01].Program.Debug.StepOver();
                Console.WriteLine("Current Line Number: {0}", myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
            // Run the rest of program.
            myController.Tasks[TaskId.T01].Program.Start();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Specifiy the file to debug.
        Dim fileName As String = "program.ab"
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Load the program in task 1.
        If Not myController.Tasks.Item(TaskId.T01).Program.Load(fileName) Then
            Console.WriteLine("Error loading program into task!")
        Else
            ' Add a breakpoint at line 16 in the program
            myController.Tasks.Item(TaskId.T01).Program.Debug.Breakpoints.Add(New FilePoint(Path.GetFullPath(fileName), &amp;H10))
            ' Run the program in task 1.
            myController.Tasks.Item(TaskId.T01).Program.Start
            ' Wait for program to reach line 16, the breakpoint line.
            Do While (myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber &lt; &amp;H10)
                Thread.Sleep(50)
            Loop
			' Pause program execution so we can step through execution.
            myController.Tasks.Item(TaskId.T01).Program.Debug.Pause
            ' Step 5 lines and print line number for each step.
            Dim i As Integer
            For i = 0 To 5 - 1
				' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
				Loop
                myController.Tasks.Item(TaskId.T01).Program.Debug.StepOver
                Console.WriteLine("Current Line Number: {0}", myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber)
            Next i
			' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
			Loop
            ' Run the rest of program.
            myController.Tasks.Item(TaskId.T01).Program.Start
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.FileNames">
            <summary>
            The files that were used to compile the program
            </summary>
            <remarks>
            	<para>
            		This includes the paths of files that were used when compiling the program;
            		for example, this includes the *.abi files.
            	</para>
            	<para>
            		Symbols must be loaded for this to work.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Debug.BreakpointsManager">
            <summary>
            Manager of breakpoints for a specific task
            </summary>
            <remarks>
            	<para>
            		This can be retrieved from <see cref="T:Aerotech.Ensemble.Tasks.Debug.ProgramDebug"></see>.  The symbols must be loaded
            		for a task for the breakpoints to work.  To check if symbols are loaded, see
            		<see cref="P:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.SymbolsLoaded"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.BreakpointsManager.Add(Aerotech.Common.FilePoint)">
            <summary>
            Adds a breakpoint at a specified location
            </summary>
            <param name="location">The location to add the breakpoint on</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.Common</li>
<li>Aerotech.Ensemble</li>
<li>Aerotech.Ensemble.Tasks</li>
<li>System</li>
<li>System.IO</li>
<li>System.Threading</li>
</ul>
<code lang="C++">


    try
    {
        // Specifiy the file to debug.
        String^ fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller::Connect();
        Controller^ myController = Controller::ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Load(fileName))
        {
            Console::WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Breakpoints-&gt;Add(gcnew FilePoint(Path::GetFullPath(fileName), 16) );
            // Run the program in task 1.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
            // Wait for program to reach line 16, the breakpoint line.
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber &lt; 16))
            {
                Thread::Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0 ; (i &lt; 5); i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
                myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;StepOver();
                Console::WriteLine("Current Line Number: {0}", myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Debug-&gt;Location-&gt;LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while ((myController-&gt;Tasks[TaskId::T01]-&gt;State != TaskState::ProgramPaused)) { }
            // Run the rest of program.
            myController-&gt;Tasks[TaskId::T01]-&gt;Program-&gt;Start();
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex-&gt;Message);
    }


</code>
<code lang="C#">


    try
    {
        // Specifiy the file to debug.
        string fileName = "program.ab";
        // Connect to the network and use the first active controller.
        Controller.Connect();
        Controller myController = Controller.ConnectedControllers[0];
        // Load the program in task 1.
        if (!myController.Tasks[TaskId.T01].Program.Load(fileName))
        {
            Console.WriteLine("Error loading program into task!");
        }
        else
        {
            // Add a breakpoint at line 16 in the program
            myController.Tasks[TaskId.T01].Program.Debug.Breakpoints.Add(new FilePoint(Path.GetFullPath(fileName), 0x10));
            // Run the program in task 1.
            myController.Tasks[TaskId.T01].Program.Start();
            // Wait for program to reach line 16, the breakpoint line.
            while (myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber &lt; 0x10)
            {
                Thread.Sleep(50);
            }
			// Pause program execution so we can step through execution.
            myController.Tasks[TaskId.T01].Program.Debug.Pause();
            // Step 5 lines and print line number for each step.
            for (int i = 0; i &lt; 5; i++)
            {
				// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
                myController.Tasks[TaskId.T01].Program.Debug.StepOver();
                Console.WriteLine("Current Line Number: {0}", myController.Tasks[TaskId.T01].Program.Debug.Location.LineNumber);
            }
			// Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            while (myController.Tasks[TaskId.T01].State != TaskState.ProgramPaused) { }
            // Run the rest of program.
            myController.Tasks[TaskId.T01].Program.Start();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }


</code>
<code lang="VB.NET">


    Try 
        ' Specifiy the file to debug.
        Dim fileName As String = "program.ab"
        ' Connect to the network and use the first active controller.
        Controller.Connect
        Dim myController As Controller = Controller.ConnectedControllers.Item(0)
        ' Load the program in task 1.
        If Not myController.Tasks.Item(TaskId.T01).Program.Load(fileName) Then
            Console.WriteLine("Error loading program into task!")
        Else
            ' Add a breakpoint at line 16 in the program
            myController.Tasks.Item(TaskId.T01).Program.Debug.Breakpoints.Add(New FilePoint(Path.GetFullPath(fileName), &amp;H10))
            ' Run the program in task 1.
            myController.Tasks.Item(TaskId.T01).Program.Start
            ' Wait for program to reach line 16, the breakpoint line.
            Do While (myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber &lt; &amp;H10)
                Thread.Sleep(50)
            Loop
			' Pause program execution so we can step through execution.
            myController.Tasks.Item(TaskId.T01).Program.Debug.Pause
            ' Step 5 lines and print line number for each step.
            Dim i As Integer
            For i = 0 To 5 - 1
				' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
                Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
				Loop
                myController.Tasks.Item(TaskId.T01).Program.Debug.StepOver
                Console.WriteLine("Current Line Number: {0}", myController.Tasks.Item(TaskId.T01).Program.Debug.Location.LineNumber)
            Next i
			' Wait for the task to enter the ProgramPaused state before commanding it to continue execution
            Do While (myController.Tasks.Item(TaskId.T01).State &lt;&gt; TaskState.ProgramPaused)
			Loop
            ' Run the rest of program.
            myController.Tasks.Item(TaskId.T01).Program.Start
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try


</code>

</example>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.BreakpointsManager.Remove(Aerotech.Common.FilePoint)">
            <summary>
            Removes a breakpoint from a specified location
            </summary>
            <param name="location">The location to remove the breakpoint on</param>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.BreakpointsManager.RemoveAll">
            <summary>
            Removes all the breakpoints
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.BreakpointsManager.System#Collections#Generic#IEnumerable{Aerotech#Common#FilePoint}#GetEnumerator">
            <summary>
            Provides an enumerator for this class
            </summary>
            <returns>The enumerator over all the breakpoint locations</returns>
            <remarks>
            	<para>
            		This allows one to do a <c>foreach</c> on this class.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Debug.CurrentContext">
            <summary>
            Represents a context, allows access to variables at a location in a task
            </summary>
            <remarks>
            	<para>
            		This class allows to get information about the variables of a program running in a task.
            		To get this class, see <see cref="M:Aerotech.Ensemble.Tasks.Debug.ProgramDebug.LoadContext"></see>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.CurrentContext.GetEnumerator">
            <summary>
            Returns an enumerator over all the variables
            </summary>
            <remarks>
            	<note>
            		Returns all variables (locals and arguments do not override globals)
            	</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.CurrentContext.Globals">
            <summary>
            Provides access to globals
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.CurrentContext.InFunction">
            <summary>
            Tells whether the current context is in a function
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.CurrentContext.Function">
            <summary>
            Provides the name of the function we are in
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.CurrentContext.Location">
            <summary>
            Returns the location for which this context is for
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.CurrentContext.Arguments">
            <summary>
            Provides access to the arguments of the function
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.CurrentContext.Locals">
            <summary>
            Provides access to the locals of the function
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.CurrentContext.Item(System.String)">
            <summary>
            Allows to retrieve variables by their name
            </summary>
            <param name="name">The name of the variable to retrieve</param>
            <returns>The variable with the given name.
            	<note>
            		Locals and Arguments override globals when doing this lookup.
            	</note>
            </returns>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Debug.Variable">
            <summary>
            Represents an AeroBasic variable
            </summary>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.Debug.Variable.controller">
            <summary>
            The controller to which this variable is on
            </summary>
            <exclude></exclude>
        </member>
        <member name="F:Aerotech.Ensemble.Tasks.Debug.Variable.task">
            <summary>
            The task to which this variable is in
            </summary>
            <exclude></exclude>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.Variable.Scope">
            <summary>
            The scope of the variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.Variable.Type">
            <summary>
            The type of the variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.Variable.Name">
            <summary>
            The name of the variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.Variable.Value">
            <summary>
            Retreive the value of this variable
            </summary>
            <remarks>
            If value is of some type that is not supported, return value will be <c>"N/A"</c>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.Variable.Address">
            <summary>
            The address of the variable
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Debug.ArrayVariable">
            <summary>
            Represents an array variable
            </summary>
            <remarks>
            <note>Multi dimensional arrays are stored as arrays of arrays.</note>
            </remarks>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.GetEnumerator">
            <summary>
            Provides an enumerator over all the elements of the array
            </summary>
            <returns>The enumerator over variables</returns>
            <remarks>
            This allows one to use the <c>foreach</c> operator on instances of this class
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.ElementType">
            <summary>
            Gets the type of the elements in this array
            </summary>
            <remarks>
            <note>Multi-dimensional arrays are stored as arrays of arrays.</note>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.Type">
            <summary>
            Gets the type of this variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.Value">
            <summary>
            Gets the value of this variable
            </summary>
            <remarks>
            For arrays, the values are returned as arrays of objects, where each element is of the <see cref="P:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.ElementType"></see> type
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.Address">
            <summary>
            The address of this variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.Count">
            <summary>
            The number of elements in this array
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.ArrayVariable.Item(System.Int32)">
            <summary>
            Gets a element of this array
            </summary>
            <param name="index">The index of the element to retrieve</param>
            <returns>A variable representing the element of the array</returns>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Debug.StructVariable">
            <summary>
            Represents an AeroBasic structure (type)
            </summary>
        </member>
        <member name="M:Aerotech.Ensemble.Tasks.Debug.StructVariable.GetEnumerator">
            <summary>
            Creates enumerator over all the fields of the structure
            </summary>
            <returns>The enumerator over all the variables</returns>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.StructVariable.Type">
            <summary>
            The type of the variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.StructVariable.Value">
            <summary>
            The value of this variable
            </summary>
            <remarks>
            Structures are stored as arrays of <see cref="T:System.Collections.Generic.KeyValuePair`2"></see> where
            the key is the field name, and the value is the value of that field
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.StructVariable.Address">
            <summary>
            The address of this variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.StructVariable.NumberOfFields">
            <summary>
            Gets the number of fields in this structure
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.StructVariable.Fields">
            <summary>
            Gets the names of the fields in this structure
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.StructVariable.Item(System.String)">
            <summary>
            Gets a field in this structure
            </summary>
            <param name="name">The name of the field</param>
            <returns>Variable representing the field in this structure</returns>
        </member>
        <member name="T:Aerotech.Ensemble.Tasks.Debug.SimpleVariable">
            <summary>
            Represents a simple AeroBasic variable (int, double, string, float, double)
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.SimpleVariable.Type">
            <summary>
            The type of the variable
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Tasks.Debug.SimpleVariable.Value">
            <summary>
            The value of this variable
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.TypedParameterBounds`1">
            <summary>
            Represents bounds of a typed parameter
            </summary>
            <typeparam name="TType">The type of parameter</typeparam>
            <remarks>
            	<para>
            		This class is used as the parameter <see cref="T:Aerotech.Ensemble.Parameters.TypedParameter`1"></see>.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParameterBounds">
            <summary>
            Represents the bounds of a generic parameter
            </summary>
            <remarks>
            	<para>
            		This class is used as part of <see cref="T:Aerotech.Ensemble.Parameters.Parameter"></see>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterBounds.Exists">
            <summary>
            Whether the parameter has bounds
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterBounds.Max">
            <summary>
            The parameter maximum value, if any
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.ParameterBounds.Min">
            <summary>
            The parameter minimum value, if any
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TypedParameterBounds`1.Max">
            <summary>
            Parameter maximum value
            </summary>
        </member>
        <member name="P:Aerotech.Ensemble.Parameters.TypedParameterBounds`1.Min">
            <summary>
            Parameter minimum value
            </summary>
        </member>
        <member name="T:Aerotech.Ensemble.Parameters.ParametersAllCollection">
            <summary>
            Represents a category that contains parameters in a non-nested fashion
            </summary>
            <remarks>
            	<para>
            		This is used to provide a collection of parameters accessible by name.  See
            		the indexer of <see cref="T:Aerotech.Ensemble.Parameters.ParameterCategory"></see>.  This collection does not have
            		information about the specific type of parameters.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.Ensemble.Parameters.ParameterInfoProvider.oldNames">
            <summary>New Name -&gt; Old Name</summary>
        </member>
        <member name="M:Aerotech.Ensemble.Parameters.ParameterInfoProvider.GetLegacyName(System.String)">
            <summary>Get the names of the parameter including the old ones</summary>
        </member>
    </members>
</doc>